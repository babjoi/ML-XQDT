// $ANTLR 3.1.2 XQueryParser.g 2010-10-30 17:34:03

/*******************************************************************************
 * Copyright (c) 2008, 2009 28msec Inc. and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Gabriel Petrovay (28msec) - initial API and implementation
 *     Sam Neth (Mark Logic)
 *******************************************************************************/
package org.eclipse.wst.xquery.internal.core.parser.antlr;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

@SuppressWarnings({ "rawtypes", "unchecked", "unused" })
public class XQueryParser extends XQDTParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "L_QuotAttrContentChar", "L_AposAttrContentChar", "L_ElementContentChar", "L_CDataSection", "L_PredefinedEntityRef", "L_CharRef", "ESCAPE_LBRACKET", "ESCAPE_RBRACKET", "ESCAPE_APOS", "ESCAPE_QUOT", "CDATA_START", "CDATA_END", "ANCESTOR", "ANCESTOR_OR_SELF", "AND", "AS", "ASCENDING", "AT", "ATTRIBUTE", "BASE_URI", "BOUNDARY_SPACE", "BY", "CASE", "CAST", "CASTABLE", "CHILD", "COLLATION", "COMMENT", "CONSTRUCTION", "COPY_NAMESPACES", "DECLARE", "DEFAULT", "DESCENDANT", "DESCENDANT_OR_SELF", "DESCENDING", "DIV", "DOCUMENT", "DOCUMENT_NODE", "ELEMENT", "ELSE", "EMPTY", "EMPTY_SEQUENCE", "ENCODING", "EQ", "EVERY", "EXCEPT", "EXTERNAL", "FOLLOWING", "FOLLOWING_SIBLING", "FOR", "FUNCTION", "GE", "GREATEST", "GT", "IDIV", "IF", "IMPORT", "IN", "INHERIT", "INSTANCE", "INTERSECT", "IS", "ITEM", "LAX", "LE", "LEAST", "LET", "LT", "MOD", "MODULE", "NAMESPACE", "NE", "NO_INHERIT", "NO_PRESERVE", "NODE", "OF", "OPTION", "OR", "ORDER", "ORDERED", "ORDERING", "PARENT", "PRECEDING", "PRECEDING_SIBLING", "PRESERVE", "PROCESSING_INSTRUCTION", "RETURN", "SATISFIES", "SCHEMA", "SCHEMA_ATTRIBUTE", "SCHEMA_ELEMENT", "SELF", "SOME", "STABLE", "STRICT", "STRIP", "TEXT", "THEN", "TO", "TREAT", "TYPESWITCH", "UNION", "UNORDERED", "VALIDATE", "VARIABLE", "VERSION", "WHERE", "XQUERY", "CATCH", "CONTEXT", "COUNT", "DECIMAL_FORMAT", "DECIMAL_SEPARATOR", "DETERMINISTIC", "DIGIT", "END", "GROUP", "GROUPING_SEPARATOR", "INFINITY", "MINUS_SIGN", "NAMESPACE_NODE", "NAN", "NEXT", "NONDETERMINISTIC", "ONLY", "OUTER", "PATTERN_SEPARATOR", "PERCENT", "PER_MILLE", "PRIVATE", "PUBLIC", "PREVIOUS", "SLIDING", "START", "TRY", "TUMBLING", "WHEN", "WINDOW", "ZERO_DIGIT", "AFTER", "BEFORE", "COPY", "DELETE", "FIRST", "INSERT", "INTO", "LAST", "MODIFY", "NODES", "RENAME", "REPLACE", "REVALIDATION", "SKIP", "UPDATING", "VALUE", "WITH", "BLOCK", "CONSTANT", "EXIT", "RETURNING", "SEQUENTIAL", "SET", "SIMPLE", "WHILE", "EVAL", "USING", "APPEND_ONLY", "AUTOMATICALLY", "CHECK", "COLLECTION", "CONSTRAINT", "CONST", "EQUALITY", "FOREACH", "FOREIGN", "FROM", "INDEX", "INTEGRITY", "KEY", "MAINTAINED", "MANUALLY", "MUTABLE", "NON", "ON", "QUEUE", "RANGE", "READ_ONLY", "UNIQUE", "BINARY", "AMP_ER", "APOS_ER", "QUOT_ER", "LPAREN", "RPAREN", "DOLLAR", "LBRACKET", "RBRACKET", "LSQUARE", "RSQUARE", "EQUAL", "BIND", "NOTEQUAL", "AMP", "COMMA", "QUESTION", "STAR", "PLUS", "MINUS", "SMALLER", "GREATER", "SMALLEREQ", "GREATEREQ", "SMALLER_SMALLER", "GREATER_GREATER", "SLASH", "SLASH_SLASH", "DOT", "DOT_DOT", "COLON", "COLON_COLON", "EMPTY_CLOSE_TAG", "CLOSE_TAG", "SEMICOLON", "VBAR", "PRAGMA_START", "PRAGMA_END", "XML_COMMENT_START", "XML_COMMENT_END", "PI_START", "PI_END", "ATTR_SIGN", "CHARREF_DEC", "CHARREF_HEX", "APOS", "QUOT", "NCNameStartChar", "NCNameChar", "L_NCName", "Letter", "HexLetter", "Digit", "Digits", "S", "SU", "L_Pragma", "L_DirCommentConstructor", "L_DirPIConstructor", "L_IntegerLiteral", "L_DecimalLiteral", "L_DoubleLiteral", "L_Comment", "L_AnyChar", "L_QuotStringLiteralChar", "L_AposStringLiteralChar", "LibraryModule", "MainModule", "VersionDecl", "VersionDeclEncoding", "VersionDeclVersion", "ModuleDecl", "Prolog", "DefaultNamespaceDecls", "DefaultNamespaceDecl", "Setters", "Setter", "NamespaceDecls", "NamespaceDecl", "Imports", "SchemaImport", "SchemaPrefix", "NamespaceName", "DefaultElementNamespace", "AtHints", "ModuleImport", "BaseURIDecl", "OrderedDecls", "VarDecl", "VarType", "VarValue", "VarDefaultValue", "VarConstantDecl", "VarVariableDecl", "FunctionDecl", "ParamList", "ReturnType", "OptionDecl", "TypeDeclaration", "Param", "EnclosedExpr", "QueryBody", "UnaryExpr", "DirElemConstructor", "DirAttributeList", "DirAttributeValue", "DirElemContent", "CommonContent", "SequenceType", "EmptySequenceTest", "KindTest", "ItemTest", "AtomicType", "StringLiteral", "ElementContentChar", "AttributeValueChar", "QName", "Block", "BlockDecls", "BlockVarDecl", "BinaryTest", "EXPLICITLY"
    };
    public static final int L_CDataSection=7;
    public static final int INDEX=180;
    public static final int MINUS=211;
    public static final int NAMESPACE_NODE=124;
    public static final int VarDefaultValue=283;
    public static final int Setters=267;
    public static final int END=119;
    public static final int INTO=149;
    public static final int PATTERN_SEPARATOR=130;
    public static final int VarType=281;
    public static final int GREATER_GREATER=217;
    public static final int ReturnType=288;
    public static final int RENAME=153;
    public static final int INSTANCE=63;
    public static final int TypeDeclaration=290;
    public static final int LAX=67;
    public static final int IMPORT=60;
    public static final int BINARY=192;
    public static final int BaseURIDecl=278;
    public static final int ON=187;
    public static final int DOT=220;
    public static final int CONSTRAINT=174;
    public static final int Letter=242;
    public static final int ORDER=82;
    public static final int CASTABLE=28;
    public static final int Prolog=264;
    public static final int DETERMINISTIC=117;
    public static final int CONSTANT=161;
    public static final int EMPTY_CLOSE_TAG=224;
    public static final int TYPESWITCH=104;
    public static final int MODULE=73;
    public static final int ESCAPE_RBRACKET=11;
    public static final int AMP=206;
    public static final int RPAREN=197;
    public static final int VERSION=109;
    public static final int DefaultElementNamespace=275;
    public static final int DirAttributeList=296;
    public static final int AttributeValueChar=307;
    public static final int XML_COMMENT_START=230;
    public static final int DECLARE=34;
    public static final int SchemaPrefix=273;
    public static final int BOUNDARY_SPACE=24;
    public static final int CLOSE_TAG=225;
    public static final int ElementContentChar=306;
    public static final int NONDETERMINISTIC=127;
    public static final int UNION=105;
    public static final int STRIP=99;
    public static final int RANGE=189;
    public static final int GROUPING_SEPARATOR=121;
    public static final int HexLetter=243;
    public static final int WHEN=140;
    public static final int DESCENDING=38;
    public static final int DOCUMENT_NODE=41;
    public static final int Imports=271;
    public static final int ANCESTOR_OR_SELF=17;
    public static final int MUTABLE=185;
    public static final int SMALLER_SMALLER=216;
    public static final int CATCH=112;
    public static final int GE=55;
    public static final int ATTR_SIGN=234;
    public static final int ELSE=43;
    public static final int SU=247;
    public static final int PRAGMA_START=228;
    public static final int EVAL=168;
    public static final int L_ElementContentChar=6;
    public static final int SELF=95;
    public static final int NamespaceName=274;
    public static final int COUNT=114;
    public static final int TEXT=100;
    public static final int COLON=222;
    public static final int PARENT=85;
    public static final int SET=165;
    public static final int UNIQUE=191;
    public static final int FOREACH=177;
    public static final int PUBLIC=134;
    public static final int PERCENT=131;
    public static final int EMPTY_SEQUENCE=45;
    public static final int EXTERNAL=50;
    public static final int Digit=244;
    public static final int LAST=150;
    public static final int COLLECTION=173;
    public static final int DOT_DOT=221;
    public static final int AUTOMATICALLY=171;
    public static final int DECIMAL_SEPARATOR=116;
    public static final int CAST=27;
    public static final int L_CharRef=9;
    public static final int OptionDecl=289;
    public static final int LBRACKET=199;
    public static final int MOD=72;
    public static final int EXCEPT=49;
    public static final int QUESTION=208;
    public static final int OR=81;
    public static final int KindTest=302;
    public static final int AFTER=143;
    public static final int BLOCK=160;
    public static final int SMALLEREQ=214;
    public static final int S=246;
    public static final int Setter=268;
    public static final int BY=25;
    public static final int SCHEMA_ELEMENT=94;
    public static final int INFINITY=122;
    public static final int EnclosedExpr=292;
    public static final int TUMBLING=139;
    public static final int NO_INHERIT=76;
    public static final int LPAREN=196;
    public static final int PRECEDING_SIBLING=87;
    public static final int L_DecimalLiteral=252;
    public static final int EXIT=162;
    public static final int PI_START=232;
    public static final int APOS=237;
    public static final int SKIP=156;
    public static final int FROM=179;
    public static final int DELETE=146;
    public static final int EMPTY=44;
    public static final int NamespaceDecl=270;
    public static final int ASCENDING=20;
    public static final int NamespaceDecls=269;
    public static final int QUEUE=188;
    public static final int WHILE=167;
    public static final int ESCAPE_QUOT=13;
    public static final int ONLY=128;
    public static final int SchemaImport=272;
    public static final int APOS_ER=194;
    public static final int NE=75;
    public static final int COMMENT=31;
    public static final int Param=291;
    public static final int RETURNING=163;
    public static final int L_AnyChar=255;
    public static final int RSQUARE=202;
    public static final int ESCAPE_APOS=12;
    public static final int NCNameChar=240;
    public static final int EQUALITY=176;
    public static final int WITH=159;
    public static final int IN=61;
    public static final int DirElemContent=298;
    public static final int SOME=96;
    public static final int NEXT=126;
    public static final int RETURN=90;
    public static final int LET=70;
    public static final int IF=59;
    public static final int QName=308;
    public static final int NODE=78;
    public static final int PER_MILLE=132;
    public static final int FOR=53;
    public static final int CHARREF_HEX=236;
    public static final int PRESERVE=88;
    public static final int DEFAULT=35;
    public static final int L_AposAttrContentChar=5;
    public static final int BEFORE=144;
    public static final int ATTRIBUTE=22;
    public static final int CHILD=29;
    public static final int Digits=245;
    public static final int CDATA_START=14;
    public static final int TRY=138;
    public static final int OPTION=80;
    public static final int L_DirCommentConstructor=249;
    public static final int COMMA=207;
    public static final int CONST=175;
    public static final int ELEMENT=42;
    public static final int AS=19;
    public static final int DOCUMENT=40;
    public static final int ENCODING=46;
    public static final int NAN=125;
    public static final int AtomicType=304;
    public static final int TREAT=103;
    public static final int NAMESPACE=74;
    public static final int LEAST=69;
    public static final int THEN=101;
    public static final int PI_END=233;
    public static final int GREATEREQ=215;
    public static final int SequenceType=300;
    public static final int FOREIGN=178;
    public static final int OrderedDecls=279;
    public static final int NCNameStartChar=239;
    public static final int PRIVATE=133;
    public static final int AND=18;
    public static final int BASE_URI=23;
    public static final int TO=102;
    public static final int DefaultNamespaceDecls=265;
    public static final int ItemTest=303;
    public static final int FUNCTION=54;
    public static final int L_Pragma=248;
    public static final int READ_ONLY=190;
    public static final int ParamList=287;
    public static final int QueryBody=293;
    public static final int RBRACKET=200;
    public static final int LE=68;
    public static final int SCHEMA=92;
    public static final int CONSTRUCTION=32;
    public static final int VersionDecl=260;
    public static final int PLUS=210;
    public static final int VarDecl=280;
    public static final int L_DoubleLiteral=253;
    public static final int NON=186;
    public static final int INTERSECT=64;
    public static final int AT=21;
    public static final int AtHints=276;
    public static final int L_QuotAttrContentChar=4;
    public static final int LSQUARE=201;
    public static final int GREATEST=56;
    public static final int APPEND_ONLY=170;
    public static final int MAINTAINED=183;
    public static final int EQ=47;
    public static final int L_AposStringLiteralChar=257;
    public static final int LT=71;
    public static final int ESCAPE_LBRACKET=10;
    public static final int OF=79;
    public static final int DOLLAR=198;
    public static final int WINDOW=141;
    public static final int FOLLOWING=51;
    public static final int CASE=26;
    public static final int CDATA_END=15;
    public static final int UnaryExpr=294;
    public static final int DESCENDANT_OR_SELF=37;
    public static final int EQUAL=203;
    public static final int SEMICOLON=226;
    public static final int CHECK=172;
    public static final int KEY=182;
    public static final int FIRST=147;
    public static final int SIMPLE=166;
    public static final int DIV=39;
    public static final int BlockVarDecl=311;
    public static final int REVALIDATION=155;
    public static final int INSERT=148;
    public static final int QUOT=238;
    public static final int VersionDeclVersion=262;
    public static final int WHERE=110;
    public static final int DefaultNamespaceDecl=266;
    public static final int COPY=145;
    public static final int PREVIOUS=135;
    public static final int AMP_ER=193;
    public static final int USING=169;
    public static final int SCHEMA_ATTRIBUTE=93;
    public static final int EVERY=48;
    public static final int CONTEXT=113;
    public static final int XQUERY=111;
    public static final int INTEGRITY=181;
    public static final int SLIDING=136;
    public static final int MainModule=259;
    public static final int UPDATING=157;
    public static final int IDIV=58;
    public static final int PRAGMA_END=229;
    public static final int BlockDecls=310;
    public static final int SATISFIES=91;
    public static final int EXPLICITLY=313;
    public static final int VALUE=158;
    public static final int DESCENDANT=36;
    public static final int VarVariableDecl=285;
    public static final int STRICT=98;
    public static final int NOTEQUAL=205;
    public static final int COLON_COLON=223;
    public static final int L_PredefinedEntityRef=8;
    public static final int L_IntegerLiteral=251;
    public static final int ModuleImport=277;
    public static final int FOLLOWING_SIBLING=52;
    public static final int STABLE=97;
    public static final int CHARREF_DEC=235;
    public static final int ModuleDecl=263;
    public static final int DECIMAL_FORMAT=115;
    public static final int START=137;
    public static final int EmptySequenceTest=301;
    public static final int GROUP=120;
    public static final int VALIDATE=107;
    public static final int VarValue=282;
    public static final int PRECEDING=86;
    public static final int ZERO_DIGIT=142;
    public static final int MINUS_SIGN=123;
    public static final int GREATER=213;
    public static final int VBAR=227;
    public static final int DIGIT=118;
    public static final int COPY_NAMESPACES=33;
    public static final int ORDERING=84;
    public static final int NO_PRESERVE=77;
    public static final int UNORDERED=106;
    public static final int OUTER=129;
    public static final int DirAttributeValue=297;
    public static final int VarConstantDecl=284;
    public static final int L_NCName=241;
    public static final int INHERIT=62;
    public static final int SLASH=218;
    public static final int LibraryModule=258;
    public static final int L_DirPIConstructor=250;
    public static final int IS=65;
    public static final int REPLACE=154;
    public static final int GT=57;
    public static final int StringLiteral=305;
    public static final int L_QuotStringLiteralChar=256;
    public static final int DirElemConstructor=295;
    public static final int ITEM=66;
    public static final int ORDERED=83;
    public static final int PROCESSING_INSTRUCTION=89;
    public static final int Block=309;
    public static final int CommonContent=299;
    public static final int COLLATION=30;
    public static final int SLASH_SLASH=219;
    public static final int SEQUENTIAL=164;
    public static final int ANCESTOR=16;
    public static final int SMALLER=212;
    public static final int MANUALLY=184;
    public static final int NODES=152;
    public static final int BinaryTest=312;
    public static final int VersionDeclEncoding=261;
    public static final int VARIABLE=108;
    public static final int EOF=-1;
    public static final int MODIFY=151;
    public static final int QUOT_ER=195;
    public static final int STAR=209;
    public static final int BIND=204;
    public static final int L_Comment=254;
    public static final int FunctionDecl=286;
    public static final int XML_COMMENT_END=231;

    // delegates
    // delegators


        public XQueryParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public XQueryParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return XQueryParser.tokenNames; }
    public String getGrammarFileName() { return "XQueryParser.g"; }


    // dummy list for warning elimination
    List<Stack<Object>> dummy1 = new ArrayList<Stack<Object>>();
    Map<Object, Object> dummy2 = new HashMap<Object, Object>();


    public static class p_Module_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Module"
    // XQueryParser.g:128:1: p_Module : (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF ;
    public final XQueryParser.p_Module_return p_Module() throws RecognitionException {
        XQueryParser.p_Module_return retval = new XQueryParser.p_Module_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EOF1=null;
        XQueryParser.p_VersionDecl_return vd = null;

        XQueryParser.p_LibraryModule_return lm = null;

        XQueryParser.p_MainModule_return mm = null;


        XQDTCommonTree EOF1_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_p_MainModule=new RewriteRuleSubtreeStream(adaptor,"rule p_MainModule");
        RewriteRuleSubtreeStream stream_p_LibraryModule=new RewriteRuleSubtreeStream(adaptor,"rule p_LibraryModule");
        RewriteRuleSubtreeStream stream_p_VersionDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_VersionDecl");
        try {
            // XQueryParser.g:129:9: ( (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF )
            // XQueryParser.g:129:11: (vd= p_VersionDecl )? (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->) EOF
            {
            // XQueryParser.g:129:13: (vd= p_VersionDecl )?
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==XQUERY) ) {
                int LA1_1 = input.LA(2);

                if ( (LA1_1==ENCODING||LA1_1==VERSION) ) {
                    alt1=1;
                }
            }
            switch (alt1) {
                case 1 :
                    // XQueryParser.g:129:13: vd= p_VersionDecl
                    {
                    pushFollow(FOLLOW_p_VersionDecl_in_p_Module538);
                    vd=p_VersionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_VersionDecl.add(vd.getTree());

                    }
                    break;

            }

            // XQueryParser.g:130:13: (lm= p_LibraryModule[$vd.tree] -> | mm= p_MainModule[$vd.tree] ->)
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0==MODULE) ) {
                int LA2_1 = input.LA(2);

                if ( (LA2_1==NAMESPACE) ) {
                    alt2=1;
                }
                else if ( (LA2_1==EOF||LA2_1==AND||(LA2_1>=CAST && LA2_1<=CASTABLE)||LA2_1==DIV||LA2_1==EQ||LA2_1==EXCEPT||LA2_1==GE||(LA2_1>=GT && LA2_1<=IDIV)||(LA2_1>=INSTANCE && LA2_1<=IS)||LA2_1==LE||(LA2_1>=LT && LA2_1<=MOD)||LA2_1==NE||LA2_1==OR||(LA2_1>=TO && LA2_1<=TREAT)||LA2_1==UNION||LA2_1==LPAREN||LA2_1==LSQUARE||LA2_1==EQUAL||LA2_1==NOTEQUAL||LA2_1==COMMA||(LA2_1>=STAR && LA2_1<=SLASH_SLASH)||LA2_1==COLON||(LA2_1>=SEMICOLON && LA2_1<=VBAR)) ) {
                    alt2=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 2, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA2_0>=ANCESTOR && LA2_0<=MOD)||(LA2_0>=NAMESPACE && LA2_0<=DECIMAL_SEPARATOR)||(LA2_0>=DIGIT && LA2_0<=NEXT)||(LA2_0>=ONLY && LA2_0<=EXIT)||(LA2_0>=SEQUENTIAL && LA2_0<=MAINTAINED)||(LA2_0>=MUTABLE && LA2_0<=LPAREN)||LA2_0==DOLLAR||(LA2_0>=STAR && LA2_0<=SMALLER)||(LA2_0>=SLASH && LA2_0<=DOT_DOT)||LA2_0==ATTR_SIGN||(LA2_0>=APOS && LA2_0<=QUOT)||LA2_0==L_NCName||(LA2_0>=L_Pragma && LA2_0<=L_DoubleLiteral)||LA2_0==EXPLICITLY) ) {
                alt2=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 2, 0, input);

                throw nvae;
            }
            switch (alt2) {
                case 1 :
                    // XQueryParser.g:131:17: lm= p_LibraryModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_LibraryModule_in_p_Module573);
                    lm=p_LibraryModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_LibraryModule.add(lm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 131:49: ->
                    {
                        adaptor.addChild(root_0, (lm!=null?((XQDTCommonTree)lm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:132:15: mm= p_MainModule[$vd.tree]
                    {
                    pushFollow(FOLLOW_p_MainModule_in_p_Module599);
                    mm=p_MainModule((vd!=null?((XQDTCommonTree)vd.tree):null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_MainModule.add(mm.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 132:49: ->
                    {
                        adaptor.addChild(root_0, (mm!=null?((XQDTCommonTree)mm.tree):null));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }

            EOF1=(CommonToken)match(input,EOF,FOLLOW_EOF_in_p_Module628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF1);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Module"

    public static class p_VersionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VersionDecl"
    // XQueryParser.g:137:1: p_VersionDecl : k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) ;
    public final XQueryParser.p_VersionDecl_return p_VersionDecl() throws RecognitionException {
        XQueryParser.p_VersionDecl_return retval = new XQueryParser.p_VersionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON2=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return enc = null;

        XQueryParser.p_StringLiteral_return ver = null;


        XQDTCommonTree SEMICOLON2_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_VERSION=new RewriteRuleTokenStream(adaptor,"token VERSION");
        RewriteRuleTokenStream stream_ENCODING=new RewriteRuleTokenStream(adaptor,"token ENCODING");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_XQUERY=new RewriteRuleTokenStream(adaptor,"token XQUERY");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:138:9: (k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) ) )
            // XQueryParser.g:138:11: k+= XQUERY ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,XQUERY,FOLLOW_XQUERY_in_p_VersionDecl656); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_XQUERY.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:138:21: ( (k+= ENCODING enc= p_StringLiteral ) | (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? ) )
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==ENCODING) ) {
                alt4=1;
            }
            else if ( (LA4_0==VERSION) ) {
                alt4=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }
            switch (alt4) {
                case 1 :
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    {
                    // XQueryParser.g:138:22: (k+= ENCODING enc= p_StringLiteral )
                    // XQueryParser.g:138:23: k+= ENCODING enc= p_StringLiteral
                    {
                    k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ENCODING.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl666);
                    enc=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    {
                    // XQueryParser.g:139:13: (k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )? )
                    // XQueryParser.g:139:14: k+= VERSION ver= p_StringLiteral (k+= ENCODING enc= p_StringLiteral )?
                    {
                    k=(CommonToken)match(input,VERSION,FOLLOW_VERSION_in_p_VersionDecl687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VERSION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl691);
                    ver=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ver.getTree());
                    if ( state.backtracking==0 ) {
                      setLanguageVersion(((XQDTCommonTree)ver.getTree()).getChild(0).getText());
                    }
                    // XQueryParser.g:139:122: (k+= ENCODING enc= p_StringLiteral )?
                    int alt3=2;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==ENCODING) ) {
                        alt3=1;
                    }
                    switch (alt3) {
                        case 1 :
                            // XQueryParser.g:139:123: k+= ENCODING enc= p_StringLiteral
                            {
                            k=(CommonToken)match(input,ENCODING,FOLLOW_ENCODING_in_p_VersionDecl698); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ENCODING.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            pushFollow(FOLLOW_p_StringLiteral_in_p_VersionDecl702);
                            enc=p_StringLiteral();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_StringLiteral.add(enc.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON2=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_VersionDecl708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON2);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ver, enc
            // token labels: 
            // rule labels: ver, retval, enc
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_ver=new RewriteRuleSubtreeStream(adaptor,"rule ver",ver!=null?ver.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_enc=new RewriteRuleSubtreeStream(adaptor,"rule enc",enc!=null?enc.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 140:17: -> ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
            {
                // XQueryParser.g:140:20: ^( VersionDecl ^( VersionDeclVersion ( $ver)? ) ^( VersionDeclEncoding ( $enc)? ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDecl, "VersionDecl"), root_1);

                // XQueryParser.g:140:34: ^( VersionDeclVersion ( $ver)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclVersion, "VersionDeclVersion"), root_2);

                // XQueryParser.g:140:55: ( $ver)?
                if ( stream_ver.hasNext() ) {
                    adaptor.addChild(root_2, stream_ver.nextTree());

                }
                stream_ver.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:140:62: ^( VersionDeclEncoding ( $enc)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VersionDeclEncoding, "VersionDeclEncoding"), root_2);

                // XQueryParser.g:140:84: ( $enc)?
                if ( stream_enc.hasNext() ) {
                    adaptor.addChild(root_2, stream_enc.nextTree());

                }
                stream_enc.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VersionDecl"

    public static class p_MainModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MainModule"
    // XQueryParser.g:144:1: p_MainModule[CommonTree vd] : pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) ;
    public final XQueryParser.p_MainModule_return p_MainModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_MainModule_return retval = new XQueryParser.p_MainModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Prolog_return pm_Prolog3 = null;

        XQueryParser.p_QueryBody_return p_QueryBody4 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_QueryBody=new RewriteRuleSubtreeStream(adaptor,"rule p_QueryBody");
        try {
            // XQueryParser.g:145:9: ( pm_Prolog p_QueryBody -> ^( MainModule pm_Prolog p_QueryBody ) )
            // XQueryParser.g:145:11: pm_Prolog p_QueryBody
            {
            pushFollow(FOLLOW_pm_Prolog_in_p_MainModule776);
            pm_Prolog3=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog3.getTree());
            pushFollow(FOLLOW_p_QueryBody_in_p_MainModule778);
            p_QueryBody4=p_QueryBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QueryBody.add(p_QueryBody4.getTree());


            // AST REWRITE
            // elements: p_QueryBody, pm_Prolog
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 146:17: -> ^( MainModule pm_Prolog p_QueryBody )
            {
                // XQueryParser.g:146:20: ^( MainModule pm_Prolog p_QueryBody )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(MainModule, "MainModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());
                adaptor.addChild(root_1, stream_p_QueryBody.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MainModule"

    public static class p_LibraryModule_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LibraryModule"
    // XQueryParser.g:150:1: p_LibraryModule[CommonTree vd] : p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) ;
    public final XQueryParser.p_LibraryModule_return p_LibraryModule(CommonTree vd) throws RecognitionException {
        XQueryParser.p_LibraryModule_return retval = new XQueryParser.p_LibraryModule_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ModuleDecl_return p_ModuleDecl5 = null;

        XQueryParser.pm_Prolog_return pm_Prolog6 = null;


        RewriteRuleSubtreeStream stream_pm_Prolog=new RewriteRuleSubtreeStream(adaptor,"rule pm_Prolog");
        RewriteRuleSubtreeStream stream_p_ModuleDecl=new RewriteRuleSubtreeStream(adaptor,"rule p_ModuleDecl");
        try {
            // XQueryParser.g:151:9: ( p_ModuleDecl pm_Prolog -> ^( LibraryModule p_ModuleDecl pm_Prolog ) )
            // XQueryParser.g:151:11: p_ModuleDecl pm_Prolog
            {
            pushFollow(FOLLOW_p_ModuleDecl_in_p_LibraryModule834);
            p_ModuleDecl5=p_ModuleDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ModuleDecl.add(p_ModuleDecl5.getTree());
            pushFollow(FOLLOW_pm_Prolog_in_p_LibraryModule836);
            pm_Prolog6=pm_Prolog();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Prolog.add(pm_Prolog6.getTree());


            // AST REWRITE
            // elements: pm_Prolog, p_ModuleDecl
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 152:17: -> ^( LibraryModule p_ModuleDecl pm_Prolog )
            {
                // XQueryParser.g:152:20: ^( LibraryModule p_ModuleDecl pm_Prolog )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(LibraryModule, "LibraryModule"), root_1);

                adaptor.addChild(root_1, vd);
                adaptor.addChild(root_1, stream_p_ModuleDecl.nextTree());
                adaptor.addChild(root_1, stream_pm_Prolog.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LibraryModule"

    public static class p_ModuleDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ModuleDecl"
    // XQueryParser.g:156:1: p_ModuleDecl : k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) ;
    public final XQueryParser.p_ModuleDecl_return p_ModuleDecl() throws RecognitionException {
        XQueryParser.p_ModuleDecl_return retval = new XQueryParser.p_ModuleDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL8=null;
        CommonToken SEMICOLON10=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return p_NCName7 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral9 = null;


        XQDTCommonTree EQUAL8_tree=null;
        XQDTCommonTree SEMICOLON10_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:157:9: (k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON -> ^( ModuleDecl p_NCName p_StringLiteral ) )
            // XQueryParser.g:157:11: k+= MODULE k+= NAMESPACE p_NCName EQUAL p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_p_ModuleDecl892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_ModuleDecl896); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_p_ModuleDecl898);
            p_NCName7=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName7.getTree());
            EQUAL8=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_ModuleDecl900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL8);

            pushFollow(FOLLOW_p_StringLiteral_in_p_ModuleDecl902);
            p_StringLiteral9=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(p_StringLiteral9.getTree());
            SEMICOLON10=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ModuleDecl904); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON10);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: p_NCName, p_StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 158:17: -> ^( ModuleDecl p_NCName p_StringLiteral )
            {
                // XQueryParser.g:158:21: ^( ModuleDecl p_NCName p_StringLiteral )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleDecl, "ModuleDecl"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                adaptor.addChild(root_1, stream_p_StringLiteral.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ModuleDecl"

    public static class pm_Prolog_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Prolog"
    // XQueryParser.g:164:1: pm_Prolog : ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) ;
    public final XQueryParser.pm_Prolog_return pm_Prolog() throws RecognitionException {
        XQueryParser.pm_Prolog_return retval = new XQueryParser.pm_Prolog_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_dnd=null;
        List list_s=null;
        List list_nd=null;
        List list_i=null;
        XQueryParser.pg_OrderedDecl_return od = null;

        XQueryParser.pm_DefaultNamespaceDecl_return dnd = null;
         dnd = null;
        XQueryParser.p_Setter_return s = null;
         s = null;
        XQueryParser.pm_NamespaceDecl_return nd = null;
         nd = null;
        XQueryParser.p_Import_return i = null;
         i = null;
        RewriteRuleSubtreeStream stream_p_Import=new RewriteRuleSubtreeStream(adaptor,"rule p_Import");
        RewriteRuleSubtreeStream stream_pg_OrderedDecl=new RewriteRuleSubtreeStream(adaptor,"rule pg_OrderedDecl");
        RewriteRuleSubtreeStream stream_pm_DefaultNamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_DefaultNamespaceDecl");
        RewriteRuleSubtreeStream stream_pm_NamespaceDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_NamespaceDecl");
        RewriteRuleSubtreeStream stream_p_Setter=new RewriteRuleSubtreeStream(adaptor,"rule p_Setter");
        try {
            // XQueryParser.g:165:9: ( ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) ) )
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )* od= pg_OrderedDecl
            {
            // XQueryParser.g:165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*
            loop6:
            do {
                int alt6=2;
                alt6 = dfa6.predict(input);
                switch (alt6) {
            	case 1 :
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    {
            	    // XQueryParser.g:165:12: (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import )
            	    int alt5=4;
            	    int LA5_0 = input.LA(1);

            	    if ( (LA5_0==DECLARE) ) {
            	        int LA5_1 = input.LA(2);

            	        if ( (LA5_1==DEFAULT) ) {
            	            int LA5_3 = input.LA(3);

            	            if ( (LA5_3==COLLATION||LA5_3==ORDER) ) {
            	                alt5=2;
            	            }
            	            else if ( (LA5_3==ELEMENT||LA5_3==FUNCTION) ) {
            	                alt5=1;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 5, 3, input);

            	                throw nvae;
            	            }
            	        }
            	        else if ( ((LA5_1>=BASE_URI && LA5_1<=BOUNDARY_SPACE)||LA5_1==CONSTRUCTION||LA5_1==ORDERING) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==REVALIDATION) && ((lc(XQU)))) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==COPY_NAMESPACES) ) {
            	            alt5=2;
            	        }
            	        else if ( (LA5_1==NAMESPACE) ) {
            	            alt5=3;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 5, 1, input);

            	            throw nvae;
            	        }
            	    }
            	    else if ( (LA5_0==IMPORT) ) {
            	        alt5=4;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 5, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt5) {
            	        case 1 :
            	            // XQueryParser.g:165:13: dnd+= pm_DefaultNamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog965);
            	            dnd=pm_DefaultNamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_DefaultNamespaceDecl.add(dnd.getTree());
            	            if (list_dnd==null) list_dnd=new ArrayList();
            	            list_dnd.add(dnd.getTree());


            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:165:44: s+= p_Setter
            	            {
            	            pushFollow(FOLLOW_p_Setter_in_pm_Prolog971);
            	            s=p_Setter();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Setter.add(s.getTree());
            	            if (list_s==null) list_s=new ArrayList();
            	            list_s.add(s.getTree());


            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:165:58: nd+= pm_NamespaceDecl
            	            {
            	            pushFollow(FOLLOW_pm_NamespaceDecl_in_pm_Prolog977);
            	            nd=pm_NamespaceDecl();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_pm_NamespaceDecl.add(nd.getTree());
            	            if (list_nd==null) list_nd=new ArrayList();
            	            list_nd.add(nd.getTree());


            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:165:81: i+= p_Import
            	            {
            	            pushFollow(FOLLOW_p_Import_in_pm_Prolog983);
            	            i=p_Import();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_Import.add(i.getTree());
            	            if (list_i==null) list_i=new ArrayList();
            	            list_i.add(i.getTree());


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            pushFollow(FOLLOW_pg_OrderedDecl_in_pm_Prolog990);
            od=pg_OrderedDecl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_OrderedDecl.add(od.getTree());


            // AST REWRITE
            // elements: od, s, dnd, nd, i
            // token labels: 
            // rule labels: od, retval
            // token list labels: 
            // rule list labels: i, nd, dnd, s
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_od=new RewriteRuleSubtreeStream(adaptor,"rule od",od!=null?od.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            RewriteRuleSubtreeStream stream_nd=new RewriteRuleSubtreeStream(adaptor,"token nd",list_nd);
            RewriteRuleSubtreeStream stream_dnd=new RewriteRuleSubtreeStream(adaptor,"token dnd",list_dnd);
            RewriteRuleSubtreeStream stream_s=new RewriteRuleSubtreeStream(adaptor,"token s",list_s);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 166:17: -> ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
            {
                // XQueryParser.g:166:21: ^( Prolog ^( DefaultNamespaceDecls ( $dnd)* ) ^( Setters ( $s)* ) ^( NamespaceDecls ( $nd)* ) ^( Imports ( $i)* ) ^( OrderedDecls ( $od)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Prolog, "Prolog"), root_1);

                // XQueryParser.g:167:33: ^( DefaultNamespaceDecls ( $dnd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DefaultNamespaceDecls, "DefaultNamespaceDecls"), root_2);

                // XQueryParser.g:167:57: ( $dnd)*
                while ( stream_dnd.hasNext() ) {
                    adaptor.addChild(root_2, stream_dnd.nextTree());

                }
                stream_dnd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:168:33: ^( Setters ( $s)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Setters, "Setters"), root_2);

                // XQueryParser.g:168:43: ( $s)*
                while ( stream_s.hasNext() ) {
                    adaptor.addChild(root_2, stream_s.nextTree());

                }
                stream_s.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:169:33: ^( NamespaceDecls ( $nd)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecls, "NamespaceDecls"), root_2);

                // XQueryParser.g:169:50: ( $nd)*
                while ( stream_nd.hasNext() ) {
                    adaptor.addChild(root_2, stream_nd.nextTree());

                }
                stream_nd.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:170:33: ^( Imports ( $i)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Imports, "Imports"), root_2);

                // XQueryParser.g:170:43: ( $i)*
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextTree());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:171:33: ^( OrderedDecls ( $od)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(OrderedDecls, "OrderedDecls"), root_2);

                // XQueryParser.g:171:48: ( $od)*
                while ( stream_od.hasNext() ) {
                    adaptor.addChild(root_2, stream_od.nextTree());

                }
                stream_od.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Prolog"

    public static class pg_OrderedDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_OrderedDecl"
    // XQueryParser.g:179:1: pg_OrderedDecl : ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* ;
    public final XQueryParser.pg_OrderedDecl_return pg_OrderedDecl() throws RecognitionException {
        XQueryParser.pg_OrderedDecl_return retval = new XQueryParser.pg_OrderedDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_VarDecl_return pm_VarDecl11 = null;

        XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl12 = null;

        XQueryParser.pm_FunctionDecl_return pm_FunctionDecl13 = null;

        XQueryParser.pm_OptionDecl_return pm_OptionDecl14 = null;

        XQueryParser.p_CollectionDecl_return p_CollectionDecl15 = null;

        XQueryParser.p_IndexDecl_return p_IndexDecl16 = null;

        XQueryParser.p_ICDecl_return p_ICDecl17 = null;



        try {
            // XQueryParser.g:180:9: ( ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )* )
            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*
            loop7:
            do {
                int alt7=8;
                alt7 = dfa7.predict(input);
                switch (alt7) {
            	case 1 :
            	    // XQueryParser.g:180:12: pm_VarDecl
            	    {
            	    pushFollow(FOLLOW_pm_VarDecl_in_pg_OrderedDecl1268);
            	    pm_VarDecl11=pm_VarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_VarDecl11.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:180:25: pm_ContextItemDecl
            	    {
            	    pushFollow(FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1272);
            	    pm_ContextItemDecl12=pm_ContextItemDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ContextItemDecl12.getTree());

            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:180:46: pm_FunctionDecl
            	    {
            	    pushFollow(FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1276);
            	    pm_FunctionDecl13=pm_FunctionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_FunctionDecl13.getTree());

            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:180:64: pm_OptionDecl
            	    {
            	    pushFollow(FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1280);
            	    pm_OptionDecl14=pm_OptionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OptionDecl14.getTree());

            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:181:11: {...}? => p_CollectionDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1295);
            	    p_CollectionDecl15=p_CollectionDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionDecl15.getTree());

            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:182:11: {...}? => p_IndexDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_IndexDecl_in_pg_OrderedDecl1310);
            	    p_IndexDecl16=p_IndexDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDecl16.getTree());

            	    }
            	    break;
            	case 7 :
            	    // XQueryParser.g:183:11: {...}? => p_ICDecl
            	    {
            	    if ( !((lc(ZORBA))) ) {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        throw new FailedPredicateException(input, "pg_OrderedDecl", "lc(ZORBA)");
            	    }
            	    pushFollow(FOLLOW_p_ICDecl_in_pg_OrderedDecl1325);
            	    p_ICDecl17=p_ICDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICDecl17.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_OrderedDecl"

    public static class p_Setter_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Setter"
    // XQueryParser.g:188:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );
    public final XQueryParser.p_Setter_return p_Setter() throws RecognitionException {
        XQueryParser.p_Setter_return retval = new XQueryParser.p_Setter_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl18 = null;

        XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl19 = null;

        XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl20 = null;

        XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl21 = null;

        XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl22 = null;

        XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl23 = null;

        XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl24 = null;

        XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl25 = null;



        try {
            // XQueryParser.g:189:9: ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl )
            int alt8=8;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // XQueryParser.g:189:11: pm_BoundarySpaceDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1354);
                    pm_BoundarySpaceDecl18=pm_BoundarySpaceDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BoundarySpaceDecl18.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:190:11: pm_DefaultCollationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_DefaultCollationDecl_in_p_Setter1366);
                    pm_DefaultCollationDecl19=pm_DefaultCollationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_DefaultCollationDecl19.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:191:11: pm_BaseURIDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_BaseURIDecl_in_p_Setter1378);
                    pm_BaseURIDecl20=pm_BaseURIDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_BaseURIDecl20.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:192:11: pm_ConstructionDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ConstructionDecl_in_p_Setter1390);
                    pm_ConstructionDecl21=pm_ConstructionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ConstructionDecl21.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:193:11: pm_OrderingModeDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_OrderingModeDecl_in_p_Setter1402);
                    pm_OrderingModeDecl22=pm_OrderingModeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_OrderingModeDecl22.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:194:11: pm_EmptyOrderDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_EmptyOrderDecl_in_p_Setter1414);
                    pm_EmptyOrderDecl23=pm_EmptyOrderDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_EmptyOrderDecl23.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:195:11: {...}? => pm_RevalidationDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_Setter", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_pm_RevalidationDecl_in_p_Setter1429);
                    pm_RevalidationDecl24=pm_RevalidationDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_RevalidationDecl24.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:196:11: pm_CopyNamespacesDecl
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1441);
                    pm_CopyNamespacesDecl25=pm_CopyNamespacesDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_CopyNamespacesDecl25.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Setter"

    public static class p_Import_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Import"
    // XQueryParser.g:200:1: p_Import : ( pm_SchemaImport | pm_ModuleImport );
    public final XQueryParser.p_Import_return p_Import() throws RecognitionException {
        XQueryParser.p_Import_return retval = new XQueryParser.p_Import_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_SchemaImport_return pm_SchemaImport26 = null;

        XQueryParser.pm_ModuleImport_return pm_ModuleImport27 = null;



        try {
            // XQueryParser.g:201:9: ( pm_SchemaImport | pm_ModuleImport )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==IMPORT) ) {
                int LA9_1 = input.LA(2);

                if ( (LA9_1==SCHEMA) ) {
                    alt9=1;
                }
                else if ( (LA9_1==MODULE) ) {
                    alt9=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 9, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // XQueryParser.g:201:11: pm_SchemaImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_SchemaImport_in_p_Import1467);
                    pm_SchemaImport26=pm_SchemaImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_SchemaImport26.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:201:29: pm_ModuleImport
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pm_ModuleImport_in_p_Import1471);
                    pm_ModuleImport27=pm_ModuleImport();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ModuleImport27.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Import"

    public static class pm_NamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_NamespaceDecl"
    // XQueryParser.g:208:1: pm_NamespaceDecl : k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) ;
    public final XQueryParser.pm_NamespaceDecl_return pm_NamespaceDecl() throws RecognitionException {
        XQueryParser.pm_NamespaceDecl_return retval = new XQueryParser.pm_NamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL28=null;
        CommonToken SEMICOLON29=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;


        XQDTCommonTree EQUAL28_tree=null;
        XQDTCommonTree SEMICOLON29_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:209:9: (k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON -> ^( NamespaceDecl $nn $us) )
            // XQueryParser.g:209:11: k+= DECLARE k+= NAMESPACE nn= p_NCName EQUAL us= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_NamespaceDecl1502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_NamespaceDecl1506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_NCName_in_pm_NamespaceDecl1510);
            nn=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
            EQUAL28=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_NamespaceDecl1512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL28);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1516);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            SEMICOLON29=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_NamespaceDecl1518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON29);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: us, nn
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 210:17: -> ^( NamespaceDecl $nn $us)
            {
                // XQueryParser.g:210:20: ^( NamespaceDecl $nn $us)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceDecl, "NamespaceDecl"), root_1);

                adaptor.addChild(root_1, stream_nn.nextTree());
                adaptor.addChild(root_1, stream_us.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_NamespaceDecl"

    public static class pm_BoundarySpaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BoundarySpaceDecl"
    // XQueryParser.g:214:1: pm_BoundarySpaceDecl : k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON ;
    public final XQueryParser.pm_BoundarySpaceDecl_return pm_BoundarySpaceDecl() throws RecognitionException {
        XQueryParser.pm_BoundarySpaceDecl_return retval = new XQueryParser.pm_BoundarySpaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON30=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON30_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:215:9: (k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON )
            // XQueryParser.g:215:13: k+= DECLARE k+= BOUNDARY_SPACE (k+= PRESERVE | k+= STRIP ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1583); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BOUNDARY_SPACE,FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1587); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:215:42: (k+= PRESERVE | k+= STRIP )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==PRESERVE) ) {
                alt10=1;
            }
            else if ( (LA10_0==STRIP) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // XQueryParser.g:215:43: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:215:57: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_BoundarySpaceDecl1598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON30=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1601); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON30_tree = (XQDTCommonTree)adaptor.create(SEMICOLON30);
            adaptor.addChild(root_0, SEMICOLON30_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BoundarySpaceDecl"

    public static class pm_DefaultNamespaceDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultNamespaceDecl"
    // XQueryParser.g:219:1: pm_DefaultNamespaceDecl : k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultNamespaceDecl_return pm_DefaultNamespaceDecl() throws RecognitionException {
        XQueryParser.pm_DefaultNamespaceDecl_return retval = new XQueryParser.pm_DefaultNamespaceDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON32=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral31 = null;


        XQDTCommonTree SEMICOLON32_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:220:9: (k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON )
            // XQueryParser.g:220:11: k+= DECLARE k+= DEFAULT (k+= ELEMENT | k+= FUNCTION ) k+= NAMESPACE p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1631); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:220:33: (k+= ELEMENT | k+= FUNCTION )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ELEMENT) ) {
                alt11=1;
            }
            else if ( (LA11_0==FUNCTION) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // XQueryParser.g:220:34: k+= ELEMENT
                    {
                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1640); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:220:47: k+= FUNCTION
                    {
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1653);
            p_StringLiteral31=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral31.getTree());
            SEMICOLON32=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1655); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON32_tree = (XQDTCommonTree)adaptor.create(SEMICOLON32);
            adaptor.addChild(root_0, SEMICOLON32_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultNamespaceDecl"

    public static class pm_OptionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OptionDecl"
    // XQueryParser.g:224:1: pm_OptionDecl : k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_OptionDecl_return pm_OptionDecl() throws RecognitionException {
        XQueryParser.pm_OptionDecl_return retval = new XQueryParser.pm_OptionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON35=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName33 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral34 = null;


        XQDTCommonTree SEMICOLON35_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:225:9: (k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON )
            // XQueryParser.g:225:13: k+= DECLARE k+= OPTION p_QName p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OptionDecl1687); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,OPTION,FOLLOW_OPTION_in_pm_OptionDecl1691); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_pm_OptionDecl1693);
            p_QName33=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName33.getTree());
            pushFollow(FOLLOW_p_StringLiteral_in_pm_OptionDecl1695);
            p_StringLiteral34=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral34.getTree());
            SEMICOLON35=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OptionDecl1697); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON35_tree = (XQDTCommonTree)adaptor.create(SEMICOLON35);
            adaptor.addChild(root_0, SEMICOLON35_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OptionDecl"

    public static class pm_OrderingModeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_OrderingModeDecl"
    // XQueryParser.g:229:1: pm_OrderingModeDecl : k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON ;
    public final XQueryParser.pm_OrderingModeDecl_return pm_OrderingModeDecl() throws RecognitionException {
        XQueryParser.pm_OrderingModeDecl_return retval = new XQueryParser.pm_OrderingModeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON36=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON36_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:230:9: (k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON )
            // XQueryParser.g:230:13: k+= DECLARE k+= ORDERING (k+= ORDERED | k+= UNORDERED ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_OrderingModeDecl1729); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDERING,FOLLOW_ORDERING_in_pm_OrderingModeDecl1733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:230:36: (k+= ORDERED | k+= UNORDERED )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ORDERED) ) {
                alt12=1;
            }
            else if ( (LA12_0==UNORDERED) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // XQueryParser.g:230:37: k+= ORDERED
                    {
                    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_pm_OrderingModeDecl1738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:230:50: k+= UNORDERED
                    {
                    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_pm_OrderingModeDecl1744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON36=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1747); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON36_tree = (XQDTCommonTree)adaptor.create(SEMICOLON36);
            adaptor.addChild(root_0, SEMICOLON36_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_OrderingModeDecl"

    public static class pm_EmptyOrderDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_EmptyOrderDecl"
    // XQueryParser.g:234:1: pm_EmptyOrderDecl : k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON ;
    public final XQueryParser.pm_EmptyOrderDecl_return pm_EmptyOrderDecl() throws RecognitionException {
        XQueryParser.pm_EmptyOrderDecl_return retval = new XQueryParser.pm_EmptyOrderDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON37=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON37_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:235:9: (k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON )
            // XQueryParser.g:235:13: k+= DECLARE k+= DEFAULT k+= ORDER k+= EMPTY (k+= GREATEST | k+= LEAST ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_EmptyOrderDecl1779); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1783); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_pm_EmptyOrderDecl1787); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_pm_EmptyOrderDecl1791); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:235:53: (k+= GREATEST | k+= LEAST )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==GREATEST) ) {
                alt13=1;
            }
            else if ( (LA13_0==LEAST) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // XQueryParser.g:235:54: k+= GREATEST
                    {
                    k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_pm_EmptyOrderDecl1796); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:235:68: k+= LEAST
                    {
                    k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_pm_EmptyOrderDecl1802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON37=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1805); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON37_tree = (XQDTCommonTree)adaptor.create(SEMICOLON37);
            adaptor.addChild(root_0, SEMICOLON37_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_EmptyOrderDecl"

    public static class pm_CopyNamespacesDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CopyNamespacesDecl"
    // XQueryParser.g:239:1: pm_CopyNamespacesDecl : k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON ;
    public final XQueryParser.pm_CopyNamespacesDecl_return pm_CopyNamespacesDecl() throws RecognitionException {
        XQueryParser.pm_CopyNamespacesDecl_return retval = new XQueryParser.pm_CopyNamespacesDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA39=null;
        CommonToken SEMICOLON41=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_PreserveMode_return p_PreserveMode38 = null;

        XQueryParser.p_InheritMode_return p_InheritMode40 = null;


        XQDTCommonTree COMMA39_tree=null;
        XQDTCommonTree SEMICOLON41_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:240:9: (k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON )
            // XQueryParser.g:240:13: k+= DECLARE k+= COPY_NAMESPACES p_PreserveMode COMMA p_InheritMode SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1837); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COPY_NAMESPACES,FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1843);
            p_PreserveMode38=p_PreserveMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PreserveMode38.getTree());
            COMMA39=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_CopyNamespacesDecl1845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA39_tree = (XQDTCommonTree)adaptor.create(COMMA39);
            adaptor.addChild(root_0, COMMA39_tree);
            }
            pushFollow(FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1847);
            p_InheritMode40=p_InheritMode();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InheritMode40.getTree());
            SEMICOLON41=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1849); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON41_tree = (XQDTCommonTree)adaptor.create(SEMICOLON41);
            adaptor.addChild(root_0, SEMICOLON41_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CopyNamespacesDecl"

    public static class p_DecimalFormatDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DecimalFormatDecl"
    // XQueryParser.g:244:1: p_DecimalFormatDecl : k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON ;
    public final XQueryParser.p_DecimalFormatDecl_return p_DecimalFormatDecl() throws RecognitionException {
        XQueryParser.p_DecimalFormatDecl_return retval = new XQueryParser.p_DecimalFormatDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DECIMAL_FORMAT42=null;
        CommonToken DEFAULT44=null;
        CommonToken DECIMAL_FORMAT45=null;
        CommonToken EQ47=null;
        CommonToken SEMICOLON49=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName43 = null;

        XQueryParser.p_DFPropertyName_return p_DFPropertyName46 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral48 = null;


        XQDTCommonTree DECIMAL_FORMAT42_tree=null;
        XQDTCommonTree DEFAULT44_tree=null;
        XQDTCommonTree DECIMAL_FORMAT45_tree=null;
        XQDTCommonTree EQ47_tree=null;
        XQDTCommonTree SEMICOLON49_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:245:9: (k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON )
            // XQueryParser.g:245:13: k+= DECLARE ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) ) ( p_DFPropertyName ) EQ p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_DecimalFormatDecl1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:245:24: ( ( DECIMAL_FORMAT p_QName ) | ( DEFAULT DECIMAL_FORMAT ) )
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==DECIMAL_FORMAT) ) {
                alt14=1;
            }
            else if ( (LA14_0==DEFAULT) ) {
                alt14=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }
            switch (alt14) {
                case 1 :
                    // XQueryParser.g:245:25: ( DECIMAL_FORMAT p_QName )
                    {
                    // XQueryParser.g:245:25: ( DECIMAL_FORMAT p_QName )
                    // XQueryParser.g:245:26: DECIMAL_FORMAT p_QName
                    {
                    DECIMAL_FORMAT42=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1885); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT42_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT42);
                    adaptor.addChild(root_0, DECIMAL_FORMAT42_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_DecimalFormatDecl1887);
                    p_QName43=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName43.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:245:52: ( DEFAULT DECIMAL_FORMAT )
                    {
                    // XQueryParser.g:245:52: ( DEFAULT DECIMAL_FORMAT )
                    // XQueryParser.g:245:53: DEFAULT DECIMAL_FORMAT
                    {
                    DEFAULT44=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_DecimalFormatDecl1893); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT44_tree = (XQDTCommonTree)adaptor.create(DEFAULT44);
                    adaptor.addChild(root_0, DEFAULT44_tree);
                    }
                    DECIMAL_FORMAT45=(CommonToken)match(input,DECIMAL_FORMAT,FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1895); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DECIMAL_FORMAT45_tree = (XQDTCommonTree)adaptor.create(DECIMAL_FORMAT45);
                    adaptor.addChild(root_0, DECIMAL_FORMAT45_tree);
                    }

                    }


                    }
                    break;

            }

            // XQueryParser.g:245:78: ( p_DFPropertyName )
            // XQueryParser.g:245:79: p_DFPropertyName
            {
            pushFollow(FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1900);
            p_DFPropertyName46=p_DFPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DFPropertyName46.getTree());

            }

            EQ47=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_DecimalFormatDecl1903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EQ47_tree = (XQDTCommonTree)adaptor.create(EQ47);
            adaptor.addChild(root_0, EQ47_tree);
            }
            pushFollow(FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1905);
            p_StringLiteral48=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral48.getTree());
            SEMICOLON49=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1907); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON49_tree = (XQDTCommonTree)adaptor.create(SEMICOLON49);
            adaptor.addChild(root_0, SEMICOLON49_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DecimalFormatDecl"

    public static class p_DFPropertyName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DFPropertyName"
    // XQueryParser.g:249:1: p_DFPropertyName : (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR );
    public final XQueryParser.p_DFPropertyName_return p_DFPropertyName() throws RecognitionException {
        XQueryParser.p_DFPropertyName_return retval = new XQueryParser.p_DFPropertyName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:250:9: (k= DECIMAL_SEPARATOR | k= GROUPING_SEPARATOR | k= INFINITY | k= MINUS_SIGN | k= NAN | k= PERCENT | k= PER_MILLE | k= ZERO_DIGIT | k= DIGIT | k= PATTERN_SEPARATOR )
            int alt15=10;
            switch ( input.LA(1) ) {
            case DECIMAL_SEPARATOR:
                {
                alt15=1;
                }
                break;
            case GROUPING_SEPARATOR:
                {
                alt15=2;
                }
                break;
            case INFINITY:
                {
                alt15=3;
                }
                break;
            case MINUS_SIGN:
                {
                alt15=4;
                }
                break;
            case NAN:
                {
                alt15=5;
                }
                break;
            case PERCENT:
                {
                alt15=6;
                }
                break;
            case PER_MILLE:
                {
                alt15=7;
                }
                break;
            case ZERO_DIGIT:
                {
                alt15=8;
                }
                break;
            case DIGIT:
                {
                alt15=9;
                }
                break;
            case PATTERN_SEPARATOR:
                {
                alt15=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }

            switch (alt15) {
                case 1 :
                    // XQueryParser.g:250:11: k= DECIMAL_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DECIMAL_SEPARATOR,FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:250:33: k= GROUPING_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,GROUPING_SEPARATOR,FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:250:56: k= INFINITY
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,INFINITY,FOLLOW_INFINITY_in_p_DFPropertyName1949); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:250:69: k= MINUS_SIGN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,MINUS_SIGN,FOLLOW_MINUS_SIGN_in_p_DFPropertyName1955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:250:84: k= NAN
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,NAN,FOLLOW_NAN_in_p_DFPropertyName1961); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:250:92: k= PERCENT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PERCENT,FOLLOW_PERCENT_in_p_DFPropertyName1967); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:250:104: k= PER_MILLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PER_MILLE,FOLLOW_PER_MILLE_in_p_DFPropertyName1973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 8 :
                    // XQueryParser.g:250:118: k= ZERO_DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,ZERO_DIGIT,FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 9 :
                    // XQueryParser.g:250:133: k= DIGIT
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,DIGIT,FOLLOW_DIGIT_in_p_DFPropertyName1985); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 10 :
                    // XQueryParser.g:250:143: k= PATTERN_SEPARATOR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    k=(CommonToken)match(input,PATTERN_SEPARATOR,FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName1991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DFPropertyName"

    public static class p_PreserveMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PreserveMode"
    // XQueryParser.g:254:1: p_PreserveMode : (k+= PRESERVE | k+= NO_PRESERVE ) ;
    public final XQueryParser.p_PreserveMode_return p_PreserveMode() throws RecognitionException {
        XQueryParser.p_PreserveMode_return retval = new XQueryParser.p_PreserveMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:255:9: ( (k+= PRESERVE | k+= NO_PRESERVE ) )
            // XQueryParser.g:255:13: (k+= PRESERVE | k+= NO_PRESERVE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:255:13: (k+= PRESERVE | k+= NO_PRESERVE )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==PRESERVE) ) {
                alt16=1;
            }
            else if ( (LA16_0==NO_PRESERVE) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // XQueryParser.g:255:14: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_p_PreserveMode2024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:255:28: k+= NO_PRESERVE
                    {
                    k=(CommonToken)match(input,NO_PRESERVE,FOLLOW_NO_PRESERVE_in_p_PreserveMode2030); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PreserveMode"

    public static class p_InheritMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InheritMode"
    // XQueryParser.g:259:1: p_InheritMode : (k+= INHERIT | k+= NO_INHERIT ) ;
    public final XQueryParser.p_InheritMode_return p_InheritMode() throws RecognitionException {
        XQueryParser.p_InheritMode_return retval = new XQueryParser.p_InheritMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:260:9: ( (k+= INHERIT | k+= NO_INHERIT ) )
            // XQueryParser.g:260:13: (k+= INHERIT | k+= NO_INHERIT )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:260:13: (k+= INHERIT | k+= NO_INHERIT )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==INHERIT) ) {
                alt17=1;
            }
            else if ( (LA17_0==NO_INHERIT) ) {
                alt17=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // XQueryParser.g:260:14: k+= INHERIT
                    {
                    k=(CommonToken)match(input,INHERIT,FOLLOW_INHERIT_in_p_InheritMode2064); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:260:27: k+= NO_INHERIT
                    {
                    k=(CommonToken)match(input,NO_INHERIT,FOLLOW_NO_INHERIT_in_p_InheritMode2070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InheritMode"

    public static class pm_DefaultCollationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DefaultCollationDecl"
    // XQueryParser.g:264:1: pm_DefaultCollationDecl : k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON ;
    public final XQueryParser.pm_DefaultCollationDecl_return pm_DefaultCollationDecl() throws RecognitionException {
        XQueryParser.pm_DefaultCollationDecl_return retval = new XQueryParser.pm_DefaultCollationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON51=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral50 = null;


        XQDTCommonTree SEMICOLON51_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:265:9: (k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON )
            // XQueryParser.g:265:13: k+= DECLARE k+= DEFAULT k+= COLLATION p_StringLiteral SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_DefaultCollationDecl2111); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2115); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_pm_DefaultCollationDecl2119); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2121);
            p_StringLiteral50=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral50.getTree());
            SEMICOLON51=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2123); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON51_tree = (XQDTCommonTree)adaptor.create(SEMICOLON51);
            adaptor.addChild(root_0, SEMICOLON51_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DefaultCollationDecl"

    public static class pm_BaseURIDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BaseURIDecl"
    // XQueryParser.g:269:1: pm_BaseURIDecl : k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) ;
    public final XQueryParser.pm_BaseURIDecl_return pm_BaseURIDecl() throws RecognitionException {
        XQueryParser.pm_BaseURIDecl_return retval = new XQueryParser.pm_BaseURIDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON52=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return sl = null;


        XQDTCommonTree SEMICOLON52_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_BASE_URI=new RewriteRuleTokenStream(adaptor,"token BASE_URI");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:270:9: (k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON -> ^( BaseURIDecl $sl) )
            // XQueryParser.g:270:13: k+= DECLARE k+= BASE_URI sl= p_StringLiteral SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BaseURIDecl2163); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BASE_URI,FOLLOW_BASE_URI_in_pm_BaseURIDecl2167); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BASE_URI.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2171);
            sl=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(sl.getTree());
            SEMICOLON52=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BaseURIDecl2173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON52);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: sl
            // token labels: 
            // rule labels: sl, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sl=new RewriteRuleSubtreeStream(adaptor,"rule sl",sl!=null?sl.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 271:17: -> ^( BaseURIDecl $sl)
            {
                // XQueryParser.g:271:20: ^( BaseURIDecl $sl)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BaseURIDecl, "BaseURIDecl"), root_1);

                adaptor.addChild(root_1, stream_sl.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BaseURIDecl"

    public static class pm_SchemaImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_SchemaImport"
    // XQueryParser.g:275:1: pm_SchemaImport : k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_SchemaImport_return pm_SchemaImport() throws RecognitionException {
        XQueryParser.pm_SchemaImport_return retval = new XQueryParser.pm_SchemaImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA53=null;
        CommonToken SEMICOLON54=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_SchemaPrefix_return sp = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree COMMA53_tree=null;
        XQDTCommonTree SEMICOLON54_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        RewriteRuleSubtreeStream stream_p_SchemaPrefix=new RewriteRuleSubtreeStream(adaptor,"rule p_SchemaPrefix");
        try {
            // XQueryParser.g:276:9: (k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:276:11: k+= IMPORT k+= SCHEMA (sp= p_SchemaPrefix )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_SchemaImport2228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,SCHEMA,FOLLOW_SCHEMA_in_pm_SchemaImport2232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:276:33: (sp= p_SchemaPrefix )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==DEFAULT||LA18_0==NAMESPACE) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // XQueryParser.g:276:33: sp= p_SchemaPrefix
                    {
                    pushFollow(FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2236);
                    sp=p_SchemaPrefix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_SchemaPrefix.add(sp.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2241);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:276:69: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==AT) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // XQueryParser.g:276:70: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_SchemaImport2246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2250);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:276:96: ( COMMA ah+= p_StringLiteral )*
                    loop19:
                    do {
                        int alt19=2;
                        int LA19_0 = input.LA(1);

                        if ( (LA19_0==COMMA) ) {
                            alt19=1;
                        }


                        switch (alt19) {
                    	case 1 :
                    	    // XQueryParser.g:276:97: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA53=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_SchemaImport2253); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA53);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_SchemaImport2257);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop19;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON54=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_SchemaImport2263); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON54);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: ah, sp, us
            // token labels: 
            // rule labels: sp, us, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_sp=new RewriteRuleSubtreeStream(adaptor,"rule sp",sp!=null?sp.tree:null);
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 277:17: -> ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:277:20: ^( SchemaImport ^( SchemaPrefix ( $sp)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaImport, "SchemaImport"), root_1);

                // XQueryParser.g:277:35: ^( SchemaPrefix ( $sp)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SchemaPrefix, "SchemaPrefix"), root_2);

                // XQueryParser.g:277:50: ( $sp)?
                if ( stream_sp.hasNext() ) {
                    adaptor.addChild(root_2, stream_sp.nextTree());

                }
                stream_sp.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:277:60: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:277:70: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_SchemaImport"

    public static class p_SchemaPrefix_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaPrefix"
    // XQueryParser.g:281:1: p_SchemaPrefix : (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace );
    public final XQueryParser.p_SchemaPrefix_return p_SchemaPrefix() throws RecognitionException {
        XQueryParser.p_SchemaPrefix_return retval = new XQueryParser.p_SchemaPrefix_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL55=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_NCName_return nn = null;


        XQDTCommonTree EQUAL55_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_DEFAULT=new RewriteRuleTokenStream(adaptor,"token DEFAULT");
        RewriteRuleTokenStream stream_ELEMENT=new RewriteRuleTokenStream(adaptor,"token ELEMENT");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        try {
            // XQueryParser.g:282:9: (k+= NAMESPACE nn= p_NCName EQUAL -> ^( NamespaceName $nn) | k+= DEFAULT k+= ELEMENT k+= NAMESPACE -> DefaultElementNamespace )
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==NAMESPACE) ) {
                alt21=1;
            }
            else if ( (LA21_0==DEFAULT) ) {
                alt21=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 21, 0, input);

                throw nvae;
            }
            switch (alt21) {
                case 1 :
                    // XQueryParser.g:282:11: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_p_SchemaPrefix2339);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL55=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_SchemaPrefix2341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL55);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: nn
                    // token labels: 
                    // rule labels: nn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 283:17: -> ^( NamespaceName $nn)
                    {
                        // XQueryParser.g:283:20: ^( NamespaceName $nn)
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_1);

                        adaptor.addChild(root_1, stream_nn.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:284:11: k+= DEFAULT k+= ELEMENT k+= NAMESPACE
                    {
                    k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_SchemaPrefix2382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DEFAULT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_SchemaPrefix2386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ELEMENT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_SchemaPrefix2390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 285:17: -> DefaultElementNamespace
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(DefaultElementNamespace, "DefaultElementNamespace"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaPrefix"

    public static class pm_ModuleImport_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ModuleImport"
    // XQueryParser.g:289:1: pm_ModuleImport : k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) ;
    public final XQueryParser.pm_ModuleImport_return pm_ModuleImport() throws RecognitionException {
        XQueryParser.pm_ModuleImport_return retval = new XQueryParser.pm_ModuleImport_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken EQUAL56=null;
        CommonToken COMMA57=null;
        CommonToken SEMICOLON58=null;
        CommonToken k=null;
        List list_k=null;
        List list_ah=null;
        XQueryParser.p_NCName_return nn = null;

        XQueryParser.p_StringLiteral_return us = null;

        XQueryParser.p_StringLiteral_return ah = null;
         ah = null;
        XQDTCommonTree EQUAL56_tree=null;
        XQDTCommonTree COMMA57_tree=null;
        XQDTCommonTree SEMICOLON58_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_NAMESPACE=new RewriteRuleTokenStream(adaptor,"token NAMESPACE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_IMPORT=new RewriteRuleTokenStream(adaptor,"token IMPORT");
        RewriteRuleTokenStream stream_MODULE=new RewriteRuleTokenStream(adaptor,"token MODULE");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        RewriteRuleSubtreeStream stream_p_StringLiteral=new RewriteRuleSubtreeStream(adaptor,"rule p_StringLiteral");
        try {
            // XQueryParser.g:290:9: (k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) ) )
            // XQueryParser.g:290:11: k+= IMPORT k+= MODULE (k+= NAMESPACE nn= p_NCName EQUAL )? us= p_StringLiteral (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )? SEMICOLON
            {
            k=(CommonToken)match(input,IMPORT,FOLLOW_IMPORT_in_pm_ModuleImport2440); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IMPORT.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,MODULE,FOLLOW_MODULE_in_pm_ModuleImport2444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MODULE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:290:31: (k+= NAMESPACE nn= p_NCName EQUAL )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==NAMESPACE) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // XQueryParser.g:290:32: k+= NAMESPACE nn= p_NCName EQUAL
                    {
                    k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_pm_ModuleImport2449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAMESPACE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NCName_in_pm_ModuleImport2453);
                    nn=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_NCName.add(nn.getTree());
                    EQUAL56=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_pm_ModuleImport2455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUAL.add(EQUAL56);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2461);
            us=p_StringLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_StringLiteral.add(us.getTree());
            // XQueryParser.g:290:84: (k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )* )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==AT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // XQueryParser.g:290:85: k+= AT ah+= p_StringLiteral ( COMMA ah+= p_StringLiteral )*
                    {
                    k=(CommonToken)match(input,AT,FOLLOW_AT_in_pm_ModuleImport2466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2470);
                    ah=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    if (list_ah==null) list_ah=new ArrayList();
                    list_ah.add(ah.getTree());

                    // XQueryParser.g:290:111: ( COMMA ah+= p_StringLiteral )*
                    loop23:
                    do {
                        int alt23=2;
                        int LA23_0 = input.LA(1);

                        if ( (LA23_0==COMMA) ) {
                            alt23=1;
                        }


                        switch (alt23) {
                    	case 1 :
                    	    // XQueryParser.g:290:112: COMMA ah+= p_StringLiteral
                    	    {
                    	    COMMA57=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_ModuleImport2473); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA57);

                    	    pushFollow(FOLLOW_p_StringLiteral_in_pm_ModuleImport2477);
                    	    ah=p_StringLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_p_StringLiteral.add(ah.getTree());
                    	    if (list_ah==null) list_ah=new ArrayList();
                    	    list_ah.add(ah.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop23;
                        }
                    } while (true);


                    }
                    break;

            }

            SEMICOLON58=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ModuleImport2483); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON58);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: us, ah, nn
            // token labels: 
            // rule labels: us, nn, retval
            // token list labels: 
            // rule list labels: ah
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_us=new RewriteRuleSubtreeStream(adaptor,"rule us",us!=null?us.tree:null);
            RewriteRuleSubtreeStream stream_nn=new RewriteRuleSubtreeStream(adaptor,"rule nn",nn!=null?nn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ah=new RewriteRuleSubtreeStream(adaptor,"token ah",list_ah);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 291:17: -> ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
            {
                // XQueryParser.g:291:20: ^( ModuleImport ^( NamespaceName ( $nn)? ) $us ^( AtHints ( $ah)* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ModuleImport, "ModuleImport"), root_1);

                // XQueryParser.g:291:35: ^( NamespaceName ( $nn)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(NamespaceName, "NamespaceName"), root_2);

                // XQueryParser.g:291:51: ( $nn)?
                if ( stream_nn.hasNext() ) {
                    adaptor.addChild(root_2, stream_nn.nextTree());

                }
                stream_nn.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_us.nextTree());
                // XQueryParser.g:291:61: ^( AtHints ( $ah)* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtHints, "AtHints"), root_2);

                // XQueryParser.g:291:71: ( $ah)*
                while ( stream_ah.hasNext() ) {
                    adaptor.addChild(root_2, stream_ah.nextTree());

                }
                stream_ah.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ModuleImport"

    public static class pm_VarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_VarDecl"
    // XQueryParser.g:295:1: pm_VarDecl : k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) ;
    public final XQueryParser.pm_VarDecl_return pm_VarDecl() throws RecognitionException {
        XQueryParser.pm_VarDecl_return retval = new XQueryParser.pm_VarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR60=null;
        CommonToken BIND61=null;
        CommonToken BIND62=null;
        CommonToken SEMICOLON63=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pg_VarDeclType_return vdt = null;

        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_ExprSingle_return des = null;

        XQueryParser.pg_PrivateVarOption_return pg_PrivateVarOption59 = null;


        XQDTCommonTree DOLLAR60_tree=null;
        XQDTCommonTree BIND61_tree=null;
        XQDTCommonTree BIND62_tree=null;
        XQDTCommonTree SEMICOLON63_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_pg_VarDeclType=new RewriteRuleSubtreeStream(adaptor,"rule pg_VarDeclType");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_pg_PrivateVarOption=new RewriteRuleSubtreeStream(adaptor,"rule pg_PrivateVarOption");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:296:9: (k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) ) )
            // XQueryParser.g:296:11: k+= DECLARE pg_PrivateVarOption vdt= pg_VarDeclType DOLLAR qn= p_QName (td= p_TypeDeclaration )? ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) ) SEMICOLON
            {
            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_VarDecl2554); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(k);

            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_pg_PrivateVarOption_in_pm_VarDecl2556);
            pg_PrivateVarOption59=pg_PrivateVarOption();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_PrivateVarOption.add(pg_PrivateVarOption59.getTree());
            pushFollow(FOLLOW_pg_VarDeclType_in_pm_VarDecl2560);
            vdt=pg_VarDeclType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pg_VarDeclType.add(vdt.getTree());
            DOLLAR60=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_VarDecl2562); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR60);

            pushFollow(FOLLOW_p_QName_in_pm_VarDecl2566);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:296:81: (td= p_TypeDeclaration )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==AS) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // XQueryParser.g:296:81: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_VarDecl2570);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:296:101: ( ( BIND es= p_ExprSingle ) | (k+= EXTERNAL ( BIND des= p_ExprSingle )? ) )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==BIND) ) {
                alt27=1;
            }
            else if ( (LA27_0==EXTERNAL) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // XQueryParser.g:296:102: ( BIND es= p_ExprSingle )
                    {
                    // XQueryParser.g:296:102: ( BIND es= p_ExprSingle )
                    // XQueryParser.g:296:103: BIND es= p_ExprSingle
                    {
                    BIND61=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND61);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2579);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:296:127: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    {
                    // XQueryParser.g:296:127: (k+= EXTERNAL ( BIND des= p_ExprSingle )? )
                    // XQueryParser.g:296:128: k+= EXTERNAL ( BIND des= p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_VarDecl2587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:296:140: ( BIND des= p_ExprSingle )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==BIND) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // XQueryParser.g:296:141: BIND des= p_ExprSingle
                            {
                            BIND62=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_VarDecl2590); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BIND.add(BIND62);

                            pushFollow(FOLLOW_p_ExprSingle_in_pm_VarDecl2594);
                            des=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ExprSingle.add(des.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON63=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_VarDecl2600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON63);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }


            // AST REWRITE
            // elements: vdt, des, td, qn, es
            // token labels: 
            // rule labels: td, qn, es, retval, vdt, des
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_vdt=new RewriteRuleSubtreeStream(adaptor,"rule vdt",vdt!=null?vdt.tree:null);
            RewriteRuleSubtreeStream stream_des=new RewriteRuleSubtreeStream(adaptor,"rule des",des!=null?des.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 297:17: -> ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
            {
                // XQueryParser.g:297:20: ^( VarDecl $vdt $qn ^( VarType ( $td)? ) ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDecl, "VarDecl"), root_1);

                adaptor.addChild(root_1, stream_vdt.nextTree());
                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:297:39: ^( VarType ( $td)? )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarType, "VarType"), root_2);

                // XQueryParser.g:297:49: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_2, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:297:55: ^( VarValue ( $es)? ^( VarDefaultValue ( $des)? ) )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarValue, "VarValue"), root_2);

                // XQueryParser.g:297:66: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_2, stream_es.nextTree());

                }
                stream_es.reset();
                // XQueryParser.g:297:71: ^( VarDefaultValue ( $des)? )
                {
                XQDTCommonTree root_3 = (XQDTCommonTree)adaptor.nil();
                root_3 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(VarDefaultValue, "VarDefaultValue"), root_3);

                // XQueryParser.g:297:89: ( $des)?
                if ( stream_des.hasNext() ) {
                    adaptor.addChild(root_3, stream_des.nextTree());

                }
                stream_des.reset();

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_VarDecl"

    public static class pg_VarDeclType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_VarDeclType"
    // XQueryParser.g:304:1: pg_VarDeclType : ({...}? =>kc= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl );
    public final XQueryParser.pg_VarDeclType_return pg_VarDeclType() throws RecognitionException {
        XQueryParser.pg_VarDeclType_return retval = new XQueryParser.pg_VarDeclType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken kv=null;

        XQDTCommonTree kc_tree=null;
        XQDTCommonTree kv_tree=null;
        RewriteRuleTokenStream stream_CONSTANT=new RewriteRuleTokenStream(adaptor,"token CONSTANT");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");

        try {
            // XQueryParser.g:305:9: ({...}? =>kc= CONSTANT -> VarConstantDecl | kv= VARIABLE -> VarVariableDecl )
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==CONSTANT) && ((lc(XQS)))) {
                alt28=1;
            }
            else if ( (LA28_0==VARIABLE) ) {
                alt28=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 28, 0, input);

                throw nvae;
            }
            switch (alt28) {
                case 1 :
                    // XQueryParser.g:305:11: {...}? =>kc= CONSTANT
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_VarDeclType", "lc(XQS)");
                    }
                    kc=(CommonToken)match(input,CONSTANT,FOLLOW_CONSTANT_in_pg_VarDeclType2688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CONSTANT.add(kc);

                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 306:17: -> VarConstantDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarConstantDecl, "VarConstantDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:307:11: kv= VARIABLE
                    {
                    kv=(CommonToken)match(input,VARIABLE,FOLLOW_VARIABLE_in_pg_VarDeclType2724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VARIABLE.add(kv);

                    if ( state.backtracking==0 ) {
                      ak(kv);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 308:17: -> VarVariableDecl
                    {
                        adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(VarVariableDecl, "VarVariableDecl"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_VarDeclType"

    public static class pg_PrivateVarOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_PrivateVarOption"
    // XQueryParser.g:315:1: pg_PrivateVarOption : ({...}? =>kp= PRIVATE | );
    public final XQueryParser.pg_PrivateVarOption_return pg_PrivateVarOption() throws RecognitionException {
        XQueryParser.pg_PrivateVarOption_return retval = new XQueryParser.pg_PrivateVarOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kp=null;

        XQDTCommonTree kp_tree=null;

        try {
            // XQueryParser.g:316:9: ({...}? =>kp= PRIVATE | )
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==PRIVATE) && ((lc(MLS)))) {
                alt29=1;
            }
            else if ( (LA29_0==CONSTANT) && ((lc(XQS)))) {
                alt29=2;
            }
            else if ( (LA29_0==VARIABLE) ) {
                alt29=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 29, 0, input);

                throw nvae;
            }
            switch (alt29) {
                case 1 :
                    // XQueryParser.g:316:11: {...}? =>kp= PRIVATE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pg_PrivateVarOption", "lc(MLS)");
                    }
                    kp=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_pg_PrivateVarOption2780); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kp_tree = (XQDTCommonTree)adaptor.create(kp);
                    adaptor.addChild(root_0, kp_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kp);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:318:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_PrivateVarOption"

    public static class pm_ContextItemDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ContextItemDecl"
    // XQueryParser.g:328:1: pm_ContextItemDecl : k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON ;
    public final XQueryParser.pm_ContextItemDecl_return pm_ContextItemDecl() throws RecognitionException {
        XQueryParser.pm_ContextItemDecl_return retval = new XQueryParser.pm_ContextItemDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BIND65=null;
        CommonToken BIND67=null;
        CommonToken SEMICOLON69=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ItemType_return p_ItemType64 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle66 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle68 = null;


        XQDTCommonTree BIND65_tree=null;
        XQDTCommonTree BIND67_tree=null;
        XQDTCommonTree SEMICOLON69_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:329:9: (k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON )
            // XQueryParser.g:329:13: k+= DECLARE k+= CONTEXT k+= ITEM (k+= AS p_ItemType )? ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ContextItemDecl2831); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONTEXT,FOLLOW_CONTEXT_in_pm_ContextItemDecl2835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_pm_ContextItemDecl2839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:329:43: (k+= AS p_ItemType )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==AS) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // XQueryParser.g:329:44: k+= AS p_ItemType
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_pm_ContextItemDecl2844); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_ItemType_in_pm_ContextItemDecl2846);
                    p_ItemType64=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ItemType64.getTree());

                    }
                    break;

            }

            // XQueryParser.g:329:63: ( ( BIND p_ExprSingle ) | (k+= EXTERNAL ( BIND p_ExprSingle )? ) )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==BIND) ) {
                alt32=1;
            }
            else if ( (LA32_0==EXTERNAL) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // XQueryParser.g:329:64: ( BIND p_ExprSingle )
                    {
                    // XQueryParser.g:329:64: ( BIND p_ExprSingle )
                    // XQueryParser.g:329:65: BIND p_ExprSingle
                    {
                    BIND65=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    BIND65_tree = (XQDTCommonTree)adaptor.create(BIND65);
                    adaptor.addChild(root_0, BIND65_tree);
                    }
                    pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2854);
                    p_ExprSingle66=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle66.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:329:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    {
                    // XQueryParser.g:329:86: (k+= EXTERNAL ( BIND p_ExprSingle )? )
                    // XQueryParser.g:329:87: k+= EXTERNAL ( BIND p_ExprSingle )?
                    {
                    k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_ContextItemDecl2862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:329:99: ( BIND p_ExprSingle )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==BIND) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // XQueryParser.g:329:100: BIND p_ExprSingle
                            {
                            BIND67=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_ContextItemDecl2865); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            BIND67_tree = (XQDTCommonTree)adaptor.create(BIND67);
                            adaptor.addChild(root_0, BIND67_tree);
                            }
                            pushFollow(FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2867);
                            p_ExprSingle68=p_ExprSingle();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle68.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;

            }

            SEMICOLON69=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ContextItemDecl2873); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON69_tree = (XQDTCommonTree)adaptor.create(SEMICOLON69);
            adaptor.addChild(root_0, SEMICOLON69_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ContextItemDecl"

    public static class pm_ConstructionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ConstructionDecl"
    // XQueryParser.g:336:1: pm_ConstructionDecl : k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON ;
    public final XQueryParser.pm_ConstructionDecl_return pm_ConstructionDecl() throws RecognitionException {
        XQueryParser.pm_ConstructionDecl_return retval = new XQueryParser.pm_ConstructionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON70=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree SEMICOLON70_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:337:9: (k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON )
            // XQueryParser.g:337:13: k+= DECLARE k+= CONSTRUCTION (k+= STRIP | k+= PRESERVE ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_ConstructionDecl2908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRUCTION,FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2912); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:337:40: (k+= STRIP | k+= PRESERVE )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==STRIP) ) {
                alt33=1;
            }
            else if ( (LA33_0==PRESERVE) ) {
                alt33=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // XQueryParser.g:337:41: k+= STRIP
                    {
                    k=(CommonToken)match(input,STRIP,FOLLOW_STRIP_in_pm_ConstructionDecl2917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:337:52: k+= PRESERVE
                    {
                    k=(CommonToken)match(input,PRESERVE,FOLLOW_PRESERVE_in_pm_ConstructionDecl2923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON70=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ConstructionDecl2926); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON70_tree = (XQDTCommonTree)adaptor.create(SEMICOLON70);
            adaptor.addChild(root_0, SEMICOLON70_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ConstructionDecl"

    public static class pm_FunctionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_FunctionDecl"
    // XQueryParser.g:343:1: pm_FunctionDecl : ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) );
    public final XQueryParser.pm_FunctionDecl_return pm_FunctionDecl() throws RecognitionException {
        XQueryParser.pm_FunctionDecl_return retval = new XQueryParser.pm_FunctionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN71=null;
        CommonToken RPAREN72=null;
        CommonToken SEMICOLON73=null;
        CommonToken LPAREN76=null;
        CommonToken RPAREN77=null;
        CommonToken SEMICOLON78=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_ParamList_return pl = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_Block_return b = null;

        XQueryParser.p_EnclosedExpr_return ee = null;

        XQueryParser.p_FunctionOption_return p_FunctionOption74 = null;

        XQueryParser.p_FunctionType_return p_FunctionType75 = null;


        XQDTCommonTree LPAREN71_tree=null;
        XQDTCommonTree RPAREN72_tree=null;
        XQDTCommonTree SEMICOLON73_tree=null;
        XQDTCommonTree LPAREN76_tree=null;
        XQDTCommonTree RPAREN77_tree=null;
        XQDTCommonTree SEMICOLON78_tree=null;
        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_SEQUENTIAL=new RewriteRuleTokenStream(adaptor,"token SEQUENTIAL");
        RewriteRuleTokenStream stream_FUNCTION=new RewriteRuleTokenStream(adaptor,"token FUNCTION");
        RewriteRuleTokenStream stream_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token EXTERNAL");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ParamList=new RewriteRuleSubtreeStream(adaptor,"rule p_ParamList");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_Block=new RewriteRuleSubtreeStream(adaptor,"rule p_Block");
        RewriteRuleSubtreeStream stream_p_FunctionOption=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionOption");
        RewriteRuleSubtreeStream stream_p_FunctionType=new RewriteRuleSubtreeStream(adaptor,"rule p_FunctionType");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_p_EnclosedExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_EnclosedExpr");
        try {
            // XQueryParser.g:344:9: ({...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? ) | k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? ) )
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==DECLARE) ) {
                int LA40_1 = input.LA(2);

                if ( (LA40_1==SEQUENTIAL) && ((lc(XQS)))) {
                    alt40=1;
                }
                else if ( (LA40_1==FUNCTION||LA40_1==DETERMINISTIC||LA40_1==NONDETERMINISTIC||(LA40_1>=PRIVATE && LA40_1<=PUBLIC)||LA40_1==UPDATING||LA40_1==SIMPLE) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    // XQueryParser.g:344:13: {...}? =>k+= DECLARE k+= SEQUENTIAL k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (b= p_Block | k+= EXTERNAL ) SEMICOLON
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_FunctionDecl", "lc(XQS)");
                    }
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl2963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,SEQUENTIAL,FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2967); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEQUENTIAL.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl2971); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl2975);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN71=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl2977); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN71);

                    // XQueryParser.g:344:83: (pl= p_ParamList )?
                    int alt34=2;
                    int LA34_0 = input.LA(1);

                    if ( (LA34_0==DOLLAR) ) {
                        alt34=1;
                    }
                    switch (alt34) {
                        case 1 :
                            // XQueryParser.g:344:83: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl2981);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN72=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl2984); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN72);

                    // XQueryParser.g:344:106: (td= p_TypeDeclaration )?
                    int alt35=2;
                    int LA35_0 = input.LA(1);

                    if ( (LA35_0==AS) ) {
                        alt35=1;
                    }
                    switch (alt35) {
                        case 1 :
                            // XQueryParser.g:344:106: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2988);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:344:126: (b= p_Block | k+= EXTERNAL )
                    int alt36=2;
                    int LA36_0 = input.LA(1);

                    if ( (LA36_0==LBRACKET) ) {
                        alt36=1;
                    }
                    else if ( (LA36_0==EXTERNAL) ) {
                        alt36=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 36, 0, input);

                        throw nvae;
                    }
                    switch (alt36) {
                        case 1 :
                            // XQueryParser.g:344:127: b= p_Block
                            {
                            pushFollow(FOLLOW_p_Block_in_pm_FunctionDecl2994);
                            b=p_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_Block.add(b.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:344:139: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3000); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON73=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON73);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: qn, pl, b, td
                    // token labels: 
                    // rule labels: td, pl, qn, retval, b
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 345:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                    {
                        // XQueryParser.g:345:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $b)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:345:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:345:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:345:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:345:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:345:76: ( $b)?
                        if ( stream_b.hasNext() ) {
                            adaptor.addChild(root_1, stream_b.nextTree());

                        }
                        stream_b.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:346:13: k+= DECLARE p_FunctionOption p_FunctionType k+= FUNCTION qn= p_QName LPAREN (pl= p_ParamList )? RPAREN (td= p_TypeDeclaration )? (ee= p_EnclosedExpr | k+= EXTERNAL ) SEMICOLON
                    {
                    k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_FunctionDecl3066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DECLARE.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_FunctionOption_in_pm_FunctionDecl3068);
                    p_FunctionOption74=p_FunctionOption();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionOption.add(p_FunctionOption74.getTree());
                    pushFollow(FOLLOW_p_FunctionType_in_pm_FunctionDecl3070);
                    p_FunctionType75=p_FunctionType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_FunctionType.add(p_FunctionType75.getTree());
                    k=(CommonToken)match(input,FUNCTION,FOLLOW_FUNCTION_in_pm_FunctionDecl3074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FUNCTION.add(k);

                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_QName_in_pm_FunctionDecl3078);
                    qn=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
                    LPAREN76=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_pm_FunctionDecl3080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN76);

                    // XQueryParser.g:346:88: (pl= p_ParamList )?
                    int alt37=2;
                    int LA37_0 = input.LA(1);

                    if ( (LA37_0==DOLLAR) ) {
                        alt37=1;
                    }
                    switch (alt37) {
                        case 1 :
                            // XQueryParser.g:346:88: pl= p_ParamList
                            {
                            pushFollow(FOLLOW_p_ParamList_in_pm_FunctionDecl3084);
                            pl=p_ParamList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_ParamList.add(pl.getTree());

                            }
                            break;

                    }

                    RPAREN77=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_pm_FunctionDecl3087); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN77);

                    // XQueryParser.g:346:111: (td= p_TypeDeclaration )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==AS) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // XQueryParser.g:346:111: td= p_TypeDeclaration
                            {
                            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3091);
                            td=p_TypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                            }
                            break;

                    }

                    // XQueryParser.g:346:131: (ee= p_EnclosedExpr | k+= EXTERNAL )
                    int alt39=2;
                    int LA39_0 = input.LA(1);

                    if ( (LA39_0==LBRACKET) ) {
                        alt39=1;
                    }
                    else if ( (LA39_0==EXTERNAL) ) {
                        alt39=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 39, 0, input);

                        throw nvae;
                    }
                    switch (alt39) {
                        case 1 :
                            // XQueryParser.g:346:132: ee= p_EnclosedExpr
                            {
                            pushFollow(FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3097);
                            ee=p_EnclosedExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_EnclosedExpr.add(ee.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:346:152: k+= EXTERNAL
                            {
                            k=(CommonToken)match(input,EXTERNAL,FOLLOW_EXTERNAL_in_pm_FunctionDecl3103); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EXTERNAL.add(k);

                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }

                    SEMICOLON78=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_FunctionDecl3106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON78);

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }


                    // AST REWRITE
                    // elements: pl, td, ee, qn
                    // token labels: 
                    // rule labels: td, pl, ee, qn, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
                    RewriteRuleSubtreeStream stream_pl=new RewriteRuleSubtreeStream(adaptor,"rule pl",pl!=null?pl.tree:null);
                    RewriteRuleSubtreeStream stream_ee=new RewriteRuleSubtreeStream(adaptor,"rule ee",ee!=null?ee.tree:null);
                    RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 347:17: -> ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                    {
                        // XQueryParser.g:347:20: ^( FunctionDecl $qn ^( ParamList ( $pl)? ) ^( ReturnType ( $td)? ) ( $ee)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(FunctionDecl, "FunctionDecl"), root_1);

                        adaptor.addChild(root_1, stream_qn.nextTree());
                        // XQueryParser.g:347:39: ^( ParamList ( $pl)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ParamList, "ParamList"), root_2);

                        // XQueryParser.g:347:51: ( $pl)?
                        if ( stream_pl.hasNext() ) {
                            adaptor.addChild(root_2, stream_pl.nextTree());

                        }
                        stream_pl.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:347:57: ^( ReturnType ( $td)? )
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ReturnType, "ReturnType"), root_2);

                        // XQueryParser.g:347:70: ( $td)?
                        if ( stream_td.hasNext() ) {
                            adaptor.addChild(root_2, stream_td.nextTree());

                        }
                        stream_td.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        // XQueryParser.g:347:76: ( $ee)?
                        if ( stream_ee.hasNext() ) {
                            adaptor.addChild(root_1, stream_ee.nextTree());

                        }
                        stream_ee.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_FunctionDecl"

    public static class p_FunctionType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionType"
    // XQueryParser.g:354:1: p_FunctionType : ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | );
    public final XQueryParser.p_FunctionType_return p_FunctionType() throws RecognitionException {
        XQueryParser.p_FunctionType_return retval = new XQueryParser.p_FunctionType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken ks=null;

        XQDTCommonTree ku_tree=null;
        XQDTCommonTree ks_tree=null;

        try {
            // XQueryParser.g:355:9: ({...}? =>ku= UPDATING | {...}? =>ks= SIMPLE | )
            int alt41=3;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==UPDATING) && ((lc(XQU)))) {
                alt41=1;
            }
            else if ( (LA41_0==SIMPLE) && ((lc(XQS)))) {
                alt41=2;
            }
            else if ( (LA41_0==FUNCTION) ) {
                alt41=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 41, 0, input);

                throw nvae;
            }
            switch (alt41) {
                case 1 :
                    // XQueryParser.g:355:11: {...}? =>ku= UPDATING
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQU)");
                    }
                    ku=(CommonToken)match(input,UPDATING,FOLLOW_UPDATING_in_p_FunctionType3187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ku_tree = (XQDTCommonTree)adaptor.create(ku);
                    adaptor.addChild(root_0, ku_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ku);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:356:11: {...}? =>ks= SIMPLE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_FunctionType", "lc(XQS)");
                    }
                    ks=(CommonToken)match(input,SIMPLE,FOLLOW_SIMPLE_in_p_FunctionType3206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ks_tree = (XQDTCommonTree)adaptor.create(ks);
                    adaptor.addChild(root_0, ks_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ks);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:358:9: 
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionType"

    public static class p_FunctionOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionOption"
    // XQueryParser.g:361:1: p_FunctionOption : ( p_PrivateOption | p_DeterministicOption )* ;
    public final XQueryParser.p_FunctionOption_return p_FunctionOption() throws RecognitionException {
        XQueryParser.p_FunctionOption_return retval = new XQueryParser.p_FunctionOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrivateOption_return p_PrivateOption79 = null;

        XQueryParser.p_DeterministicOption_return p_DeterministicOption80 = null;



        try {
            // XQueryParser.g:362:9: ( ( p_PrivateOption | p_DeterministicOption )* )
            // XQueryParser.g:362:11: ( p_PrivateOption | p_DeterministicOption )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:362:11: ( p_PrivateOption | p_DeterministicOption )*
            loop42:
            do {
                int alt42=3;
                int LA42_0 = input.LA(1);

                if ( ((LA42_0>=PRIVATE && LA42_0<=PUBLIC)) ) {
                    alt42=1;
                }
                else if ( (LA42_0==DETERMINISTIC||LA42_0==NONDETERMINISTIC) ) {
                    alt42=2;
                }


                switch (alt42) {
            	case 1 :
            	    // XQueryParser.g:362:12: p_PrivateOption
            	    {
            	    pushFollow(FOLLOW_p_PrivateOption_in_p_FunctionOption3247);
            	    p_PrivateOption79=p_PrivateOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrivateOption79.getTree());

            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:362:30: p_DeterministicOption
            	    {
            	    pushFollow(FOLLOW_p_DeterministicOption_in_p_FunctionOption3251);
            	    p_DeterministicOption80=p_DeterministicOption();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeterministicOption80.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionOption"

    public static class p_PrivateOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrivateOption"
    // XQueryParser.g:365:1: p_PrivateOption : (k= PRIVATE | k= PUBLIC ) ;
    public final XQueryParser.p_PrivateOption_return p_PrivateOption() throws RecognitionException {
        XQueryParser.p_PrivateOption_return retval = new XQueryParser.p_PrivateOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:366:9: ( (k= PRIVATE | k= PUBLIC ) )
            // XQueryParser.g:366:11: (k= PRIVATE | k= PUBLIC )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:366:11: (k= PRIVATE | k= PUBLIC )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==PRIVATE) ) {
                alt43=1;
            }
            else if ( (LA43_0==PUBLIC) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // XQueryParser.g:366:12: k= PRIVATE
                    {
                    k=(CommonToken)match(input,PRIVATE,FOLLOW_PRIVATE_in_p_PrivateOption3281); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:366:24: k= PUBLIC
                    {
                    k=(CommonToken)match(input,PUBLIC,FOLLOW_PUBLIC_in_p_PrivateOption3287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrivateOption"

    public static class p_DeterministicOption_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeterministicOption"
    // XQueryParser.g:369:1: p_DeterministicOption : (k= DETERMINISTIC | k= NONDETERMINISTIC ) ;
    public final XQueryParser.p_DeterministicOption_return p_DeterministicOption() throws RecognitionException {
        XQueryParser.p_DeterministicOption_return retval = new XQueryParser.p_DeterministicOption_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:370:9: ( (k= DETERMINISTIC | k= NONDETERMINISTIC ) )
            // XQueryParser.g:370:11: (k= DETERMINISTIC | k= NONDETERMINISTIC )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:370:11: (k= DETERMINISTIC | k= NONDETERMINISTIC )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==DETERMINISTIC) ) {
                alt44=1;
            }
            else if ( (LA44_0==NONDETERMINISTIC) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // XQueryParser.g:370:12: k= DETERMINISTIC
                    {
                    k=(CommonToken)match(input,DETERMINISTIC,FOLLOW_DETERMINISTIC_in_p_DeterministicOption3318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:370:30: k= NONDETERMINISTIC
                    {
                    k=(CommonToken)match(input,NONDETERMINISTIC,FOLLOW_NONDETERMINISTIC_in_p_DeterministicOption3324); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeterministicOption"

    public static class p_ParamList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParamList"
    // XQueryParser.g:377:1: p_ParamList : p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ ;
    public final XQueryParser.p_ParamList_return p_ParamList() throws RecognitionException {
        XQueryParser.p_ParamList_return retval = new XQueryParser.p_ParamList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA81=null;
        List list_p=null;
        XQueryParser.p_Param_return p = null;
         p = null;
        XQDTCommonTree COMMA81_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_p_Param=new RewriteRuleSubtreeStream(adaptor,"rule p_Param");
        try {
            // XQueryParser.g:378:9: (p+= p_Param ( COMMA p+= p_Param )* -> ( $p)+ )
            // XQueryParser.g:378:11: p+= p_Param ( COMMA p+= p_Param )*
            {
            pushFollow(FOLLOW_p_Param_in_p_ParamList3358);
            p=p_Param();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            if (list_p==null) list_p=new ArrayList();
            list_p.add(p.getTree());

            // XQueryParser.g:378:22: ( COMMA p+= p_Param )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // XQueryParser.g:378:23: COMMA p+= p_Param
            	    {
            	    COMMA81=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ParamList3361); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA81);

            	    pushFollow(FOLLOW_p_Param_in_p_ParamList3365);
            	    p=p_Param();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_Param.add(p.getTree());
            	    if (list_p==null) list_p=new ArrayList();
            	    list_p.add(p.getTree());


            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);



            // AST REWRITE
            // elements: p
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: p
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_p=new RewriteRuleSubtreeStream(adaptor,"token p",list_p);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 379:17: -> ( $p)+
            {
                if ( !(stream_p.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_p.hasNext() ) {
                    adaptor.addChild(root_0, stream_p.nextTree());

                }
                stream_p.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParamList"

    public static class p_Param_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Param"
    // XQueryParser.g:383:1: p_Param : DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) ;
    public final XQueryParser.p_Param_return p_Param() throws RecognitionException {
        XQueryParser.p_Param_return retval = new XQueryParser.p_Param_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR82=null;
        XQueryParser.p_QName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;


        XQDTCommonTree DOLLAR82_tree=null;
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:384:9: ( DOLLAR qn= p_QName (td= p_TypeDeclaration )? -> ^( Param $qn ( $td)? ) )
            // XQueryParser.g:384:11: DOLLAR qn= p_QName (td= p_TypeDeclaration )?
            {
            DOLLAR82=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_Param3423); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR82);

            pushFollow(FOLLOW_p_QName_in_p_Param3427);
            qn=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(qn.getTree());
            // XQueryParser.g:384:31: (td= p_TypeDeclaration )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==AS) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // XQueryParser.g:384:31: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_Param3431);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qn, td
            // token labels: 
            // rule labels: td, qn, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 385:17: -> ^( Param $qn ( $td)? )
            {
                // XQueryParser.g:385:20: ^( Param $qn ( $td)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Param, "Param"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:385:32: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Param"

    public static class p_EnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EnclosedExpr"
    // XQueryParser.g:389:1: p_EnclosedExpr : LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) ;
    public final XQueryParser.p_EnclosedExpr_return p_EnclosedExpr() throws RecognitionException {
        XQueryParser.p_EnclosedExpr_return retval = new XQueryParser.p_EnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET83=null;
        CommonToken RBRACKET85=null;
        XQueryParser.pm_Expr_return pm_Expr84 = null;


        XQDTCommonTree LBRACKET83_tree=null;
        XQDTCommonTree RBRACKET85_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:390:9: ( LBRACKET pm_Expr RBRACKET -> ^( EnclosedExpr pm_Expr ) )
            // XQueryParser.g:390:11: LBRACKET pm_Expr RBRACKET
            {
            LBRACKET83=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EnclosedExpr3487); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET83);

            pushFollow(FOLLOW_pm_Expr_in_p_EnclosedExpr3489);
            pm_Expr84=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr84.getTree());
            RBRACKET85=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EnclosedExpr3491); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET85);



            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 391:17: -> ^( EnclosedExpr pm_Expr )
            {
                // XQueryParser.g:391:20: ^( EnclosedExpr pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EnclosedExpr, "EnclosedExpr"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EnclosedExpr"

    public static class p_QueryBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QueryBody"
    // XQueryParser.g:395:1: p_QueryBody : pm_Expr -> ^( QueryBody pm_Expr ) ;
    public final XQueryParser.p_QueryBody_return p_QueryBody() throws RecognitionException {
        XQueryParser.p_QueryBody_return retval = new XQueryParser.p_QueryBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr86 = null;


        RewriteRuleSubtreeStream stream_pm_Expr=new RewriteRuleSubtreeStream(adaptor,"rule pm_Expr");
        try {
            // XQueryParser.g:396:9: ( pm_Expr -> ^( QueryBody pm_Expr ) )
            // XQueryParser.g:396:11: pm_Expr
            {
            pushFollow(FOLLOW_pm_Expr_in_p_QueryBody3541);
            pm_Expr86=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_Expr.add(pm_Expr86.getTree());


            // AST REWRITE
            // elements: pm_Expr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 397:17: -> ^( QueryBody pm_Expr )
            {
                // XQueryParser.g:397:20: ^( QueryBody pm_Expr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QueryBody, "QueryBody"), root_1);

                adaptor.addChild(root_1, stream_pm_Expr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QueryBody"

    public static class pm_Expr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_Expr"
    // XQueryParser.g:402:1: pm_Expr : p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) ;
    public final XQueryParser.pm_Expr_return pm_Expr() throws RecognitionException {
        XQueryParser.pm_Expr_return retval = new XQueryParser.pm_Expr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON88=null;
        CommonToken SEMICOLON90=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr87 = null;

        XQueryParser.pm_ApplyExpr_return pm_ApplyExpr89 = null;

        XQueryParser.p_ConcatExpr_return p_ConcatExpr91 = null;


        XQDTCommonTree SEMICOLON88_tree=null;
        XQDTCommonTree SEMICOLON90_tree=null;

        try {
            // XQueryParser.g:403:9: ( p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | ) )
            // XQueryParser.g:403:11: p_ConcatExpr ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | ) ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3592);
            p_ConcatExpr87=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr87.getTree());
            // XQueryParser.g:404:11: ({...}? => ( SEMICOLON ( pm_ApplyExpr )* )? | )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==SEMICOLON) && ((((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(MLS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||(lc(XQS))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))||((lc(XQS))&&(lc(MLS)))))) {
                int LA49_1 = input.LA(2);

                if ( (((lc(XQS))||((lc(XQS))&&(lc(MLS))))) ) {
                    alt49=1;
                }
                else if ( ((lc(MLS))) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RBRACKET) ) {
                int LA49_2 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==EOF) ) {
                int LA49_3 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RPAREN) ) {
                int LA49_4 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA49_0==RSQUARE) ) {
                int LA49_5 = input.LA(2);

                if ( ((lc(XQS))) ) {
                    alt49=1;
                }
                else if ( (true) ) {
                    alt49=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 49, 5, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // XQueryParser.g:404:12: {...}? => ( SEMICOLON ( pm_ApplyExpr )* )?
                    {
                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(XQS)");
                    }
                    // XQueryParser.g:404:25: ( SEMICOLON ( pm_ApplyExpr )* )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==SEMICOLON) ) {
                        int LA48_1 = input.LA(2);

                        if ( (!(((lc(MLS))))) ) {
                            alt48=1;
                        }
                    }
                    switch (alt48) {
                        case 1 :
                            // XQueryParser.g:404:26: SEMICOLON ( pm_ApplyExpr )*
                            {
                            SEMICOLON88=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3609); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            SEMICOLON88_tree = (XQDTCommonTree)adaptor.create(SEMICOLON88);
                            adaptor.addChild(root_0, SEMICOLON88_tree);
                            }
                            // XQueryParser.g:404:36: ( pm_ApplyExpr )*
                            loop47:
                            do {
                                int alt47=2;
                                int LA47_0 = input.LA(1);

                                if ( ((LA47_0>=ANCESTOR && LA47_0<=DECIMAL_SEPARATOR)||(LA47_0>=DIGIT && LA47_0<=NEXT)||(LA47_0>=ONLY && LA47_0<=EXIT)||(LA47_0>=SEQUENTIAL && LA47_0<=MAINTAINED)||(LA47_0>=MUTABLE && LA47_0<=LPAREN)||LA47_0==DOLLAR||(LA47_0>=STAR && LA47_0<=SMALLER)||(LA47_0>=SLASH && LA47_0<=DOT_DOT)||LA47_0==ATTR_SIGN||(LA47_0>=APOS && LA47_0<=QUOT)||LA47_0==L_NCName||(LA47_0>=L_Pragma && LA47_0<=L_DoubleLiteral)||LA47_0==EXPLICITLY) ) {
                                    alt47=1;
                                }


                                switch (alt47) {
                            	case 1 :
                            	    // XQueryParser.g:404:36: pm_ApplyExpr
                            	    {
                            	    pushFollow(FOLLOW_pm_ApplyExpr_in_pm_Expr3611);
                            	    pm_ApplyExpr89=pm_ApplyExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_ApplyExpr89.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop47;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:404:67: 
                    {
                    }
                    break;

            }

            // XQueryParser.g:405:11: ({...}? => ( SEMICOLON p_ConcatExpr )+ | )
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==SEMICOLON) && ((lc(MLS)))) {
                alt51=1;
            }
            else if ( (LA51_0==EOF||LA51_0==RPAREN||LA51_0==RBRACKET||LA51_0==RSQUARE) ) {
                alt51=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }
            switch (alt51) {
                case 1 :
                    // XQueryParser.g:405:12: {...}? => ( SEMICOLON p_ConcatExpr )+
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "pm_Expr", "lc(MLS)");
                    }
                    // XQueryParser.g:405:25: ( SEMICOLON p_ConcatExpr )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==SEMICOLON) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // XQueryParser.g:405:26: SEMICOLON p_ConcatExpr
                    	    {
                    	    SEMICOLON90=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_Expr3636); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMICOLON90_tree = (XQDTCommonTree)adaptor.create(SEMICOLON90);
                    	    adaptor.addChild(root_0, SEMICOLON90_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ConcatExpr_in_pm_Expr3638);
                    	    p_ConcatExpr91=p_ConcatExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr91.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:405:66: 
                    {
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_Expr"

    public static class p_ExprSingle_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExprSingle"
    // XQueryParser.g:410:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );
    public final XQueryParser.p_ExprSingle_return p_ExprSingle() throws RecognitionException {
        XQueryParser.p_ExprSingle_return retval = new XQueryParser.p_ExprSingle_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FLWORExpr_return p_FLWORExpr92 = null;

        XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr93 = null;

        XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr94 = null;

        XQueryParser.p_IfExpr_return p_IfExpr95 = null;

        XQueryParser.p_TryCatchExpr_return p_TryCatchExpr96 = null;

        XQueryParser.p_EvalExpr_return p_EvalExpr97 = null;

        XQueryParser.p_InsertExpr_return p_InsertExpr98 = null;

        XQueryParser.p_DeleteExpr_return p_DeleteExpr99 = null;

        XQueryParser.p_RenameExpr_return p_RenameExpr100 = null;

        XQueryParser.p_ReplaceExpr_return p_ReplaceExpr101 = null;

        XQueryParser.p_TransformExpr_return p_TransformExpr102 = null;

        XQueryParser.p_BlockExpr_return p_BlockExpr103 = null;

        XQueryParser.p_AssignmentExpr_return p_AssignmentExpr104 = null;

        XQueryParser.p_ExitExpr_return p_ExitExpr105 = null;

        XQueryParser.p_WhileExpr_return p_WhileExpr106 = null;

        XQueryParser.p_OrExpr_return p_OrExpr107 = null;



        try {
            // XQueryParser.g:411:9: ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr )
            int alt52=16;
            alt52 = dfa52.predict(input);
            switch (alt52) {
                case 1 :
                    // XQueryParser.g:411:11: p_FLWORExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FLWORExpr_in_p_ExprSingle3672);
                    p_FLWORExpr92=p_FLWORExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FLWORExpr92.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:412:11: p_QuantifiedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3684);
                    p_QuantifiedExpr93=p_QuantifiedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QuantifiedExpr93.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:413:11: p_TypeswitchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3696);
                    p_TypeswitchExpr94=p_TypeswitchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeswitchExpr94.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:414:11: p_IfExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_IfExpr_in_p_ExprSingle3708);
                    p_IfExpr95=p_IfExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IfExpr95.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:415:11: p_TryCatchExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TryCatchExpr_in_p_ExprSingle3720);
                    p_TryCatchExpr96=p_TryCatchExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryCatchExpr96.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:416:11: {...}? => p_EvalExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(ZORBA))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(ZORBA)");
                    }
                    pushFollow(FOLLOW_p_EvalExpr_in_p_ExprSingle3735);
                    p_EvalExpr97=p_EvalExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_EvalExpr97.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:417:11: {...}? => p_InsertExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_InsertExpr_in_p_ExprSingle3750);
                    p_InsertExpr98=p_InsertExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExpr98.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:418:11: {...}? => p_DeleteExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_DeleteExpr_in_p_ExprSingle3765);
                    p_DeleteExpr99=p_DeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DeleteExpr99.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:419:11: {...}? => p_RenameExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_RenameExpr_in_p_ExprSingle3780);
                    p_RenameExpr100=p_RenameExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RenameExpr100.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:420:11: {...}? => p_ReplaceExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_ReplaceExpr_in_p_ExprSingle3795);
                    p_ReplaceExpr101=p_ReplaceExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReplaceExpr101.getTree());

                    }
                    break;
                case 11 :
                    // XQueryParser.g:421:11: {...}? => p_TransformExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQU))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQU)");
                    }
                    pushFollow(FOLLOW_p_TransformExpr_in_p_ExprSingle3810);
                    p_TransformExpr102=p_TransformExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TransformExpr102.getTree());

                    }
                    break;
                case 12 :
                    // XQueryParser.g:422:11: {...}? => p_BlockExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_BlockExpr_in_p_ExprSingle3825);
                    p_BlockExpr103=p_BlockExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_BlockExpr103.getTree());

                    }
                    break;
                case 13 :
                    // XQueryParser.g:423:11: {...}? => p_AssignmentExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_AssignmentExpr_in_p_ExprSingle3840);
                    p_AssignmentExpr104=p_AssignmentExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AssignmentExpr104.getTree());

                    }
                    break;
                case 14 :
                    // XQueryParser.g:424:11: {...}? => p_ExitExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_ExitExpr_in_p_ExprSingle3855);
                    p_ExitExpr105=p_ExitExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExitExpr105.getTree());

                    }
                    break;
                case 15 :
                    // XQueryParser.g:425:11: {...}? => p_WhileExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(XQS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ExprSingle", "lc(XQS)");
                    }
                    pushFollow(FOLLOW_p_WhileExpr_in_p_ExprSingle3870);
                    p_WhileExpr106=p_WhileExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileExpr106.getTree());

                    }
                    break;
                case 16 :
                    // XQueryParser.g:426:11: p_OrExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrExpr_in_p_ExprSingle3882);
                    p_OrExpr107=p_OrExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrExpr107.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExprSingle"

    public static class p_FLWORExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FLWORExpr"
    // XQueryParser.g:430:1: p_FLWORExpr : p_InitialClause ( p_IntermediateClause )* p_ReturnClause ;
    public final XQueryParser.p_FLWORExpr_return p_FLWORExpr() throws RecognitionException {
        XQueryParser.p_FLWORExpr_return retval = new XQueryParser.p_FLWORExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause108 = null;

        XQueryParser.p_IntermediateClause_return p_IntermediateClause109 = null;

        XQueryParser.p_ReturnClause_return p_ReturnClause110 = null;



        try {
            // XQueryParser.g:431:9: ( p_InitialClause ( p_IntermediateClause )* p_ReturnClause )
            // XQueryParser.g:431:11: p_InitialClause ( p_IntermediateClause )* p_ReturnClause
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InitialClause_in_p_FLWORExpr3908);
            p_InitialClause108=p_InitialClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause108.getTree());
            // XQueryParser.g:431:27: ( p_IntermediateClause )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==FOR||LA53_0==LET||LA53_0==ORDER||LA53_0==STABLE||LA53_0==WHERE||LA53_0==COUNT||LA53_0==GROUP) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // XQueryParser.g:431:27: p_IntermediateClause
            	    {
            	    pushFollow(FOLLOW_p_IntermediateClause_in_p_FLWORExpr3910);
            	    p_IntermediateClause109=p_IntermediateClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntermediateClause109.getTree());

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            pushFollow(FOLLOW_p_ReturnClause_in_p_FLWORExpr3913);
            p_ReturnClause110=p_ReturnClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReturnClause110.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FLWORExpr"

    public static class p_InitialClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InitialClause"
    // XQueryParser.g:435:1: p_InitialClause : ( p_ForClause | p_LetClause | p_WindowClause );
    public final XQueryParser.p_InitialClause_return p_InitialClause() throws RecognitionException {
        XQueryParser.p_InitialClause_return retval = new XQueryParser.p_InitialClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForClause_return p_ForClause111 = null;

        XQueryParser.p_LetClause_return p_LetClause112 = null;

        XQueryParser.p_WindowClause_return p_WindowClause113 = null;



        try {
            // XQueryParser.g:436:9: ( p_ForClause | p_LetClause | p_WindowClause )
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==FOR) ) {
                int LA54_1 = input.LA(2);

                if ( (LA54_1==DOLLAR) ) {
                    alt54=1;
                }
                else if ( (LA54_1==SLIDING||LA54_1==TUMBLING) ) {
                    alt54=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 54, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA54_0==LET) ) {
                alt54=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // XQueryParser.g:436:11: p_ForClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ForClause_in_p_InitialClause3939);
                    p_ForClause111=p_ForClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForClause111.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:436:25: p_LetClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_LetClause_in_p_InitialClause3943);
                    p_LetClause112=p_LetClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LetClause112.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:436:39: p_WindowClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WindowClause_in_p_InitialClause3947);
                    p_WindowClause113=p_WindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowClause113.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InitialClause"

    public static class p_IntermediateClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntermediateClause"
    // XQueryParser.g:440:1: p_IntermediateClause : ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause );
    public final XQueryParser.p_IntermediateClause_return p_IntermediateClause() throws RecognitionException {
        XQueryParser.p_IntermediateClause_return retval = new XQueryParser.p_IntermediateClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_InitialClause_return p_InitialClause114 = null;

        XQueryParser.p_WhereClause_return p_WhereClause115 = null;

        XQueryParser.p_GroupByClause_return p_GroupByClause116 = null;

        XQueryParser.p_OrderByClause_return p_OrderByClause117 = null;

        XQueryParser.p_CountClause_return p_CountClause118 = null;



        try {
            // XQueryParser.g:441:9: ( p_InitialClause | p_WhereClause | p_GroupByClause | p_OrderByClause | p_CountClause )
            int alt55=5;
            switch ( input.LA(1) ) {
            case FOR:
            case LET:
                {
                alt55=1;
                }
                break;
            case WHERE:
                {
                alt55=2;
                }
                break;
            case GROUP:
                {
                alt55=3;
                }
                break;
            case ORDER:
            case STABLE:
                {
                alt55=4;
                }
                break;
            case COUNT:
                {
                alt55=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // XQueryParser.g:441:11: p_InitialClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_InitialClause_in_p_IntermediateClause3973);
                    p_InitialClause114=p_InitialClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InitialClause114.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:441:29: p_WhereClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_WhereClause_in_p_IntermediateClause3977);
                    p_WhereClause115=p_WhereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhereClause115.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:441:45: p_GroupByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_GroupByClause_in_p_IntermediateClause3981);
                    p_GroupByClause116=p_GroupByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupByClause116.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:441:63: p_OrderByClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderByClause_in_p_IntermediateClause3985);
                    p_OrderByClause117=p_OrderByClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderByClause117.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:441:81: p_CountClause
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CountClause_in_p_IntermediateClause3989);
                    p_CountClause118=p_CountClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CountClause118.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntermediateClause"

    public static class p_ForClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForClause"
    // XQueryParser.g:445:1: p_ForClause : k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* ;
    public final XQueryParser.p_ForClause_return p_ForClause() throws RecognitionException {
        XQueryParser.p_ForClause_return retval = new XQueryParser.p_ForClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR119=null;
        CommonToken COMMA124=null;
        CommonToken DOLLAR125=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName120 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration121 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar122 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle123 = null;

        XQueryParser.p_VarName_return p_VarName126 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration127 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar128 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle129 = null;


        XQDTCommonTree DOLLAR119_tree=null;
        XQDTCommonTree COMMA124_tree=null;
        XQDTCommonTree DOLLAR125_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:446:9: (k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )* )
            // XQueryParser.g:446:11: k+= FOR DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_ForClause4017); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR119=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause4019); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR119_tree = (XQDTCommonTree)adaptor.create(DOLLAR119);
            adaptor.addChild(root_0, DOLLAR119_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_ForClause4021);
            p_VarName120=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName120.getTree());
            // XQueryParser.g:446:35: ( p_TypeDeclaration )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==AS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // XQueryParser.g:446:35: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause4023);
                    p_TypeDeclaration121=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration121.getTree());

                    }
                    break;

            }

            // XQueryParser.g:446:54: ( p_PositionalVar )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==AT) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // XQueryParser.g:446:54: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause4026);
                    p_PositionalVar122=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar122.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause4031); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause4033);
            p_ExprSingle123=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle123.getTree());
            // XQueryParser.g:446:90: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // XQueryParser.g:446:91: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( p_PositionalVar )? k+= IN p_ExprSingle
            	    {
            	    COMMA124=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ForClause4036); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA124_tree = (XQDTCommonTree)adaptor.create(COMMA124);
            	    adaptor.addChild(root_0, COMMA124_tree);
            	    }
            	    DOLLAR125=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ForClause4038); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR125_tree = (XQDTCommonTree)adaptor.create(DOLLAR125);
            	    adaptor.addChild(root_0, DOLLAR125_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_ForClause4040);
            	    p_VarName126=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName126.getTree());
            	    // XQueryParser.g:446:114: ( p_TypeDeclaration )?
            	    int alt58=2;
            	    int LA58_0 = input.LA(1);

            	    if ( (LA58_0==AS) ) {
            	        alt58=1;
            	    }
            	    switch (alt58) {
            	        case 1 :
            	            // XQueryParser.g:446:114: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_ForClause4042);
            	            p_TypeDeclaration127=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration127.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:446:133: ( p_PositionalVar )?
            	    int alt59=2;
            	    int LA59_0 = input.LA(1);

            	    if ( (LA59_0==AT) ) {
            	        alt59=1;
            	    }
            	    switch (alt59) {
            	        case 1 :
            	            // XQueryParser.g:446:133: p_PositionalVar
            	            {
            	            pushFollow(FOLLOW_p_PositionalVar_in_p_ForClause4045);
            	            p_PositionalVar128=p_PositionalVar();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar128.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_ForClause4050); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ForClause4052);
            	    p_ExprSingle129=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle129.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForClause"

    public static class p_PositionalVar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PositionalVar"
    // XQueryParser.g:450:1: p_PositionalVar : ka= AT DOLLAR p_VarName ;
    public final XQueryParser.p_PositionalVar_return p_PositionalVar() throws RecognitionException {
        XQueryParser.p_PositionalVar_return retval = new XQueryParser.p_PositionalVar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken DOLLAR130=null;
        XQueryParser.p_VarName_return p_VarName131 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree DOLLAR130_tree=null;

        try {
            // XQueryParser.g:451:9: (ka= AT DOLLAR p_VarName )
            // XQueryParser.g:451:11: ka= AT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ka=(CommonToken)match(input,AT,FOLLOW_AT_in_p_PositionalVar4084); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            DOLLAR130=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_PositionalVar4088); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR130_tree = (XQDTCommonTree)adaptor.create(DOLLAR130);
            adaptor.addChild(root_0, DOLLAR130_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_PositionalVar4090);
            p_VarName131=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName131.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PositionalVar"

    public static class p_LetClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LetClause"
    // XQueryParser.g:455:1: p_LetClause : kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* ;
    public final XQueryParser.p_LetClause_return p_LetClause() throws RecognitionException {
        XQueryParser.p_LetClause_return retval = new XQueryParser.p_LetClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kl=null;
        CommonToken DOLLAR132=null;
        CommonToken BIND135=null;
        CommonToken COMMA137=null;
        CommonToken DOLLAR138=null;
        CommonToken BIND141=null;
        XQueryParser.p_VarName_return p_VarName133 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration134 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle136 = null;

        XQueryParser.p_VarName_return p_VarName139 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration140 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle142 = null;


        XQDTCommonTree kl_tree=null;
        XQDTCommonTree DOLLAR132_tree=null;
        XQDTCommonTree BIND135_tree=null;
        XQDTCommonTree COMMA137_tree=null;
        XQDTCommonTree DOLLAR138_tree=null;
        XQDTCommonTree BIND141_tree=null;

        try {
            // XQueryParser.g:456:9: (kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )* )
            // XQueryParser.g:456:11: kl= LET DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kl=(CommonToken)match(input,LET,FOLLOW_LET_in_p_LetClause4118); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kl_tree = (XQDTCommonTree)adaptor.create(kl);
            adaptor.addChild(root_0, kl_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kl);
            }
            DOLLAR132=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR132_tree = (XQDTCommonTree)adaptor.create(DOLLAR132);
            adaptor.addChild(root_0, DOLLAR132_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_LetClause4124);
            p_VarName133=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName133.getTree());
            // XQueryParser.g:456:46: ( p_TypeDeclaration )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // XQueryParser.g:456:46: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4126);
                    p_TypeDeclaration134=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration134.getTree());

                    }
                    break;

            }

            BIND135=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND135_tree = (XQDTCommonTree)adaptor.create(BIND135);
            adaptor.addChild(root_0, BIND135_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4131);
            p_ExprSingle136=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle136.getTree());
            // XQueryParser.g:456:83: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // XQueryParser.g:456:84: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? BIND p_ExprSingle
            	    {
            	    COMMA137=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_LetClause4134); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA137_tree = (XQDTCommonTree)adaptor.create(COMMA137);
            	    adaptor.addChild(root_0, COMMA137_tree);
            	    }
            	    DOLLAR138=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_LetClause4136); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR138_tree = (XQDTCommonTree)adaptor.create(DOLLAR138);
            	    adaptor.addChild(root_0, DOLLAR138_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_LetClause4138);
            	    p_VarName139=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName139.getTree());
            	    // XQueryParser.g:456:107: ( p_TypeDeclaration )?
            	    int alt62=2;
            	    int LA62_0 = input.LA(1);

            	    if ( (LA62_0==AS) ) {
            	        alt62=1;
            	    }
            	    switch (alt62) {
            	        case 1 :
            	            // XQueryParser.g:456:107: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_LetClause4140);
            	            p_TypeDeclaration140=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration140.getTree());

            	            }
            	            break;

            	    }

            	    BIND141=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_LetClause4143); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND141_tree = (XQDTCommonTree)adaptor.create(BIND141);
            	    adaptor.addChild(root_0, BIND141_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_LetClause4145);
            	    p_ExprSingle142=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle142.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_LetClause"

    public static class p_WindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowClause"
    // XQueryParser.g:460:1: p_WindowClause : kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) ;
    public final XQueryParser.p_WindowClause_return p_WindowClause() throws RecognitionException {
        XQueryParser.p_WindowClause_return retval = new XQueryParser.p_WindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause143 = null;

        XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause144 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:461:9: (kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause ) )
            // XQueryParser.g:461:11: kf= FOR ( p_TumblingWindowClause | p_SlidingWindowClause )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FOR,FOLLOW_FOR_in_p_WindowClause4175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            // XQueryParser.g:461:29: ( p_TumblingWindowClause | p_SlidingWindowClause )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==TUMBLING) ) {
                alt64=1;
            }
            else if ( (LA64_0==SLIDING) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // XQueryParser.g:461:30: p_TumblingWindowClause
                    {
                    pushFollow(FOLLOW_p_TumblingWindowClause_in_p_WindowClause4180);
                    p_TumblingWindowClause143=p_TumblingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TumblingWindowClause143.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:461:55: p_SlidingWindowClause
                    {
                    pushFollow(FOLLOW_p_SlidingWindowClause_in_p_WindowClause4184);
                    p_SlidingWindowClause144=p_SlidingWindowClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SlidingWindowClause144.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowClause"

    public static class p_TumblingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TumblingWindowClause"
    // XQueryParser.g:465:1: p_TumblingWindowClause : k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_TumblingWindowClause_return p_TumblingWindowClause() throws RecognitionException {
        XQueryParser.p_TumblingWindowClause_return retval = new XQueryParser.p_TumblingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR145=null;
        CommonToken IN148=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName146 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration147 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle149 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition150 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition151 = null;


        XQDTCommonTree DOLLAR145_tree=null;
        XQDTCommonTree IN148_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:466:9: (k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:466:11: k+= TUMBLING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TUMBLING,FOLLOW_TUMBLING_in_p_TumblingWindowClause4221); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_TumblingWindowClause4225); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR145=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TumblingWindowClause4227); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR145_tree = (XQDTCommonTree)adaptor.create(DOLLAR145);
            adaptor.addChild(root_0, DOLLAR145_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TumblingWindowClause4229);
            p_VarName146=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName146.getTree());
            // XQueryParser.g:466:50: ( p_TypeDeclaration )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==AS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // XQueryParser.g:466:50: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4231);
                    p_TypeDeclaration147=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration147.getTree());

                    }
                    break;

            }

            IN148=(CommonToken)match(input,IN,FOLLOW_IN_in_p_TumblingWindowClause4234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN148_tree = (XQDTCommonTree)adaptor.create(IN148);
            adaptor.addChild(root_0, IN148_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4236);
            p_ExprSingle149=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle149.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4238);
            p_WindowStartCondition150=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition150.getTree());
            // XQueryParser.g:466:108: ( p_WindowEndCondition )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==END||LA66_0==ONLY) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // XQueryParser.g:466:108: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4240);
                    p_WindowEndCondition151=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition151.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TumblingWindowClause"

    public static class p_SlidingWindowClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SlidingWindowClause"
    // XQueryParser.g:470:1: p_SlidingWindowClause : k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? ;
    public final XQueryParser.p_SlidingWindowClause_return p_SlidingWindowClause() throws RecognitionException {
        XQueryParser.p_SlidingWindowClause_return retval = new XQueryParser.p_SlidingWindowClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR152=null;
        CommonToken IN155=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName153 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration154 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle156 = null;

        XQueryParser.p_WindowStartCondition_return p_WindowStartCondition157 = null;

        XQueryParser.p_WindowEndCondition_return p_WindowEndCondition158 = null;


        XQDTCommonTree DOLLAR152_tree=null;
        XQDTCommonTree IN155_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:471:9: (k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )? )
            // XQueryParser.g:471:11: k+= SLIDING k+= WINDOW DOLLAR p_VarName ( p_TypeDeclaration )? IN p_ExprSingle p_WindowStartCondition ( p_WindowEndCondition )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,SLIDING,FOLLOW_SLIDING_in_p_SlidingWindowClause4271); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,WINDOW,FOLLOW_WINDOW_in_p_SlidingWindowClause4275); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR152=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_SlidingWindowClause4277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR152_tree = (XQDTCommonTree)adaptor.create(DOLLAR152);
            adaptor.addChild(root_0, DOLLAR152_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_SlidingWindowClause4279);
            p_VarName153=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName153.getTree());
            // XQueryParser.g:471:49: ( p_TypeDeclaration )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==AS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // XQueryParser.g:471:49: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4281);
                    p_TypeDeclaration154=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration154.getTree());

                    }
                    break;

            }

            IN155=(CommonToken)match(input,IN,FOLLOW_IN_in_p_SlidingWindowClause4284); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN155_tree = (XQDTCommonTree)adaptor.create(IN155);
            adaptor.addChild(root_0, IN155_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4286);
            p_ExprSingle156=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle156.getTree());
            pushFollow(FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4288);
            p_WindowStartCondition157=p_WindowStartCondition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowStartCondition157.getTree());
            // XQueryParser.g:471:107: ( p_WindowEndCondition )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==END||LA68_0==ONLY) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // XQueryParser.g:471:107: p_WindowEndCondition
                    {
                    pushFollow(FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4290);
                    p_WindowEndCondition158=p_WindowEndCondition();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowEndCondition158.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SlidingWindowClause"

    public static class p_WindowStartCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowStartCondition"
    // XQueryParser.g:475:1: p_WindowStartCondition : k+= START p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowStartCondition_return p_WindowStartCondition() throws RecognitionException {
        XQueryParser.p_WindowStartCondition_return retval = new XQueryParser.p_WindowStartCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars159 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle160 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:476:9: (k+= START p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:476:11: k+= START p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,START,FOLLOW_START_in_p_WindowStartCondition4321); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowStartCondition4323);
            p_WindowVars159=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars159.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowStartCondition4327); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowStartCondition4329);
            p_ExprSingle160=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle160.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowStartCondition"

    public static class p_WindowEndCondition_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowEndCondition"
    // XQueryParser.g:480:1: p_WindowEndCondition : (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle ;
    public final XQueryParser.p_WindowEndCondition_return p_WindowEndCondition() throws RecognitionException {
        XQueryParser.p_WindowEndCondition_return retval = new XQueryParser.p_WindowEndCondition_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_WindowVars_return p_WindowVars161 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle162 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:481:9: ( (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle )
            // XQueryParser.g:481:11: (k+= ONLY )? k+= END p_WindowVars k+= WHEN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:481:12: (k+= ONLY )?
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==ONLY) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    // XQueryParser.g:481:12: k+= ONLY
                    {
                    k=(CommonToken)match(input,ONLY,FOLLOW_ONLY_in_p_WindowEndCondition4359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,END,FOLLOW_END_in_p_WindowEndCondition4364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_WindowVars_in_p_WindowEndCondition4366);
            p_WindowVars161=p_WindowVars();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WindowVars161.getTree());
            k=(CommonToken)match(input,WHEN,FOLLOW_WHEN_in_p_WindowEndCondition4370); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_WindowEndCondition4372);
            p_ExprSingle162=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle162.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowEndCondition"

    public static class p_WindowVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WindowVars"
    // XQueryParser.g:485:1: p_WindowVars : ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? ;
    public final XQueryParser.p_WindowVars_return p_WindowVars() throws RecognitionException {
        XQueryParser.p_WindowVars_return retval = new XQueryParser.p_WindowVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR163=null;
        CommonToken DOLLAR166=null;
        CommonToken DOLLAR168=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName164 = null;

        XQueryParser.p_PositionalVar_return p_PositionalVar165 = null;

        XQueryParser.p_QName_return p_QName167 = null;

        XQueryParser.p_QName_return p_QName169 = null;


        XQDTCommonTree DOLLAR163_tree=null;
        XQDTCommonTree DOLLAR166_tree=null;
        XQDTCommonTree DOLLAR168_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:486:9: ( ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )? )
            // XQueryParser.g:486:11: ( DOLLAR p_QName )? ( p_PositionalVar )? (k+= PREVIOUS DOLLAR p_QName )? (k+= NEXT DOLLAR p_QName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:486:11: ( DOLLAR p_QName )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==DOLLAR) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // XQueryParser.g:486:12: DOLLAR p_QName
                    {
                    DOLLAR163=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR163_tree = (XQDTCommonTree)adaptor.create(DOLLAR163);
                    adaptor.addChild(root_0, DOLLAR163_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4403);
                    p_QName164=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName164.getTree());

                    }
                    break;

            }

            // XQueryParser.g:486:29: ( p_PositionalVar )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==AT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // XQueryParser.g:486:29: p_PositionalVar
                    {
                    pushFollow(FOLLOW_p_PositionalVar_in_p_WindowVars4407);
                    p_PositionalVar165=p_PositionalVar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PositionalVar165.getTree());

                    }
                    break;

            }

            // XQueryParser.g:486:46: (k+= PREVIOUS DOLLAR p_QName )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==PREVIOUS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // XQueryParser.g:486:47: k+= PREVIOUS DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_p_WindowVars4413); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR166=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4415); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR166_tree = (XQDTCommonTree)adaptor.create(DOLLAR166);
                    adaptor.addChild(root_0, DOLLAR166_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4417);
                    p_QName167=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName167.getTree());

                    }
                    break;

            }

            // XQueryParser.g:486:76: (k+= NEXT DOLLAR p_QName )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==NEXT) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // XQueryParser.g:486:77: k+= NEXT DOLLAR p_QName
                    {
                    k=(CommonToken)match(input,NEXT,FOLLOW_NEXT_in_p_WindowVars4424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    DOLLAR168=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_WindowVars4426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR168_tree = (XQDTCommonTree)adaptor.create(DOLLAR168);
                    adaptor.addChild(root_0, DOLLAR168_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_WindowVars4428);
                    p_QName169=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName169.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WindowVars"

    public static class p_CountClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CountClause"
    // XQueryParser.g:499:1: p_CountClause : kc+= COUNT DOLLAR p_VarName ;
    public final XQueryParser.p_CountClause_return p_CountClause() throws RecognitionException {
        XQueryParser.p_CountClause_return retval = new XQueryParser.p_CountClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR170=null;
        CommonToken kc=null;
        List list_kc=null;
        XQueryParser.p_VarName_return p_VarName171 = null;


        XQDTCommonTree DOLLAR170_tree=null;
        XQDTCommonTree kc_tree=null;

        try {
            // XQueryParser.g:500:9: (kc+= COUNT DOLLAR p_VarName )
            // XQueryParser.g:500:11: kc+= COUNT DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,COUNT,FOLLOW_COUNT_in_p_CountClause4469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if (list_kc==null) list_kc=new ArrayList();
            list_kc.add(kc);

            if ( state.backtracking==0 ) {
              ak(list_kc);
            }
            DOLLAR170=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CountClause4473); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR170_tree = (XQDTCommonTree)adaptor.create(DOLLAR170);
            adaptor.addChild(root_0, DOLLAR170_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CountClause4475);
            p_VarName171=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName171.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CountClause"

    public static class p_WhereClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhereClause"
    // XQueryParser.g:504:1: p_WhereClause : kw+= WHERE p_ExprSingle ;
    public final XQueryParser.p_WhereClause_return p_WhereClause() throws RecognitionException {
        XQueryParser.p_WhereClause_return retval = new XQueryParser.p_WhereClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        List list_kw=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle172 = null;


        XQDTCommonTree kw_tree=null;

        try {
            // XQueryParser.g:505:9: (kw+= WHERE p_ExprSingle )
            // XQueryParser.g:505:11: kw+= WHERE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHERE,FOLLOW_WHERE_in_p_WhereClause4511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if (list_kw==null) list_kw=new ArrayList();
            list_kw.add(kw);

            if ( state.backtracking==0 ) {
              ak(list_kw);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhereClause4515);
            p_ExprSingle172=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle172.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhereClause"

    public static class p_GroupByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupByClause"
    // XQueryParser.g:509:1: p_GroupByClause : k+= GROUP k+= BY p_GroupingSpecList ;
    public final XQueryParser.p_GroupByClause_return p_GroupByClause() throws RecognitionException {
        XQueryParser.p_GroupByClause_return retval = new XQueryParser.p_GroupByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_GroupingSpecList_return p_GroupingSpecList173 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:510:9: (k+= GROUP k+= BY p_GroupingSpecList )
            // XQueryParser.g:510:13: k+= GROUP k+= BY p_GroupingSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,GROUP,FOLLOW_GROUP_in_p_GroupByClause4545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_GroupByClause4549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_GroupingSpecList_in_p_GroupByClause4551);
            p_GroupingSpecList173=p_GroupingSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpecList173.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupByClause"

    public static class p_GroupingSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpecList"
    // XQueryParser.g:514:1: p_GroupingSpecList : p_GroupingSpec ( COMMA p_GroupingSpec )* ;
    public final XQueryParser.p_GroupingSpecList_return p_GroupingSpecList() throws RecognitionException {
        XQueryParser.p_GroupingSpecList_return retval = new XQueryParser.p_GroupingSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA175=null;
        XQueryParser.p_GroupingSpec_return p_GroupingSpec174 = null;

        XQueryParser.p_GroupingSpec_return p_GroupingSpec176 = null;


        XQDTCommonTree COMMA175_tree=null;

        try {
            // XQueryParser.g:515:9: ( p_GroupingSpec ( COMMA p_GroupingSpec )* )
            // XQueryParser.g:515:13: p_GroupingSpec ( COMMA p_GroupingSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4581);
            p_GroupingSpec174=p_GroupingSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec174.getTree());
            // XQueryParser.g:515:28: ( COMMA p_GroupingSpec )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==COMMA) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // XQueryParser.g:515:29: COMMA p_GroupingSpec
            	    {
            	    COMMA175=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_GroupingSpecList4584); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA175_tree = (XQDTCommonTree)adaptor.create(COMMA175);
            	    adaptor.addChild(root_0, COMMA175_tree);
            	    }
            	    pushFollow(FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4586);
            	    p_GroupingSpec176=p_GroupingSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GroupingSpec176.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpecList"

    public static class p_GroupingSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GroupingSpec"
    // XQueryParser.g:519:1: p_GroupingSpec : DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_GroupingSpec_return p_GroupingSpec() throws RecognitionException {
        XQueryParser.p_GroupingSpec_return retval = new XQueryParser.p_GroupingSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR177=null;
        XQueryParser.p_VarName_return p_VarName178 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral179 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR177_tree=null;

        try {
            // XQueryParser.g:520:9: ( DOLLAR p_VarName (kc= COLLATION p_StringLiteral )? )
            // XQueryParser.g:520:13: DOLLAR p_VarName (kc= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR177=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_GroupingSpec4616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR177_tree = (XQDTCommonTree)adaptor.create(DOLLAR177);
            adaptor.addChild(root_0, DOLLAR177_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_GroupingSpec4618);
            p_VarName178=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName178.getTree());
            // XQueryParser.g:520:30: (kc= COLLATION p_StringLiteral )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==COLLATION) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // XQueryParser.g:520:31: kc= COLLATION p_StringLiteral
                    {
                    kc=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_GroupingSpec4623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    pushFollow(FOLLOW_p_StringLiteral_in_p_GroupingSpec4625);
                    p_StringLiteral179=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral179.getTree());
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GroupingSpec"

    public static class p_OrderByClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderByClause"
    // XQueryParser.g:524:1: p_OrderByClause : ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList ;
    public final XQueryParser.p_OrderByClause_return p_OrderByClause() throws RecognitionException {
        XQueryParser.p_OrderByClause_return retval = new XQueryParser.p_OrderByClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_OrderSpecList_return p_OrderSpecList180 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:525:9: ( ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList )
            // XQueryParser.g:525:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) ) p_OrderSpecList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:525:13: ( (k+= ORDER k+= BY ) | (k+= STABLE k+= ORDER k+= BY ) )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==ORDER) ) {
                alt76=1;
            }
            else if ( (LA76_0==STABLE) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // XQueryParser.g:525:14: (k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:525:14: (k+= ORDER k+= BY )
                    // XQueryParser.g:525:15: k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4661); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:525:33: (k+= STABLE k+= ORDER k+= BY )
                    {
                    // XQueryParser.g:525:33: (k+= STABLE k+= ORDER k+= BY )
                    // XQueryParser.g:525:34: k+= STABLE k+= ORDER k+= BY
                    {
                    k=(CommonToken)match(input,STABLE,FOLLOW_STABLE_in_p_OrderByClause4673); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,ORDER,FOLLOW_ORDER_in_p_OrderByClause4677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_OrderByClause4681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_p_OrderSpecList_in_p_OrderByClause4685);
            p_OrderSpecList180=p_OrderSpecList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpecList180.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderByClause"

    public static class p_OrderSpecList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpecList"
    // XQueryParser.g:529:1: p_OrderSpecList : p_OrderSpec ( COMMA p_OrderSpec )* ;
    public final XQueryParser.p_OrderSpecList_return p_OrderSpecList() throws RecognitionException {
        XQueryParser.p_OrderSpecList_return retval = new XQueryParser.p_OrderSpecList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA182=null;
        XQueryParser.p_OrderSpec_return p_OrderSpec181 = null;

        XQueryParser.p_OrderSpec_return p_OrderSpec183 = null;


        XQDTCommonTree COMMA182_tree=null;

        try {
            // XQueryParser.g:530:9: ( p_OrderSpec ( COMMA p_OrderSpec )* )
            // XQueryParser.g:530:13: p_OrderSpec ( COMMA p_OrderSpec )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4715);
            p_OrderSpec181=p_OrderSpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec181.getTree());
            // XQueryParser.g:530:25: ( COMMA p_OrderSpec )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // XQueryParser.g:530:26: COMMA p_OrderSpec
            	    {
            	    COMMA182=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_OrderSpecList4718); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA182_tree = (XQDTCommonTree)adaptor.create(COMMA182);
            	    adaptor.addChild(root_0, COMMA182_tree);
            	    }
            	    pushFollow(FOLLOW_p_OrderSpec_in_p_OrderSpecList4720);
            	    p_OrderSpec183=p_OrderSpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderSpec183.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpecList"

    public static class p_OrderSpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderSpec"
    // XQueryParser.g:534:1: p_OrderSpec : p_ExprSingle p_OrderModifier ;
    public final XQueryParser.p_OrderSpec_return p_OrderSpec() throws RecognitionException {
        XQueryParser.p_OrderSpec_return retval = new XQueryParser.p_OrderSpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle184 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier185 = null;



        try {
            // XQueryParser.g:535:9: ( p_ExprSingle p_OrderModifier )
            // XQueryParser.g:535:13: p_ExprSingle p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_OrderSpec4750);
            p_ExprSingle184=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle184.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_OrderSpec4752);
            p_OrderModifier185=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier185.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderSpec"

    public static class p_OrderModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderModifier"
    // XQueryParser.g:539:1: p_OrderModifier : (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? ;
    public final XQueryParser.p_OrderModifier_return p_OrderModifier() throws RecognitionException {
        XQueryParser.p_OrderModifier_return retval = new XQueryParser.p_OrderModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_StringLiteral_return p_StringLiteral186 = null;


        XQDTCommonTree ka_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:540:9: ( (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )? )
            // XQueryParser.g:540:11: (ka= ASCENDING | k+= DESCENDING )? (k+= EMPTY (k+= GREATEST | k+= LEAST ) )? (k+= COLLATION p_StringLiteral )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:540:11: (ka= ASCENDING | k+= DESCENDING )?
            int alt78=3;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==ASCENDING) ) {
                alt78=1;
            }
            else if ( (LA78_0==DESCENDING) ) {
                alt78=2;
            }
            switch (alt78) {
                case 1 :
                    // XQueryParser.g:540:12: ka= ASCENDING
                    {
                    ka=(CommonToken)match(input,ASCENDING,FOLLOW_ASCENDING_in_p_OrderModifier4781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:540:27: k+= DESCENDING
                    {
                    k=(CommonToken)match(input,DESCENDING,FOLLOW_DESCENDING_in_p_OrderModifier4787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            // XQueryParser.g:540:43: (k+= EMPTY (k+= GREATEST | k+= LEAST ) )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==EMPTY) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    // XQueryParser.g:540:44: k+= EMPTY (k+= GREATEST | k+= LEAST )
                    {
                    k=(CommonToken)match(input,EMPTY,FOLLOW_EMPTY_in_p_OrderModifier4794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    // XQueryParser.g:540:53: (k+= GREATEST | k+= LEAST )
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==GREATEST) ) {
                        alt79=1;
                    }
                    else if ( (LA79_0==LEAST) ) {
                        alt79=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 79, 0, input);

                        throw nvae;
                    }
                    switch (alt79) {
                        case 1 :
                            // XQueryParser.g:540:54: k+= GREATEST
                            {
                            k=(CommonToken)match(input,GREATEST,FOLLOW_GREATEST_in_p_OrderModifier4799); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;
                        case 2 :
                            // XQueryParser.g:540:68: k+= LEAST
                            {
                            k=(CommonToken)match(input,LEAST,FOLLOW_LEAST_in_p_OrderModifier4805); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);


                            }
                            break;

                    }


                    }
                    break;

            }

            // XQueryParser.g:540:80: (k+= COLLATION p_StringLiteral )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==COLLATION) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // XQueryParser.g:540:81: k+= COLLATION p_StringLiteral
                    {
                    k=(CommonToken)match(input,COLLATION,FOLLOW_COLLATION_in_p_OrderModifier4813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_StringLiteral_in_p_OrderModifier4815);
                    p_StringLiteral186=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral186.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderModifier"

    public static class p_ReturnClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReturnClause"
    // XQueryParser.g:544:1: p_ReturnClause : kr= RETURN p_ExprSingle ;
    public final XQueryParser.p_ReturnClause_return p_ReturnClause() throws RecognitionException {
        XQueryParser.p_ReturnClause_return retval = new XQueryParser.p_ReturnClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle187 = null;


        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:545:9: (kr= RETURN p_ExprSingle )
            // XQueryParser.g:545:11: kr= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kr=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_ReturnClause4847); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ReturnClause4851);
            p_ExprSingle187=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle187.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReturnClause"

    public static class p_QuantifiedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuantifiedExpr"
    // XQueryParser.g:549:1: p_QuantifiedExpr : (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle ;
    public final XQueryParser.p_QuantifiedExpr_return p_QuantifiedExpr() throws RecognitionException {
        XQueryParser.p_QuantifiedExpr_return retval = new XQueryParser.p_QuantifiedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR188=null;
        CommonToken COMMA192=null;
        CommonToken DOLLAR193=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName189 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration190 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle191 = null;

        XQueryParser.p_QName_return p_QName194 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration195 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle196 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle197 = null;


        XQDTCommonTree DOLLAR188_tree=null;
        XQDTCommonTree COMMA192_tree=null;
        XQDTCommonTree DOLLAR193_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:550:9: ( (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle )
            // XQueryParser.g:550:13: (k+= SOME | k+= EVERY ) DOLLAR p_VarName ( p_TypeDeclaration )? k+= IN p_ExprSingle ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )* k+= SATISFIES p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:550:13: (k+= SOME | k+= EVERY )
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==SOME) ) {
                alt82=1;
            }
            else if ( (LA82_0==EVERY) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // XQueryParser.g:550:14: k+= SOME
                    {
                    k=(CommonToken)match(input,SOME,FOLLOW_SOME_in_p_QuantifiedExpr4882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:550:24: k+= EVERY
                    {
                    k=(CommonToken)match(input,EVERY,FOLLOW_EVERY_in_p_QuantifiedExpr4888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            DOLLAR188=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4891); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR188_tree = (XQDTCommonTree)adaptor.create(DOLLAR188);
            adaptor.addChild(root_0, DOLLAR188_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_QuantifiedExpr4893);
            p_VarName189=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName189.getTree());
            // XQueryParser.g:550:51: ( p_TypeDeclaration )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==AS) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // XQueryParser.g:550:51: p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4895);
                    p_TypeDeclaration190=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration190.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4900); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4902);
            p_ExprSingle191=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle191.getTree());
            // XQueryParser.g:550:89: ( COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // XQueryParser.g:550:90: COMMA DOLLAR p_QName ( p_TypeDeclaration )? k+= IN p_ExprSingle
            	    {
            	    COMMA192=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_QuantifiedExpr4905); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA192_tree = (XQDTCommonTree)adaptor.create(COMMA192);
            	    adaptor.addChild(root_0, COMMA192_tree);
            	    }
            	    DOLLAR193=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_QuantifiedExpr4907); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR193_tree = (XQDTCommonTree)adaptor.create(DOLLAR193);
            	    adaptor.addChild(root_0, DOLLAR193_tree);
            	    }
            	    pushFollow(FOLLOW_p_QName_in_p_QuantifiedExpr4909);
            	    p_QName194=p_QName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName194.getTree());
            	    // XQueryParser.g:550:111: ( p_TypeDeclaration )?
            	    int alt84=2;
            	    int LA84_0 = input.LA(1);

            	    if ( (LA84_0==AS) ) {
            	        alt84=1;
            	    }
            	    switch (alt84) {
            	        case 1 :
            	            // XQueryParser.g:550:111: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4911);
            	            p_TypeDeclaration195=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration195.getTree());

            	            }
            	            break;

            	    }

            	    k=(CommonToken)match(input,IN,FOLLOW_IN_in_p_QuantifiedExpr4916); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4918);
            	    p_ExprSingle196=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle196.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            k=(CommonToken)match(input,SATISFIES,FOLLOW_SATISFIES_in_p_QuantifiedExpr4924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4926);
            p_ExprSingle197=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle197.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuantifiedExpr"

    public static class p_TypeswitchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeswitchExpr"
    // XQueryParser.g:554:1: p_TypeswitchExpr : k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TypeswitchExpr_return p_TypeswitchExpr() throws RecognitionException {
        XQueryParser.p_TypeswitchExpr_return retval = new XQueryParser.p_TypeswitchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN198=null;
        CommonToken RPAREN200=null;
        CommonToken DOLLAR202=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr199 = null;

        XQueryParser.p_CaseClause_return p_CaseClause201 = null;

        XQueryParser.p_VarName_return p_VarName203 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle204 = null;


        XQDTCommonTree LPAREN198_tree=null;
        XQDTCommonTree RPAREN200_tree=null;
        XQDTCommonTree DOLLAR202_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:555:9: (k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle )
            // XQueryParser.g:555:11: k+= TYPESWITCH LPAREN pm_Expr RPAREN ( p_CaseClause )+ k+= DEFAULT ( DOLLAR p_VarName )? k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TYPESWITCH,FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4956); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN198=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TypeswitchExpr4958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN198_tree = (XQDTCommonTree)adaptor.create(LPAREN198);
            adaptor.addChild(root_0, LPAREN198_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TypeswitchExpr4960);
            pm_Expr199=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr199.getTree());
            RPAREN200=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TypeswitchExpr4962); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN200_tree = (XQDTCommonTree)adaptor.create(RPAREN200);
            adaptor.addChild(root_0, RPAREN200_tree);
            }
            // XQueryParser.g:555:47: ( p_CaseClause )+
            int cnt86=0;
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==CASE) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // XQueryParser.g:555:47: p_CaseClause
            	    {
            	    pushFollow(FOLLOW_p_CaseClause_in_p_TypeswitchExpr4964);
            	    p_CaseClause201=p_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CaseClause201.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt86 >= 1 ) break loop86;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(86, input);
                        throw eee;
                }
                cnt86++;
            } while (true);

            k=(CommonToken)match(input,DEFAULT,FOLLOW_DEFAULT_in_p_TypeswitchExpr4969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:555:72: ( DOLLAR p_VarName )?
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==DOLLAR) ) {
                alt87=1;
            }
            switch (alt87) {
                case 1 :
                    // XQueryParser.g:555:73: DOLLAR p_VarName
                    {
                    DOLLAR202=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TypeswitchExpr4972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR202_tree = (XQDTCommonTree)adaptor.create(DOLLAR202);
                    adaptor.addChild(root_0, DOLLAR202_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_TypeswitchExpr4974);
                    p_VarName203=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName203.getTree());

                    }
                    break;

            }

            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TypeswitchExpr4980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4982);
            p_ExprSingle204=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle204.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeswitchExpr"

    public static class p_CaseClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CaseClause"
    // XQueryParser.g:559:1: p_CaseClause : k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_CaseClause_return p_CaseClause() throws RecognitionException {
        XQueryParser.p_CaseClause_return retval = new XQueryParser.p_CaseClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR205=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName206 = null;

        XQueryParser.p_SequenceType_return p_SequenceType207 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle208 = null;


        XQDTCommonTree DOLLAR205_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:560:9: (k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle )
            // XQueryParser.g:560:11: k+= CASE ( DOLLAR p_VarName k+= AS )? p_SequenceType k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,CASE,FOLLOW_CASE_in_p_CaseClause5012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:560:19: ( DOLLAR p_VarName k+= AS )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==DOLLAR) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // XQueryParser.g:560:20: DOLLAR p_VarName k+= AS
                    {
                    DOLLAR205=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CaseClause5015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR205_tree = (XQDTCommonTree)adaptor.create(DOLLAR205);
                    adaptor.addChild(root_0, DOLLAR205_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CaseClause5017);
                    p_VarName206=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName206.getTree());
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CaseClause5021); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SequenceType_in_p_CaseClause5025);
            p_SequenceType207=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType207.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_CaseClause5029); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_CaseClause5031);
            p_ExprSingle208=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle208.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CaseClause"

    public static class p_IfExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IfExpr"
    // XQueryParser.g:564:1: p_IfExpr : k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle ;
    public final XQueryParser.p_IfExpr_return p_IfExpr() throws RecognitionException {
        XQueryParser.p_IfExpr_return retval = new XQueryParser.p_IfExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN209=null;
        CommonToken RPAREN211=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.pm_Expr_return pm_Expr210 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle212 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle213 = null;


        XQDTCommonTree LPAREN209_tree=null;
        XQDTCommonTree RPAREN211_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:565:9: (k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle )
            // XQueryParser.g:565:11: k+= IF LPAREN pm_Expr RPAREN k+= THEN p_ExprSingle k+= ELSE p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,IF,FOLLOW_IF_in_p_IfExpr5061); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            LPAREN209=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_IfExpr5063); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN209_tree = (XQDTCommonTree)adaptor.create(LPAREN209);
            adaptor.addChild(root_0, LPAREN209_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_IfExpr5065);
            pm_Expr210=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr210.getTree());
            RPAREN211=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_IfExpr5067); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN211_tree = (XQDTCommonTree)adaptor.create(RPAREN211);
            adaptor.addChild(root_0, RPAREN211_tree);
            }
            k=(CommonToken)match(input,THEN,FOLLOW_THEN_in_p_IfExpr5071); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr5073);
            p_ExprSingle212=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle212.getTree());
            k=(CommonToken)match(input,ELSE,FOLLOW_ELSE_in_p_IfExpr5077); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_IfExpr5079);
            p_ExprSingle213=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle213.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IfExpr"

    public static class p_OrExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrExpr"
    // XQueryParser.g:569:1: p_OrExpr : p_AndExpr (k= OR p_AndExpr )* ;
    public final XQueryParser.p_OrExpr_return p_OrExpr() throws RecognitionException {
        XQueryParser.p_OrExpr_return retval = new XQueryParser.p_OrExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AndExpr_return p_AndExpr214 = null;

        XQueryParser.p_AndExpr_return p_AndExpr215 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:570:9: ( p_AndExpr (k= OR p_AndExpr )* )
            // XQueryParser.g:570:11: p_AndExpr (k= OR p_AndExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5107);
            p_AndExpr214=p_AndExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr214.getTree());
            // XQueryParser.g:570:21: (k= OR p_AndExpr )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( (LA89_0==OR) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // XQueryParser.g:570:23: k= OR p_AndExpr
            	    {
            	    k=(CommonToken)match(input,OR,FOLLOW_OR_in_p_OrExpr5113); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_AndExpr_in_p_OrExpr5117);
            	    p_AndExpr215=p_AndExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AndExpr215.getTree());

            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrExpr"

    public static class p_AndExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AndExpr"
    // XQueryParser.g:574:1: p_AndExpr : p_ComparisonExpr (k= AND p_ComparisonExpr )* ;
    public final XQueryParser.p_AndExpr_return p_AndExpr() throws RecognitionException {
        XQueryParser.p_AndExpr_return retval = new XQueryParser.p_AndExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr216 = null;

        XQueryParser.p_ComparisonExpr_return p_ComparisonExpr217 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:575:9: ( p_ComparisonExpr (k= AND p_ComparisonExpr )* )
            // XQueryParser.g:575:13: p_ComparisonExpr (k= AND p_ComparisonExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5148);
            p_ComparisonExpr216=p_ComparisonExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr216.getTree());
            // XQueryParser.g:575:30: (k= AND p_ComparisonExpr )*
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);

                if ( (LA90_0==AND) ) {
                    alt90=1;
                }


                switch (alt90) {
            	case 1 :
            	    // XQueryParser.g:575:32: k= AND p_ComparisonExpr
            	    {
            	    k=(CommonToken)match(input,AND,FOLLOW_AND_in_p_AndExpr5154); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_ComparisonExpr_in_p_AndExpr5158);
            	    p_ComparisonExpr217=p_ComparisonExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComparisonExpr217.getTree());

            	    }
            	    break;

            	default :
            	    break loop90;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AndExpr"

    public static class p_ComparisonExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComparisonExpr"
    // XQueryParser.g:579:1: p_ComparisonExpr : p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? ;
    public final XQueryParser.p_ComparisonExpr_return p_ComparisonExpr() throws RecognitionException {
        XQueryParser.p_ComparisonExpr_return retval = new XQueryParser.p_ComparisonExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr218 = null;

        XQueryParser.p_ValueComp_return p_ValueComp219 = null;

        XQueryParser.p_GeneralComp_return p_GeneralComp220 = null;

        XQueryParser.p_NodeComp_return p_NodeComp221 = null;

        XQueryParser.p_RangeExpr_return p_RangeExpr222 = null;



        try {
            // XQueryParser.g:580:9: ( p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )? )
            // XQueryParser.g:580:13: p_RangeExpr ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5189);
            p_RangeExpr218=p_RangeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr218.getTree());
            // XQueryParser.g:580:25: ( ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr )?
            int alt92=2;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==EQ||LA92_0==GE||LA92_0==GT||LA92_0==IS||LA92_0==LE||LA92_0==LT||LA92_0==NE||LA92_0==EQUAL||LA92_0==NOTEQUAL||(LA92_0>=SMALLER && LA92_0<=GREATER_GREATER)) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    // XQueryParser.g:580:27: ( p_ValueComp | p_GeneralComp | p_NodeComp ) p_RangeExpr
                    {
                    // XQueryParser.g:580:27: ( p_ValueComp | p_GeneralComp | p_NodeComp )
                    int alt91=3;
                    switch ( input.LA(1) ) {
                    case EQ:
                    case GE:
                    case GT:
                    case LE:
                    case LT:
                    case NE:
                        {
                        alt91=1;
                        }
                        break;
                    case EQUAL:
                    case NOTEQUAL:
                    case SMALLER:
                    case GREATER:
                    case SMALLEREQ:
                    case GREATEREQ:
                        {
                        alt91=2;
                        }
                        break;
                    case IS:
                    case SMALLER_SMALLER:
                    case GREATER_GREATER:
                        {
                        alt91=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 91, 0, input);

                        throw nvae;
                    }

                    switch (alt91) {
                        case 1 :
                            // XQueryParser.g:580:28: p_ValueComp
                            {
                            pushFollow(FOLLOW_p_ValueComp_in_p_ComparisonExpr5194);
                            p_ValueComp219=p_ValueComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValueComp219.getTree());

                            }
                            break;
                        case 2 :
                            // XQueryParser.g:580:42: p_GeneralComp
                            {
                            pushFollow(FOLLOW_p_GeneralComp_in_p_ComparisonExpr5198);
                            p_GeneralComp220=p_GeneralComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_GeneralComp220.getTree());

                            }
                            break;
                        case 3 :
                            // XQueryParser.g:580:58: p_NodeComp
                            {
                            pushFollow(FOLLOW_p_NodeComp_in_p_ComparisonExpr5202);
                            p_NodeComp221=p_NodeComp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeComp221.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_p_RangeExpr_in_p_ComparisonExpr5205);
                    p_RangeExpr222=p_RangeExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RangeExpr222.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComparisonExpr"

    public static class p_RangeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RangeExpr"
    // XQueryParser.g:584:1: p_RangeExpr : p_AdditiveExpr (k= TO p_AdditiveExpr )? ;
    public final XQueryParser.p_RangeExpr_return p_RangeExpr() throws RecognitionException {
        XQueryParser.p_RangeExpr_return retval = new XQueryParser.p_RangeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr223 = null;

        XQueryParser.p_AdditiveExpr_return p_AdditiveExpr224 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:585:9: ( p_AdditiveExpr (k= TO p_AdditiveExpr )? )
            // XQueryParser.g:585:13: p_AdditiveExpr (k= TO p_AdditiveExpr )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5236);
            p_AdditiveExpr223=p_AdditiveExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr223.getTree());
            // XQueryParser.g:585:28: (k= TO p_AdditiveExpr )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==TO) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // XQueryParser.g:585:30: k= TO p_AdditiveExpr
                    {
                    k=(CommonToken)match(input,TO,FOLLOW_TO_in_p_RangeExpr5242); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    pushFollow(FOLLOW_p_AdditiveExpr_in_p_RangeExpr5246);
                    p_AdditiveExpr224=p_AdditiveExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AdditiveExpr224.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RangeExpr"

    public static class p_AdditiveExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AdditiveExpr"
    // XQueryParser.g:589:1: p_AdditiveExpr : p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* ;
    public final XQueryParser.p_AdditiveExpr_return p_AdditiveExpr() throws RecognitionException {
        XQueryParser.p_AdditiveExpr_return retval = new XQueryParser.p_AdditiveExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set226=null;
        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr225 = null;

        XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr227 = null;


        XQDTCommonTree set226_tree=null;

        try {
            // XQueryParser.g:590:9: ( p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )* )
            // XQueryParser.g:590:13: p_MultiplicativeExpr ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5277);
            p_MultiplicativeExpr225=p_MultiplicativeExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr225.getTree());
            // XQueryParser.g:590:34: ( ( PLUS | MINUS ) p_MultiplicativeExpr )*
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( ((LA94_0>=PLUS && LA94_0<=MINUS)) ) {
                    alt94=1;
                }


                switch (alt94) {
            	case 1 :
            	    // XQueryParser.g:590:36: ( PLUS | MINUS ) p_MultiplicativeExpr
            	    {
            	    set226=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=PLUS && input.LA(1)<=MINUS) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set226));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5289);
            	    p_MultiplicativeExpr227=p_MultiplicativeExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_MultiplicativeExpr227.getTree());

            	    }
            	    break;

            	default :
            	    break loop94;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AdditiveExpr"

    public static class p_MultiplicativeExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_MultiplicativeExpr"
    // XQueryParser.g:594:1: p_MultiplicativeExpr : p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* ;
    public final XQueryParser.p_MultiplicativeExpr_return p_MultiplicativeExpr() throws RecognitionException {
        XQueryParser.p_MultiplicativeExpr_return retval = new XQueryParser.p_MultiplicativeExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken ki=null;
        CommonToken km=null;
        CommonToken STAR229=null;
        XQueryParser.p_UnionExpr_return p_UnionExpr228 = null;

        XQueryParser.p_UnionExpr_return p_UnionExpr230 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree ki_tree=null;
        XQDTCommonTree km_tree=null;
        XQDTCommonTree STAR229_tree=null;

        try {
            // XQueryParser.g:595:9: ( p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )* )
            // XQueryParser.g:595:13: p_UnionExpr ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5320);
            p_UnionExpr228=p_UnionExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr228.getTree());
            // XQueryParser.g:595:25: ( ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr )*
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);

                if ( (LA96_0==DIV||LA96_0==IDIV||LA96_0==MOD||LA96_0==STAR) ) {
                    alt96=1;
                }


                switch (alt96) {
            	case 1 :
            	    // XQueryParser.g:595:27: ( STAR | kd= DIV | ki= IDIV | km= MOD ) p_UnionExpr
            	    {
            	    // XQueryParser.g:595:27: ( STAR | kd= DIV | ki= IDIV | km= MOD )
            	    int alt95=4;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt95=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt95=2;
            	        }
            	        break;
            	    case IDIV:
            	        {
            	        alt95=3;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt95=4;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 95, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt95) {
            	        case 1 :
            	            // XQueryParser.g:595:28: STAR
            	            {
            	            STAR229=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_MultiplicativeExpr5325); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR229_tree = (XQDTCommonTree)adaptor.create(STAR229);
            	            adaptor.addChild(root_0, STAR229_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:595:35: kd= DIV
            	            {
            	            kd=(CommonToken)match(input,DIV,FOLLOW_DIV_in_p_MultiplicativeExpr5331); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            kd_tree = (XQDTCommonTree)adaptor.create(kd);
            	            adaptor.addChild(root_0, kd_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(kd);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // XQueryParser.g:595:55: ki= IDIV
            	            {
            	            ki=(CommonToken)match(input,IDIV,FOLLOW_IDIV_in_p_MultiplicativeExpr5339); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ki_tree = (XQDTCommonTree)adaptor.create(ki);
            	            adaptor.addChild(root_0, ki_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ki);
            	            }

            	            }
            	            break;
            	        case 4 :
            	            // XQueryParser.g:595:76: km= MOD
            	            {
            	            km=(CommonToken)match(input,MOD,FOLLOW_MOD_in_p_MultiplicativeExpr5347); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            km_tree = (XQDTCommonTree)adaptor.create(km);
            	            adaptor.addChild(root_0, km_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(km);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5352);
            	    p_UnionExpr230=p_UnionExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnionExpr230.getTree());

            	    }
            	    break;

            	default :
            	    break loop96;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_MultiplicativeExpr"

    public static class p_UnionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnionExpr"
    // XQueryParser.g:599:1: p_UnionExpr : p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* ;
    public final XQueryParser.p_UnionExpr_return p_UnionExpr() throws RecognitionException {
        XQueryParser.p_UnionExpr_return retval = new XQueryParser.p_UnionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken VBAR232=null;
        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr231 = null;

        XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr233 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree VBAR232_tree=null;

        try {
            // XQueryParser.g:600:9: ( p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )* )
            // XQueryParser.g:600:13: p_IntersectExceptExpr ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5383);
            p_IntersectExceptExpr231=p_IntersectExceptExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr231.getTree());
            // XQueryParser.g:600:35: ( (ku= UNION | VBAR ) p_IntersectExceptExpr )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==UNION||LA98_0==VBAR) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // XQueryParser.g:600:37: (ku= UNION | VBAR ) p_IntersectExceptExpr
            	    {
            	    // XQueryParser.g:600:37: (ku= UNION | VBAR )
            	    int alt97=2;
            	    int LA97_0 = input.LA(1);

            	    if ( (LA97_0==UNION) ) {
            	        alt97=1;
            	    }
            	    else if ( (LA97_0==VBAR) ) {
            	        alt97=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 97, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt97) {
            	        case 1 :
            	            // XQueryParser.g:600:38: ku= UNION
            	            {
            	            ku=(CommonToken)match(input,UNION,FOLLOW_UNION_in_p_UnionExpr5390); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            	            adaptor.addChild(root_0, ku_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              ak(ku);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:600:60: VBAR
            	            {
            	            VBAR232=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_UnionExpr5396); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            VBAR232_tree = (XQDTCommonTree)adaptor.create(VBAR232);
            	            adaptor.addChild(root_0, VBAR232_tree);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5399);
            	    p_IntersectExceptExpr233=p_IntersectExceptExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IntersectExceptExpr233.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnionExpr"

    public static class p_IntersectExceptExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IntersectExceptExpr"
    // XQueryParser.g:604:1: p_IntersectExceptExpr : p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* ;
    public final XQueryParser.p_IntersectExceptExpr_return p_IntersectExceptExpr() throws RecognitionException {
        XQueryParser.p_IntersectExceptExpr_return retval = new XQueryParser.p_IntersectExceptExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr234 = null;

        XQueryParser.p_InstanceofExpr_return p_InstanceofExpr235 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:605:9: ( p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )* )
            // XQueryParser.g:605:13: p_InstanceofExpr ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5430);
            p_InstanceofExpr234=p_InstanceofExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr234.getTree());
            // XQueryParser.g:605:30: ( (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr )*
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);

                if ( (LA100_0==EXCEPT||LA100_0==INTERSECT) ) {
                    alt100=1;
                }


                switch (alt100) {
            	case 1 :
            	    // XQueryParser.g:605:32: (k= INTERSECT | k= EXCEPT ) p_InstanceofExpr
            	    {
            	    // XQueryParser.g:605:32: (k= INTERSECT | k= EXCEPT )
            	    int alt99=2;
            	    int LA99_0 = input.LA(1);

            	    if ( (LA99_0==INTERSECT) ) {
            	        alt99=1;
            	    }
            	    else if ( (LA99_0==EXCEPT) ) {
            	        alt99=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 99, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt99) {
            	        case 1 :
            	            // XQueryParser.g:605:33: k= INTERSECT
            	            {
            	            k=(CommonToken)match(input,INTERSECT,FOLLOW_INTERSECT_in_p_IntersectExceptExpr5437); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // XQueryParser.g:605:47: k= EXCEPT
            	            {
            	            k=(CommonToken)match(input,EXCEPT,FOLLOW_EXCEPT_in_p_IntersectExceptExpr5443); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            k_tree = (XQDTCommonTree)adaptor.create(k);
            	            adaptor.addChild(root_0, k_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ak(k);
            	    }
            	    pushFollow(FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5448);
            	    p_InstanceofExpr235=p_InstanceofExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InstanceofExpr235.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IntersectExceptExpr"

    public static class p_InstanceofExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InstanceofExpr"
    // XQueryParser.g:609:1: p_InstanceofExpr : p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? ;
    public final XQueryParser.p_InstanceofExpr_return p_InstanceofExpr() throws RecognitionException {
        XQueryParser.p_InstanceofExpr_return retval = new XQueryParser.p_InstanceofExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken ko=null;
        XQueryParser.p_TreatExpr_return p_TreatExpr236 = null;

        XQueryParser.p_SequenceType_return p_SequenceType237 = null;


        XQDTCommonTree ki_tree=null;
        XQDTCommonTree ko_tree=null;

        try {
            // XQueryParser.g:610:9: ( p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )? )
            // XQueryParser.g:610:13: p_TreatExpr (ki= INSTANCE ko= OF p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TreatExpr_in_p_InstanceofExpr5479);
            p_TreatExpr236=p_TreatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TreatExpr236.getTree());
            // XQueryParser.g:610:25: (ki= INSTANCE ko= OF p_SequenceType )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==INSTANCE) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // XQueryParser.g:610:27: ki= INSTANCE ko= OF p_SequenceType
                    {
                    ki=(CommonToken)match(input,INSTANCE,FOLLOW_INSTANCE_in_p_InstanceofExpr5485); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }
                    ko=(CommonToken)match(input,OF,FOLLOW_OF_in_p_InstanceofExpr5491); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ko_tree = (XQDTCommonTree)adaptor.create(ko);
                    adaptor.addChild(root_0, ko_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ko);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_InstanceofExpr5495);
                    p_SequenceType237=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType237.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InstanceofExpr"

    public static class p_TreatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TreatExpr"
    // XQueryParser.g:614:1: p_TreatExpr : p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? ;
    public final XQueryParser.p_TreatExpr_return p_TreatExpr() throws RecognitionException {
        XQueryParser.p_TreatExpr_return retval = new XQueryParser.p_TreatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        CommonToken ka=null;
        XQueryParser.p_CastableExpr_return p_CastableExpr238 = null;

        XQueryParser.p_SequenceType_return p_SequenceType239 = null;


        XQDTCommonTree kt_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:615:9: ( p_CastableExpr (kt= TREAT ka= AS p_SequenceType )? )
            // XQueryParser.g:615:13: p_CastableExpr (kt= TREAT ka= AS p_SequenceType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastableExpr_in_p_TreatExpr5525);
            p_CastableExpr238=p_CastableExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastableExpr238.getTree());
            // XQueryParser.g:615:28: (kt= TREAT ka= AS p_SequenceType )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==TREAT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // XQueryParser.g:615:30: kt= TREAT ka= AS p_SequenceType
                    {
                    kt=(CommonToken)match(input,TREAT,FOLLOW_TREAT_in_p_TreatExpr5531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kt_tree = (XQDTCommonTree)adaptor.create(kt);
                    adaptor.addChild(root_0, kt_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kt);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TreatExpr5537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SequenceType_in_p_TreatExpr5541);
                    p_SequenceType239=p_SequenceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SequenceType239.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TreatExpr"

    public static class p_CastableExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastableExpr"
    // XQueryParser.g:619:1: p_CastableExpr : p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastableExpr_return p_CastableExpr() throws RecognitionException {
        XQueryParser.p_CastableExpr_return retval = new XQueryParser.p_CastableExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_CastExpr_return p_CastExpr240 = null;

        XQueryParser.p_SingleType_return p_SingleType241 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:620:9: ( p_CastExpr (kc= CASTABLE ka= AS p_SingleType )? )
            // XQueryParser.g:620:13: p_CastExpr (kc= CASTABLE ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_CastExpr_in_p_CastableExpr5580);
            p_CastExpr240=p_CastExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CastExpr240.getTree());
            // XQueryParser.g:620:24: (kc= CASTABLE ka= AS p_SingleType )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==CASTABLE) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // XQueryParser.g:620:26: kc= CASTABLE ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CASTABLE,FOLLOW_CASTABLE_in_p_CastableExpr5586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastableExpr5592); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastableExpr5596);
                    p_SingleType241=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType241.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastableExpr"

    public static class p_CastExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CastExpr"
    // XQueryParser.g:624:1: p_CastExpr : p_UnaryExpr (kc= CAST ka= AS p_SingleType )? ;
    public final XQueryParser.p_CastExpr_return p_CastExpr() throws RecognitionException {
        XQueryParser.p_CastExpr_return retval = new XQueryParser.p_CastExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken ka=null;
        XQueryParser.p_UnaryExpr_return p_UnaryExpr242 = null;

        XQueryParser.p_SingleType_return p_SingleType243 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:625:9: ( p_UnaryExpr (kc= CAST ka= AS p_SingleType )? )
            // XQueryParser.g:625:13: p_UnaryExpr (kc= CAST ka= AS p_SingleType )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_UnaryExpr_in_p_CastExpr5635);
            p_UnaryExpr242=p_UnaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnaryExpr242.getTree());
            // XQueryParser.g:625:25: (kc= CAST ka= AS p_SingleType )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==CAST) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // XQueryParser.g:625:27: kc= CAST ka= AS p_SingleType
                    {
                    kc=(CommonToken)match(input,CAST,FOLLOW_CAST_in_p_CastExpr5641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kc_tree = (XQDTCommonTree)adaptor.create(kc);
                    adaptor.addChild(root_0, kc_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kc);
                    }
                    ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CastExpr5647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }
                    pushFollow(FOLLOW_p_SingleType_in_p_CastExpr5651);
                    p_SingleType243=p_SingleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SingleType243.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CastExpr"

    public static class p_UnaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnaryExpr"
    // XQueryParser.g:629:1: p_UnaryExpr : ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) ;
    public final XQueryParser.p_UnaryExpr_return p_UnaryExpr() throws RecognitionException {
        XQueryParser.p_UnaryExpr_return retval = new XQueryParser.p_UnaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PLUS244=null;
        CommonToken MINUS245=null;
        XQueryParser.p_ValueExpr_return p_ValueExpr246 = null;


        XQDTCommonTree PLUS244_tree=null;
        XQDTCommonTree MINUS245_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleSubtreeStream stream_p_ValueExpr=new RewriteRuleSubtreeStream(adaptor,"rule p_ValueExpr");
        try {
            // XQueryParser.g:630:9: ( ( PLUS | MINUS )* p_ValueExpr -> ^( UnaryExpr ( PLUS )* p_ValueExpr ) )
            // XQueryParser.g:630:13: ( PLUS | MINUS )* p_ValueExpr
            {
            // XQueryParser.g:630:13: ( PLUS | MINUS )*
            loop105:
            do {
                int alt105=3;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==PLUS) ) {
                    alt105=1;
                }
                else if ( (LA105_0==MINUS) ) {
                    alt105=2;
                }


                switch (alt105) {
            	case 1 :
            	    // XQueryParser.g:630:14: PLUS
            	    {
            	    PLUS244=(CommonToken)match(input,PLUS,FOLLOW_PLUS_in_p_UnaryExpr5683); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_PLUS.add(PLUS244);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:630:21: MINUS
            	    {
            	    MINUS245=(CommonToken)match(input,MINUS,FOLLOW_MINUS_in_p_UnaryExpr5687); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_MINUS.add(MINUS245);


            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);

            pushFollow(FOLLOW_p_ValueExpr_in_p_UnaryExpr5691);
            p_ValueExpr246=p_ValueExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_ValueExpr.add(p_ValueExpr246.getTree());


            // AST REWRITE
            // elements: PLUS, p_ValueExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 631:17: -> ^( UnaryExpr ( PLUS )* p_ValueExpr )
            {
                // XQueryParser.g:631:20: ^( UnaryExpr ( PLUS )* p_ValueExpr )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(UnaryExpr, "UnaryExpr"), root_1);

                // XQueryParser.g:631:32: ( PLUS )*
                while ( stream_PLUS.hasNext() ) {
                    adaptor.addChild(root_1, stream_PLUS.nextNode());

                }
                stream_PLUS.reset();
                adaptor.addChild(root_1, stream_p_ValueExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnaryExpr"

    public static class p_ValueExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueExpr"
    // XQueryParser.g:638:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );
    public final XQueryParser.p_ValueExpr_return p_ValueExpr() throws RecognitionException {
        XQueryParser.p_ValueExpr_return retval = new XQueryParser.p_ValueExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ValidateExpr_return p_ValidateExpr247 = null;

        XQueryParser.p_PathExpr_return p_PathExpr248 = null;

        XQueryParser.p_ExtensionExpr_return p_ExtensionExpr249 = null;



        try {
            // XQueryParser.g:639:9: ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr )
            int alt106=3;
            alt106 = dfa106.predict(input);
            switch (alt106) {
                case 1 :
                    // XQueryParser.g:639:11: p_ValidateExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ValidateExpr_in_p_ValueExpr5747);
                    p_ValidateExpr247=p_ValidateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidateExpr247.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:640:11: p_PathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PathExpr_in_p_ValueExpr5759);
                    p_PathExpr248=p_PathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr248.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:641:11: p_ExtensionExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ExtensionExpr_in_p_ValueExpr5771);
                    p_ExtensionExpr249=p_ExtensionExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExtensionExpr249.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueExpr"

    public static class p_GeneralComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_GeneralComp"
    // XQueryParser.g:645:1: p_GeneralComp : ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ );
    public final XQueryParser.p_GeneralComp_return p_GeneralComp() throws RecognitionException {
        XQueryParser.p_GeneralComp_return retval = new XQueryParser.p_GeneralComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set250=null;

        XQDTCommonTree set250_tree=null;

        try {
            // XQueryParser.g:646:9: ( EQUAL | NOTEQUAL | SMALLER | SMALLEREQ | GREATER | GREATEREQ )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set250=(CommonToken)input.LT(1);
            if ( input.LA(1)==EQUAL||input.LA(1)==NOTEQUAL||(input.LA(1)>=SMALLER && input.LA(1)<=GREATEREQ) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set250));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_GeneralComp"

    public static class p_ValueComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValueComp"
    // XQueryParser.g:650:1: p_ValueComp : (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) ;
    public final XQueryParser.p_ValueComp_return p_ValueComp() throws RecognitionException {
        XQueryParser.p_ValueComp_return retval = new XQueryParser.p_ValueComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:651:9: ( (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE ) )
            // XQueryParser.g:651:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:651:13: (k= EQ | k= NE | k= LT | k= LE | k= GT | k= GE )
            int alt107=6;
            switch ( input.LA(1) ) {
            case EQ:
                {
                alt107=1;
                }
                break;
            case NE:
                {
                alt107=2;
                }
                break;
            case LT:
                {
                alt107=3;
                }
                break;
            case LE:
                {
                alt107=4;
                }
                break;
            case GT:
                {
                alt107=5;
                }
                break;
            case GE:
                {
                alt107=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }

            switch (alt107) {
                case 1 :
                    // XQueryParser.g:651:14: k= EQ
                    {
                    k=(CommonToken)match(input,EQ,FOLLOW_EQ_in_p_ValueComp5850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:651:21: k= NE
                    {
                    k=(CommonToken)match(input,NE,FOLLOW_NE_in_p_ValueComp5856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:651:28: k= LT
                    {
                    k=(CommonToken)match(input,LT,FOLLOW_LT_in_p_ValueComp5862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:651:35: k= LE
                    {
                    k=(CommonToken)match(input,LE,FOLLOW_LE_in_p_ValueComp5868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:651:42: k= GT
                    {
                    k=(CommonToken)match(input,GT,FOLLOW_GT_in_p_ValueComp5874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:651:49: k= GE
                    {
                    k=(CommonToken)match(input,GE,FOLLOW_GE_in_p_ValueComp5880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValueComp"

    public static class p_NodeComp_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeComp"
    // XQueryParser.g:655:1: p_NodeComp : (ki= IS | SMALLER_SMALLER | GREATER_GREATER );
    public final XQueryParser.p_NodeComp_return p_NodeComp() throws RecognitionException {
        XQueryParser.p_NodeComp_return retval = new XQueryParser.p_NodeComp_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ki=null;
        CommonToken SMALLER_SMALLER251=null;
        CommonToken GREATER_GREATER252=null;

        XQDTCommonTree ki_tree=null;
        XQDTCommonTree SMALLER_SMALLER251_tree=null;
        XQDTCommonTree GREATER_GREATER252_tree=null;

        try {
            // XQueryParser.g:656:9: (ki= IS | SMALLER_SMALLER | GREATER_GREATER )
            int alt108=3;
            switch ( input.LA(1) ) {
            case IS:
                {
                alt108=1;
                }
                break;
            case SMALLER_SMALLER:
                {
                alt108=2;
                }
                break;
            case GREATER_GREATER:
                {
                alt108=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // XQueryParser.g:656:13: ki= IS
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ki=(CommonToken)match(input,IS,FOLLOW_IS_in_p_NodeComp5913); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ki_tree = (XQDTCommonTree)adaptor.create(ki);
                    adaptor.addChild(root_0, ki_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ki);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:656:32: SMALLER_SMALLER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SMALLER_SMALLER251=(CommonToken)match(input,SMALLER_SMALLER,FOLLOW_SMALLER_SMALLER_in_p_NodeComp5919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SMALLER_SMALLER251_tree = (XQDTCommonTree)adaptor.create(SMALLER_SMALLER251);
                    adaptor.addChild(root_0, SMALLER_SMALLER251_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:656:50: GREATER_GREATER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    GREATER_GREATER252=(CommonToken)match(input,GREATER_GREATER,FOLLOW_GREATER_GREATER_in_p_NodeComp5923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER_GREATER252_tree = (XQDTCommonTree)adaptor.create(GREATER_GREATER252);
                    adaptor.addChild(root_0, GREATER_GREATER252_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeComp"

    public static class p_ValidateExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidateExpr"
    // XQueryParser.g:660:1: p_ValidateExpr : kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ValidateExpr_return p_ValidateExpr() throws RecognitionException {
        XQueryParser.p_ValidateExpr_return retval = new XQueryParser.p_ValidateExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kv=null;
        CommonToken LBRACKET254=null;
        CommonToken RBRACKET256=null;
        XQueryParser.p_ValidationMode_return p_ValidationMode253 = null;

        XQueryParser.pm_Expr_return pm_Expr255 = null;


        XQDTCommonTree kv_tree=null;
        XQDTCommonTree LBRACKET254_tree=null;
        XQDTCommonTree RBRACKET256_tree=null;

        try {
            // XQueryParser.g:661:9: (kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:661:13: kv= VALIDATE ( p_ValidationMode )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kv=(CommonToken)match(input,VALIDATE,FOLLOW_VALIDATE_in_p_ValidateExpr5953); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kv_tree = (XQDTCommonTree)adaptor.create(kv);
            adaptor.addChild(root_0, kv_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kv);
            }
            // XQueryParser.g:661:36: ( p_ValidationMode )?
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==AS||LA109_0==LAX||LA109_0==STRICT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    // XQueryParser.g:661:36: p_ValidationMode
                    {
                    pushFollow(FOLLOW_p_ValidationMode_in_p_ValidateExpr5957);
                    p_ValidationMode253=p_ValidationMode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ValidationMode253.getTree());

                    }
                    break;

            }

            LBRACKET254=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ValidateExpr5960); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET254_tree = (XQDTCommonTree)adaptor.create(LBRACKET254);
            adaptor.addChild(root_0, LBRACKET254_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ValidateExpr5962);
            pm_Expr255=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr255.getTree());
            RBRACKET256=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ValidateExpr5964); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET256_tree = (XQDTCommonTree)adaptor.create(RBRACKET256);
            adaptor.addChild(root_0, RBRACKET256_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidateExpr"

    public static class p_ValidationMode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ValidationMode"
    // XQueryParser.g:665:1: p_ValidationMode : (k= LAX | k= STRICT | (k= AS p_QName ) ) ;
    public final XQueryParser.p_ValidationMode_return p_ValidationMode() throws RecognitionException {
        XQueryParser.p_ValidationMode_return retval = new XQueryParser.p_ValidationMode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_QName_return p_QName257 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:666:9: ( (k= LAX | k= STRICT | (k= AS p_QName ) ) )
            // XQueryParser.g:666:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:666:13: (k= LAX | k= STRICT | (k= AS p_QName ) )
            int alt110=3;
            switch ( input.LA(1) ) {
            case LAX:
                {
                alt110=1;
                }
                break;
            case STRICT:
                {
                alt110=2;
                }
                break;
            case AS:
                {
                alt110=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }

            switch (alt110) {
                case 1 :
                    // XQueryParser.g:666:14: k= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_p_ValidationMode5995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:666:22: k= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_p_ValidationMode6001); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:666:33: (k= AS p_QName )
                    {
                    // XQueryParser.g:666:33: (k= AS p_QName )
                    // XQueryParser.g:666:34: k= AS p_QName
                    {
                    k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_ValidationMode6008); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    pushFollow(FOLLOW_p_QName_in_p_ValidationMode6010);
                    p_QName257=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName257.getTree());

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ValidationMode"

    public static class p_ExtensionExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExtensionExpr"
    // XQueryParser.g:670:1: p_ExtensionExpr : ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_ExtensionExpr_return p_ExtensionExpr() throws RecognitionException {
        XQueryParser.p_ExtensionExpr_return retval = new XQueryParser.p_ExtensionExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_Pragma258=null;
        CommonToken LBRACKET259=null;
        CommonToken RBRACKET261=null;
        XQueryParser.pm_Expr_return pm_Expr260 = null;


        XQDTCommonTree L_Pragma258_tree=null;
        XQDTCommonTree LBRACKET259_tree=null;
        XQDTCommonTree RBRACKET261_tree=null;

        try {
            // XQueryParser.g:671:9: ( ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:671:13: ( L_Pragma )+ LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:671:13: ( L_Pragma )+
            int cnt111=0;
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==L_Pragma) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // XQueryParser.g:671:13: L_Pragma
            	    {
            	    L_Pragma258=(CommonToken)match(input,L_Pragma,FOLLOW_L_Pragma_in_p_ExtensionExpr6042); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    L_Pragma258_tree = (XQDTCommonTree)adaptor.create(L_Pragma258);
            	    adaptor.addChild(root_0, L_Pragma258_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt111 >= 1 ) break loop111;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(111, input);
                        throw eee;
                }
                cnt111++;
            } while (true);

            LBRACKET259=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ExtensionExpr6045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET259_tree = (XQDTCommonTree)adaptor.create(LBRACKET259);
            adaptor.addChild(root_0, LBRACKET259_tree);
            }
            // XQueryParser.g:671:32: ( pm_Expr )?
            int alt112=2;
            int LA112_0 = input.LA(1);

            if ( ((LA112_0>=ANCESTOR && LA112_0<=DECIMAL_SEPARATOR)||(LA112_0>=DIGIT && LA112_0<=NEXT)||(LA112_0>=ONLY && LA112_0<=EXIT)||(LA112_0>=SEQUENTIAL && LA112_0<=MAINTAINED)||(LA112_0>=MUTABLE && LA112_0<=LPAREN)||LA112_0==DOLLAR||(LA112_0>=STAR && LA112_0<=SMALLER)||(LA112_0>=SLASH && LA112_0<=DOT_DOT)||LA112_0==ATTR_SIGN||(LA112_0>=APOS && LA112_0<=QUOT)||LA112_0==L_NCName||(LA112_0>=L_Pragma && LA112_0<=L_DoubleLiteral)||LA112_0==EXPLICITLY) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    // XQueryParser.g:671:32: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ExtensionExpr6047);
                    pm_Expr260=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr260.getTree());

                    }
                    break;

            }

            RBRACKET261=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ExtensionExpr6050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET261_tree = (XQDTCommonTree)adaptor.create(RBRACKET261);
            adaptor.addChild(root_0, RBRACKET261_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExtensionExpr"

    public static class p_PathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PathExpr"
    // XQueryParser.g:682:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );
    public final XQueryParser.p_PathExpr_return p_PathExpr() throws RecognitionException {
        XQueryParser.p_PathExpr_return retval = new XQueryParser.p_PathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SLASH262=null;
        CommonToken SLASH264=null;
        CommonToken SLASH_SLASH265=null;
        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr263 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr266 = null;

        XQueryParser.p_RelativePathExpr_return p_RelativePathExpr267 = null;


        XQDTCommonTree SLASH262_tree=null;
        XQDTCommonTree SLASH264_tree=null;
        XQDTCommonTree SLASH_SLASH265_tree=null;

        try {
            // XQueryParser.g:683:9: ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr )
            int alt113=4;
            alt113 = dfa113.predict(input);
            switch (alt113) {
                case 1 :
                    // XQueryParser.g:683:11: ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:683:41: ( SLASH p_RelativePathExpr )
                    // XQueryParser.g:683:42: SLASH p_RelativePathExpr
                    {
                    SLASH262=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH262_tree = (XQDTCommonTree)adaptor.create(SLASH262);
                    adaptor.addChild(root_0, SLASH262_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6094);
                    p_RelativePathExpr263=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr263.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:684:11: SLASH
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH264=(CommonToken)match(input,SLASH,FOLLOW_SLASH_in_p_PathExpr6107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH264_tree = (XQDTCommonTree)adaptor.create(SLASH264);
                    adaptor.addChild(root_0, SLASH264_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:685:11: SLASH_SLASH p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SLASH_SLASH265=(CommonToken)match(input,SLASH_SLASH,FOLLOW_SLASH_SLASH_in_p_PathExpr6119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH_SLASH265_tree = (XQDTCommonTree)adaptor.create(SLASH_SLASH265);
                    adaptor.addChild(root_0, SLASH_SLASH265_tree);
                    }
                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6121);
                    p_RelativePathExpr266=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr266.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:686:11: p_RelativePathExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_RelativePathExpr_in_p_PathExpr6133);
                    p_RelativePathExpr267=p_RelativePathExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_RelativePathExpr267.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PathExpr"

    public static class p_RelativePathExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RelativePathExpr"
    // XQueryParser.g:690:1: p_RelativePathExpr : p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* ;
    public final XQueryParser.p_RelativePathExpr_return p_RelativePathExpr() throws RecognitionException {
        XQueryParser.p_RelativePathExpr_return retval = new XQueryParser.p_RelativePathExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set269=null;
        XQueryParser.p_StepExpr_return p_StepExpr268 = null;

        XQueryParser.p_StepExpr_return p_StepExpr270 = null;


        XQDTCommonTree set269_tree=null;

        try {
            // XQueryParser.g:691:9: ( p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )* )
            // XQueryParser.g:691:11: p_StepExpr ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6161);
            p_StepExpr268=p_StepExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr268.getTree());
            // XQueryParser.g:691:22: ( ( SLASH | SLASH_SLASH ) p_StepExpr )*
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);

                if ( ((LA114_0>=SLASH && LA114_0<=SLASH_SLASH)) ) {
                    alt114=1;
                }


                switch (alt114) {
            	case 1 :
            	    // XQueryParser.g:691:23: ( SLASH | SLASH_SLASH ) p_StepExpr
            	    {
            	    set269=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=SLASH && input.LA(1)<=SLASH_SLASH) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set269));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    pushFollow(FOLLOW_p_StepExpr_in_p_RelativePathExpr6172);
            	    p_StepExpr270=p_StepExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StepExpr270.getTree());

            	    }
            	    break;

            	default :
            	    break loop114;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RelativePathExpr"

    public static class p_StepExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StepExpr"
    // XQueryParser.g:695:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );
    public final XQueryParser.p_StepExpr_return p_StepExpr() throws RecognitionException {
        XQueryParser.p_StepExpr_return retval = new XQueryParser.p_StepExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AxisStep_return p_AxisStep271 = null;

        XQueryParser.p_FilterExpr_return p_FilterExpr272 = null;



        try {
            // XQueryParser.g:696:9: ( p_AxisStep | p_FilterExpr )
            int alt115=2;
            alt115 = dfa115.predict(input);
            switch (alt115) {
                case 1 :
                    // XQueryParser.g:696:11: p_AxisStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AxisStep_in_p_StepExpr6200);
                    p_AxisStep271=p_AxisStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AxisStep271.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:697:11: p_FilterExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FilterExpr_in_p_StepExpr6212);
                    p_FilterExpr272=p_FilterExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FilterExpr272.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StepExpr"

    public static class p_AxisStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AxisStep"
    // XQueryParser.g:701:1: p_AxisStep : ( p_ReverseStep | p_ForwardStep ) p_PredicateList ;
    public final XQueryParser.p_AxisStep_return p_AxisStep() throws RecognitionException {
        XQueryParser.p_AxisStep_return retval = new XQueryParser.p_AxisStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseStep_return p_ReverseStep273 = null;

        XQueryParser.p_ForwardStep_return p_ForwardStep274 = null;

        XQueryParser.p_PredicateList_return p_PredicateList275 = null;



        try {
            // XQueryParser.g:702:9: ( ( p_ReverseStep | p_ForwardStep ) p_PredicateList )
            // XQueryParser.g:702:11: ( p_ReverseStep | p_ForwardStep ) p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:702:11: ( p_ReverseStep | p_ForwardStep )
            int alt116=2;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==COLON_COLON) ) {
                    alt116=1;
                }
                else if ( (LA116_1==EOF||(LA116_1>=AND && LA116_1<=ASCENDING)||(LA116_1>=BY && LA116_1<=CASTABLE)||LA116_1==COLLATION||LA116_1==DEFAULT||(LA116_1>=DESCENDING && LA116_1<=DIV)||(LA116_1>=ELSE && LA116_1<=EMPTY)||LA116_1==EQ||LA116_1==EXCEPT||LA116_1==FOR||LA116_1==GE||(LA116_1>=GT && LA116_1<=IDIV)||(LA116_1>=INSTANCE && LA116_1<=IS)||LA116_1==LE||(LA116_1>=LET && LA116_1<=MOD)||LA116_1==NE||(LA116_1>=OR && LA116_1<=ORDER)||(LA116_1>=RETURN && LA116_1<=SATISFIES)||LA116_1==STABLE||(LA116_1>=TO && LA116_1<=TREAT)||LA116_1==UNION||LA116_1==WHERE||LA116_1==COUNT||(LA116_1>=END && LA116_1<=GROUP)||LA116_1==ONLY||LA116_1==START||(LA116_1>=AFTER && LA116_1<=BEFORE)||LA116_1==INTO||LA116_1==MODIFY||LA116_1==WITH||LA116_1==RPAREN||(LA116_1>=RBRACKET && LA116_1<=EQUAL)||LA116_1==NOTEQUAL||LA116_1==COMMA||(LA116_1>=STAR && LA116_1<=SLASH_SLASH)||LA116_1==COLON||(LA116_1>=SEMICOLON && LA116_1<=VBAR)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR:
                {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==COLON_COLON) ) {
                    alt116=1;
                }
                else if ( (LA116_2==EOF||(LA116_2>=AND && LA116_2<=ASCENDING)||(LA116_2>=BY && LA116_2<=CASTABLE)||LA116_2==COLLATION||LA116_2==DEFAULT||(LA116_2>=DESCENDING && LA116_2<=DIV)||(LA116_2>=ELSE && LA116_2<=EMPTY)||LA116_2==EQ||LA116_2==EXCEPT||LA116_2==FOR||LA116_2==GE||(LA116_2>=GT && LA116_2<=IDIV)||(LA116_2>=INSTANCE && LA116_2<=IS)||LA116_2==LE||(LA116_2>=LET && LA116_2<=MOD)||LA116_2==NE||(LA116_2>=OR && LA116_2<=ORDER)||(LA116_2>=RETURN && LA116_2<=SATISFIES)||LA116_2==STABLE||(LA116_2>=TO && LA116_2<=TREAT)||LA116_2==UNION||LA116_2==WHERE||LA116_2==COUNT||(LA116_2>=END && LA116_2<=GROUP)||LA116_2==ONLY||LA116_2==START||(LA116_2>=AFTER && LA116_2<=BEFORE)||LA116_2==INTO||LA116_2==MODIFY||LA116_2==WITH||LA116_2==RPAREN||(LA116_2>=RBRACKET && LA116_2<=EQUAL)||LA116_2==NOTEQUAL||LA116_2==COMMA||(LA116_2>=STAR && LA116_2<=SLASH_SLASH)||LA116_2==COLON||(LA116_2>=SEMICOLON && LA116_2<=VBAR)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING_SIBLING:
                {
                int LA116_3 = input.LA(2);

                if ( (LA116_3==COLON_COLON) ) {
                    alt116=1;
                }
                else if ( (LA116_3==EOF||(LA116_3>=AND && LA116_3<=ASCENDING)||(LA116_3>=BY && LA116_3<=CASTABLE)||LA116_3==COLLATION||LA116_3==DEFAULT||(LA116_3>=DESCENDING && LA116_3<=DIV)||(LA116_3>=ELSE && LA116_3<=EMPTY)||LA116_3==EQ||LA116_3==EXCEPT||LA116_3==FOR||LA116_3==GE||(LA116_3>=GT && LA116_3<=IDIV)||(LA116_3>=INSTANCE && LA116_3<=IS)||LA116_3==LE||(LA116_3>=LET && LA116_3<=MOD)||LA116_3==NE||(LA116_3>=OR && LA116_3<=ORDER)||(LA116_3>=RETURN && LA116_3<=SATISFIES)||LA116_3==STABLE||(LA116_3>=TO && LA116_3<=TREAT)||LA116_3==UNION||LA116_3==WHERE||LA116_3==COUNT||(LA116_3>=END && LA116_3<=GROUP)||LA116_3==ONLY||LA116_3==START||(LA116_3>=AFTER && LA116_3<=BEFORE)||LA116_3==INTO||LA116_3==MODIFY||LA116_3==WITH||LA116_3==RPAREN||(LA116_3>=RBRACKET && LA116_3<=EQUAL)||LA116_3==NOTEQUAL||LA116_3==COMMA||(LA116_3>=STAR && LA116_3<=SLASH_SLASH)||LA116_3==COLON||(LA116_3>=SEMICOLON && LA116_3<=VBAR)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 3, input);

                    throw nvae;
                }
                }
                break;
            case PRECEDING:
                {
                int LA116_4 = input.LA(2);

                if ( (LA116_4==COLON_COLON) ) {
                    alt116=1;
                }
                else if ( (LA116_4==EOF||(LA116_4>=AND && LA116_4<=ASCENDING)||(LA116_4>=BY && LA116_4<=CASTABLE)||LA116_4==COLLATION||LA116_4==DEFAULT||(LA116_4>=DESCENDING && LA116_4<=DIV)||(LA116_4>=ELSE && LA116_4<=EMPTY)||LA116_4==EQ||LA116_4==EXCEPT||LA116_4==FOR||LA116_4==GE||(LA116_4>=GT && LA116_4<=IDIV)||(LA116_4>=INSTANCE && LA116_4<=IS)||LA116_4==LE||(LA116_4>=LET && LA116_4<=MOD)||LA116_4==NE||(LA116_4>=OR && LA116_4<=ORDER)||(LA116_4>=RETURN && LA116_4<=SATISFIES)||LA116_4==STABLE||(LA116_4>=TO && LA116_4<=TREAT)||LA116_4==UNION||LA116_4==WHERE||LA116_4==COUNT||(LA116_4>=END && LA116_4<=GROUP)||LA116_4==ONLY||LA116_4==START||(LA116_4>=AFTER && LA116_4<=BEFORE)||LA116_4==INTO||LA116_4==MODIFY||LA116_4==WITH||LA116_4==RPAREN||(LA116_4>=RBRACKET && LA116_4<=EQUAL)||LA116_4==NOTEQUAL||LA116_4==COMMA||(LA116_4>=STAR && LA116_4<=SLASH_SLASH)||LA116_4==COLON||(LA116_4>=SEMICOLON && LA116_4<=VBAR)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 4, input);

                    throw nvae;
                }
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                int LA116_5 = input.LA(2);

                if ( (LA116_5==COLON_COLON) ) {
                    alt116=1;
                }
                else if ( (LA116_5==EOF||(LA116_5>=AND && LA116_5<=ASCENDING)||(LA116_5>=BY && LA116_5<=CASTABLE)||LA116_5==COLLATION||LA116_5==DEFAULT||(LA116_5>=DESCENDING && LA116_5<=DIV)||(LA116_5>=ELSE && LA116_5<=EMPTY)||LA116_5==EQ||LA116_5==EXCEPT||LA116_5==FOR||LA116_5==GE||(LA116_5>=GT && LA116_5<=IDIV)||(LA116_5>=INSTANCE && LA116_5<=IS)||LA116_5==LE||(LA116_5>=LET && LA116_5<=MOD)||LA116_5==NE||(LA116_5>=OR && LA116_5<=ORDER)||(LA116_5>=RETURN && LA116_5<=SATISFIES)||LA116_5==STABLE||(LA116_5>=TO && LA116_5<=TREAT)||LA116_5==UNION||LA116_5==WHERE||LA116_5==COUNT||(LA116_5>=END && LA116_5<=GROUP)||LA116_5==ONLY||LA116_5==START||(LA116_5>=AFTER && LA116_5<=BEFORE)||LA116_5==INTO||LA116_5==MODIFY||LA116_5==WITH||LA116_5==RPAREN||(LA116_5>=RBRACKET && LA116_5<=EQUAL)||LA116_5==NOTEQUAL||LA116_5==COMMA||(LA116_5>=STAR && LA116_5<=SLASH_SLASH)||LA116_5==COLON||(LA116_5>=SEMICOLON && LA116_5<=VBAR)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 5, input);

                    throw nvae;
                }
                }
                break;
            case DOT_DOT:
                {
                alt116=1;
                }
                break;
            case AND:
            case AS:
            case ASCENDING:
            case AT:
            case ATTRIBUTE:
            case BASE_URI:
            case BOUNDARY_SPACE:
            case BY:
            case CASE:
            case CAST:
            case CASTABLE:
            case CHILD:
            case COLLATION:
            case COMMENT:
            case CONSTRUCTION:
            case COPY_NAMESPACES:
            case DECLARE:
            case DEFAULT:
            case DESCENDANT:
            case DESCENDANT_OR_SELF:
            case DESCENDING:
            case DIV:
            case DOCUMENT:
            case DOCUMENT_NODE:
            case ELEMENT:
            case ELSE:
            case EMPTY:
            case EMPTY_SEQUENCE:
            case ENCODING:
            case EQ:
            case EVERY:
            case EXCEPT:
            case EXTERNAL:
            case FOLLOWING:
            case FOLLOWING_SIBLING:
            case FOR:
            case FUNCTION:
            case GE:
            case GREATEST:
            case GT:
            case IDIV:
            case IF:
            case IMPORT:
            case IN:
            case INHERIT:
            case INSTANCE:
            case INTERSECT:
            case IS:
            case ITEM:
            case LAX:
            case LE:
            case LEAST:
            case LET:
            case LT:
            case MOD:
            case MODULE:
            case NAMESPACE:
            case NE:
            case NO_INHERIT:
            case NO_PRESERVE:
            case NODE:
            case OF:
            case OPTION:
            case OR:
            case ORDER:
            case ORDERED:
            case ORDERING:
            case PRESERVE:
            case PROCESSING_INSTRUCTION:
            case RETURN:
            case SATISFIES:
            case SCHEMA:
            case SCHEMA_ATTRIBUTE:
            case SCHEMA_ELEMENT:
            case SELF:
            case SOME:
            case STABLE:
            case STRICT:
            case STRIP:
            case TEXT:
            case THEN:
            case TO:
            case TREAT:
            case TYPESWITCH:
            case UNION:
            case UNORDERED:
            case VALIDATE:
            case VARIABLE:
            case VERSION:
            case WHERE:
            case XQUERY:
            case CATCH:
            case CONTEXT:
            case COUNT:
            case DECIMAL_FORMAT:
            case DECIMAL_SEPARATOR:
            case DIGIT:
            case END:
            case GROUP:
            case GROUPING_SEPARATOR:
            case INFINITY:
            case MINUS_SIGN:
            case NAMESPACE_NODE:
            case NAN:
            case NEXT:
            case ONLY:
            case OUTER:
            case PATTERN_SEPARATOR:
            case PERCENT:
            case PER_MILLE:
            case PRIVATE:
            case PUBLIC:
            case PREVIOUS:
            case SLIDING:
            case START:
            case TRY:
            case TUMBLING:
            case WHEN:
            case WINDOW:
            case ZERO_DIGIT:
            case AFTER:
            case BEFORE:
            case COPY:
            case DELETE:
            case FIRST:
            case INSERT:
            case INTO:
            case LAST:
            case MODIFY:
            case NODES:
            case RENAME:
            case REPLACE:
            case REVALIDATION:
            case SKIP:
            case UPDATING:
            case VALUE:
            case WITH:
            case BLOCK:
            case CONSTANT:
            case EXIT:
            case SEQUENTIAL:
            case SET:
            case SIMPLE:
            case WHILE:
            case EVAL:
            case USING:
            case APPEND_ONLY:
            case AUTOMATICALLY:
            case CHECK:
            case COLLECTION:
            case CONSTRAINT:
            case CONST:
            case EQUALITY:
            case FOREACH:
            case FOREIGN:
            case FROM:
            case INDEX:
            case INTEGRITY:
            case KEY:
            case MAINTAINED:
            case MUTABLE:
            case NON:
            case ON:
            case QUEUE:
            case RANGE:
            case READ_ONLY:
            case UNIQUE:
            case BINARY:
            case AMP_ER:
            case APOS_ER:
            case QUOT_ER:
            case STAR:
            case ATTR_SIGN:
            case L_NCName:
            case EXPLICITLY:
                {
                alt116=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // XQueryParser.g:702:12: p_ReverseStep
                    {
                    pushFollow(FOLLOW_p_ReverseStep_in_p_AxisStep6239);
                    p_ReverseStep273=p_ReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseStep273.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:702:28: p_ForwardStep
                    {
                    pushFollow(FOLLOW_p_ForwardStep_in_p_AxisStep6243);
                    p_ForwardStep274=p_ForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardStep274.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_p_PredicateList_in_p_AxisStep6246);
            p_PredicateList275=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList275.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AxisStep"

    public static class p_ForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardStep"
    // XQueryParser.g:706:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );
    public final XQueryParser.p_ForwardStep_return p_ForwardStep() throws RecognitionException {
        XQueryParser.p_ForwardStep_return retval = new XQueryParser.p_ForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ForwardAxis_return p_ForwardAxis276 = null;

        XQueryParser.p_NodeTest_return p_NodeTest277 = null;

        XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep278 = null;



        try {
            // XQueryParser.g:707:9: ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep )
            int alt117=2;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // XQueryParser.g:707:11: ( p_ForwardAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:707:11: ( p_ForwardAxis p_NodeTest )
                    // XQueryParser.g:707:12: p_ForwardAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ForwardAxis_in_p_ForwardStep6273);
                    p_ForwardAxis276=p_ForwardAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ForwardAxis276.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ForwardStep6275);
                    p_NodeTest277=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest277.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:707:40: p_AbbrevForwardStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6280);
                    p_AbbrevForwardStep278=p_AbbrevForwardStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevForwardStep278.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardStep"

    public static class p_ForwardAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ForwardAxis"
    // XQueryParser.g:711:1: p_ForwardAxis : ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON );
    public final XQueryParser.p_ForwardAxis_return p_ForwardAxis() throws RecognitionException {
        XQueryParser.p_ForwardAxis_return retval = new XQueryParser.p_ForwardAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken CHILD279=null;
        CommonToken COLON_COLON280=null;
        CommonToken DESCENDANT281=null;
        CommonToken COLON_COLON282=null;
        CommonToken ATTRIBUTE283=null;
        CommonToken COLON_COLON284=null;
        CommonToken SELF285=null;
        CommonToken COLON_COLON286=null;
        CommonToken DESCENDANT_OR_SELF287=null;
        CommonToken COLON_COLON288=null;
        CommonToken FOLLOWING_SIBLING289=null;
        CommonToken COLON_COLON290=null;
        CommonToken FOLLOWING291=null;
        CommonToken COLON_COLON292=null;

        XQDTCommonTree CHILD279_tree=null;
        XQDTCommonTree COLON_COLON280_tree=null;
        XQDTCommonTree DESCENDANT281_tree=null;
        XQDTCommonTree COLON_COLON282_tree=null;
        XQDTCommonTree ATTRIBUTE283_tree=null;
        XQDTCommonTree COLON_COLON284_tree=null;
        XQDTCommonTree SELF285_tree=null;
        XQDTCommonTree COLON_COLON286_tree=null;
        XQDTCommonTree DESCENDANT_OR_SELF287_tree=null;
        XQDTCommonTree COLON_COLON288_tree=null;
        XQDTCommonTree FOLLOWING_SIBLING289_tree=null;
        XQDTCommonTree COLON_COLON290_tree=null;
        XQDTCommonTree FOLLOWING291_tree=null;
        XQDTCommonTree COLON_COLON292_tree=null;

        try {
            // XQueryParser.g:712:9: ( CHILD COLON_COLON | DESCENDANT COLON_COLON | ATTRIBUTE COLON_COLON | SELF COLON_COLON | DESCENDANT_OR_SELF COLON_COLON | FOLLOWING_SIBLING COLON_COLON | FOLLOWING COLON_COLON )
            int alt118=7;
            switch ( input.LA(1) ) {
            case CHILD:
                {
                alt118=1;
                }
                break;
            case DESCENDANT:
                {
                alt118=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt118=3;
                }
                break;
            case SELF:
                {
                alt118=4;
                }
                break;
            case DESCENDANT_OR_SELF:
                {
                alt118=5;
                }
                break;
            case FOLLOWING_SIBLING:
                {
                alt118=6;
                }
                break;
            case FOLLOWING:
                {
                alt118=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 118, 0, input);

                throw nvae;
            }

            switch (alt118) {
                case 1 :
                    // XQueryParser.g:712:11: CHILD COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    CHILD279=(CommonToken)match(input,CHILD,FOLLOW_CHILD_in_p_ForwardAxis6306); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CHILD279_tree = (XQDTCommonTree)adaptor.create(CHILD279);
                    adaptor.addChild(root_0, CHILD279_tree);
                    }
                    COLON_COLON280=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON280_tree = (XQDTCommonTree)adaptor.create(COLON_COLON280);
                    adaptor.addChild(root_0, COLON_COLON280_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:713:11: DESCENDANT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT281=(CommonToken)match(input,DESCENDANT,FOLLOW_DESCENDANT_in_p_ForwardAxis6320); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT281_tree = (XQDTCommonTree)adaptor.create(DESCENDANT281);
                    adaptor.addChild(root_0, DESCENDANT281_tree);
                    }
                    COLON_COLON282=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6322); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON282_tree = (XQDTCommonTree)adaptor.create(COLON_COLON282);
                    adaptor.addChild(root_0, COLON_COLON282_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:714:11: ATTRIBUTE COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ATTRIBUTE283=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_ForwardAxis6334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTRIBUTE283_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE283);
                    adaptor.addChild(root_0, ATTRIBUTE283_tree);
                    }
                    COLON_COLON284=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6336); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON284_tree = (XQDTCommonTree)adaptor.create(COLON_COLON284);
                    adaptor.addChild(root_0, COLON_COLON284_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:715:11: SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    SELF285=(CommonToken)match(input,SELF,FOLLOW_SELF_in_p_ForwardAxis6348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SELF285_tree = (XQDTCommonTree)adaptor.create(SELF285);
                    adaptor.addChild(root_0, SELF285_tree);
                    }
                    COLON_COLON286=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON286_tree = (XQDTCommonTree)adaptor.create(COLON_COLON286);
                    adaptor.addChild(root_0, COLON_COLON286_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:716:11: DESCENDANT_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    DESCENDANT_OR_SELF287=(CommonToken)match(input,DESCENDANT_OR_SELF,FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DESCENDANT_OR_SELF287_tree = (XQDTCommonTree)adaptor.create(DESCENDANT_OR_SELF287);
                    adaptor.addChild(root_0, DESCENDANT_OR_SELF287_tree);
                    }
                    COLON_COLON288=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON288_tree = (XQDTCommonTree)adaptor.create(COLON_COLON288);
                    adaptor.addChild(root_0, COLON_COLON288_tree);
                    }

                    }
                    break;
                case 6 :
                    // XQueryParser.g:717:11: FOLLOWING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING_SIBLING289=(CommonToken)match(input,FOLLOWING_SIBLING,FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6376); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING_SIBLING289_tree = (XQDTCommonTree)adaptor.create(FOLLOWING_SIBLING289);
                    adaptor.addChild(root_0, FOLLOWING_SIBLING289_tree);
                    }
                    COLON_COLON290=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON290_tree = (XQDTCommonTree)adaptor.create(COLON_COLON290);
                    adaptor.addChild(root_0, COLON_COLON290_tree);
                    }

                    }
                    break;
                case 7 :
                    // XQueryParser.g:718:11: FOLLOWING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    FOLLOWING291=(CommonToken)match(input,FOLLOWING,FOLLOW_FOLLOWING_in_p_ForwardAxis6390); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FOLLOWING291_tree = (XQDTCommonTree)adaptor.create(FOLLOWING291);
                    adaptor.addChild(root_0, FOLLOWING291_tree);
                    }
                    COLON_COLON292=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ForwardAxis6392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON292_tree = (XQDTCommonTree)adaptor.create(COLON_COLON292);
                    adaptor.addChild(root_0, COLON_COLON292_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ForwardAxis"

    public static class p_AbbrevForwardStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevForwardStep"
    // XQueryParser.g:722:1: p_AbbrevForwardStep : ( ATTR_SIGN )? p_NodeTest ;
    public final XQueryParser.p_AbbrevForwardStep_return p_AbbrevForwardStep() throws RecognitionException {
        XQueryParser.p_AbbrevForwardStep_return retval = new XQueryParser.p_AbbrevForwardStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTR_SIGN293=null;
        XQueryParser.p_NodeTest_return p_NodeTest294 = null;


        XQDTCommonTree ATTR_SIGN293_tree=null;

        try {
            // XQueryParser.g:723:9: ( ( ATTR_SIGN )? p_NodeTest )
            // XQueryParser.g:723:11: ( ATTR_SIGN )? p_NodeTest
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:723:11: ( ATTR_SIGN )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==ATTR_SIGN) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // XQueryParser.g:723:11: ATTR_SIGN
                    {
                    ATTR_SIGN293=(CommonToken)match(input,ATTR_SIGN,FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ATTR_SIGN293_tree = (XQDTCommonTree)adaptor.create(ATTR_SIGN293);
                    adaptor.addChild(root_0, ATTR_SIGN293_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6421);
            p_NodeTest294=p_NodeTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest294.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevForwardStep"

    public static class p_ReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseStep"
    // XQueryParser.g:727:1: p_ReverseStep : ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep );
    public final XQueryParser.p_ReverseStep_return p_ReverseStep() throws RecognitionException {
        XQueryParser.p_ReverseStep_return retval = new XQueryParser.p_ReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ReverseAxis_return p_ReverseAxis295 = null;

        XQueryParser.p_NodeTest_return p_NodeTest296 = null;

        XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep297 = null;



        try {
            // XQueryParser.g:728:9: ( ( p_ReverseAxis p_NodeTest ) | p_AbbrevReverseStep )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( ((LA120_0>=ANCESTOR && LA120_0<=ANCESTOR_OR_SELF)||(LA120_0>=PARENT && LA120_0<=PRECEDING_SIBLING)) ) {
                alt120=1;
            }
            else if ( (LA120_0==DOT_DOT) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // XQueryParser.g:728:11: ( p_ReverseAxis p_NodeTest )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:728:11: ( p_ReverseAxis p_NodeTest )
                    // XQueryParser.g:728:12: p_ReverseAxis p_NodeTest
                    {
                    pushFollow(FOLLOW_p_ReverseAxis_in_p_ReverseStep6448);
                    p_ReverseAxis295=p_ReverseAxis();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ReverseAxis295.getTree());
                    pushFollow(FOLLOW_p_NodeTest_in_p_ReverseStep6450);
                    p_NodeTest296=p_NodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeTest296.getTree());

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:728:40: p_AbbrevReverseStep
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6455);
                    p_AbbrevReverseStep297=p_AbbrevReverseStep();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AbbrevReverseStep297.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseStep"

    public static class p_ReverseAxis_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReverseAxis"
    // XQueryParser.g:732:1: p_ReverseAxis : ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON );
    public final XQueryParser.p_ReverseAxis_return p_ReverseAxis() throws RecognitionException {
        XQueryParser.p_ReverseAxis_return retval = new XQueryParser.p_ReverseAxis_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PARENT298=null;
        CommonToken COLON_COLON299=null;
        CommonToken ANCESTOR300=null;
        CommonToken COLON_COLON301=null;
        CommonToken PRECEDING_SIBLING302=null;
        CommonToken COLON_COLON303=null;
        CommonToken PRECEDING304=null;
        CommonToken COLON_COLON305=null;
        CommonToken ANCESTOR_OR_SELF306=null;
        CommonToken COLON_COLON307=null;

        XQDTCommonTree PARENT298_tree=null;
        XQDTCommonTree COLON_COLON299_tree=null;
        XQDTCommonTree ANCESTOR300_tree=null;
        XQDTCommonTree COLON_COLON301_tree=null;
        XQDTCommonTree PRECEDING_SIBLING302_tree=null;
        XQDTCommonTree COLON_COLON303_tree=null;
        XQDTCommonTree PRECEDING304_tree=null;
        XQDTCommonTree COLON_COLON305_tree=null;
        XQDTCommonTree ANCESTOR_OR_SELF306_tree=null;
        XQDTCommonTree COLON_COLON307_tree=null;

        try {
            // XQueryParser.g:733:9: ( PARENT COLON_COLON | ANCESTOR COLON_COLON | PRECEDING_SIBLING COLON_COLON | PRECEDING COLON_COLON | ANCESTOR_OR_SELF COLON_COLON )
            int alt121=5;
            switch ( input.LA(1) ) {
            case PARENT:
                {
                alt121=1;
                }
                break;
            case ANCESTOR:
                {
                alt121=2;
                }
                break;
            case PRECEDING_SIBLING:
                {
                alt121=3;
                }
                break;
            case PRECEDING:
                {
                alt121=4;
                }
                break;
            case ANCESTOR_OR_SELF:
                {
                alt121=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }

            switch (alt121) {
                case 1 :
                    // XQueryParser.g:733:11: PARENT COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PARENT298=(CommonToken)match(input,PARENT,FOLLOW_PARENT_in_p_ReverseAxis6481); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARENT298_tree = (XQDTCommonTree)adaptor.create(PARENT298);
                    adaptor.addChild(root_0, PARENT298_tree);
                    }
                    COLON_COLON299=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON299_tree = (XQDTCommonTree)adaptor.create(COLON_COLON299);
                    adaptor.addChild(root_0, COLON_COLON299_tree);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:734:11: ANCESTOR COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR300=(CommonToken)match(input,ANCESTOR,FOLLOW_ANCESTOR_in_p_ReverseAxis6495); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR300_tree = (XQDTCommonTree)adaptor.create(ANCESTOR300);
                    adaptor.addChild(root_0, ANCESTOR300_tree);
                    }
                    COLON_COLON301=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6497); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON301_tree = (XQDTCommonTree)adaptor.create(COLON_COLON301);
                    adaptor.addChild(root_0, COLON_COLON301_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:735:11: PRECEDING_SIBLING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING_SIBLING302=(CommonToken)match(input,PRECEDING_SIBLING,FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6509); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING_SIBLING302_tree = (XQDTCommonTree)adaptor.create(PRECEDING_SIBLING302);
                    adaptor.addChild(root_0, PRECEDING_SIBLING302_tree);
                    }
                    COLON_COLON303=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6511); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON303_tree = (XQDTCommonTree)adaptor.create(COLON_COLON303);
                    adaptor.addChild(root_0, COLON_COLON303_tree);
                    }

                    }
                    break;
                case 4 :
                    // XQueryParser.g:736:11: PRECEDING COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    PRECEDING304=(CommonToken)match(input,PRECEDING,FOLLOW_PRECEDING_in_p_ReverseAxis6523); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRECEDING304_tree = (XQDTCommonTree)adaptor.create(PRECEDING304);
                    adaptor.addChild(root_0, PRECEDING304_tree);
                    }
                    COLON_COLON305=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON305_tree = (XQDTCommonTree)adaptor.create(COLON_COLON305);
                    adaptor.addChild(root_0, COLON_COLON305_tree);
                    }

                    }
                    break;
                case 5 :
                    // XQueryParser.g:737:11: ANCESTOR_OR_SELF COLON_COLON
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ANCESTOR_OR_SELF306=(CommonToken)match(input,ANCESTOR_OR_SELF,FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6537); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ANCESTOR_OR_SELF306_tree = (XQDTCommonTree)adaptor.create(ANCESTOR_OR_SELF306);
                    adaptor.addChild(root_0, ANCESTOR_OR_SELF306_tree);
                    }
                    COLON_COLON307=(CommonToken)match(input,COLON_COLON,FOLLOW_COLON_COLON_in_p_ReverseAxis6539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON_COLON307_tree = (XQDTCommonTree)adaptor.create(COLON_COLON307);
                    adaptor.addChild(root_0, COLON_COLON307_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReverseAxis"

    public static class p_AbbrevReverseStep_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AbbrevReverseStep"
    // XQueryParser.g:741:1: p_AbbrevReverseStep : DOT_DOT ;
    public final XQueryParser.p_AbbrevReverseStep_return p_AbbrevReverseStep() throws RecognitionException {
        XQueryParser.p_AbbrevReverseStep_return retval = new XQueryParser.p_AbbrevReverseStep_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT_DOT308=null;

        XQDTCommonTree DOT_DOT308_tree=null;

        try {
            // XQueryParser.g:742:9: ( DOT_DOT )
            // XQueryParser.g:742:11: DOT_DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT_DOT308=(CommonToken)match(input,DOT_DOT,FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6565); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT_DOT308_tree = (XQDTCommonTree)adaptor.create(DOT_DOT308);
            adaptor.addChild(root_0, DOT_DOT308_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AbbrevReverseStep"

    public static class p_NodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeTest"
    // XQueryParser.g:746:1: p_NodeTest : ( p_KindTest | p_NameTest );
    public final XQueryParser.p_NodeTest_return p_NodeTest() throws RecognitionException {
        XQueryParser.p_NodeTest_return retval = new XQueryParser.p_NodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_KindTest_return p_KindTest309 = null;

        XQueryParser.p_NameTest_return p_NameTest310 = null;



        try {
            // XQueryParser.g:747:9: ( p_KindTest | p_NameTest )
            int alt122=2;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // XQueryParser.g:747:11: p_KindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_KindTest_in_p_NodeTest6591);
                    p_KindTest309=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest309.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:747:24: p_NameTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_NodeTest6595);
                    p_NameTest310=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest310.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeTest"

    public static class p_NameTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NameTest"
    // XQueryParser.g:751:1: p_NameTest : ( p_QName | p_Wildcard );
    public final XQueryParser.p_NameTest_return p_NameTest() throws RecognitionException {
        XQueryParser.p_NameTest_return retval = new XQueryParser.p_NameTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName311 = null;

        XQueryParser.p_Wildcard_return p_Wildcard312 = null;



        try {
            // XQueryParser.g:752:9: ( p_QName | p_Wildcard )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( ((LA123_0>=ANCESTOR && LA123_0<=DECIMAL_SEPARATOR)||(LA123_0>=DIGIT && LA123_0<=NEXT)||(LA123_0>=ONLY && LA123_0<=EXIT)||(LA123_0>=SEQUENTIAL && LA123_0<=MAINTAINED)||(LA123_0>=MUTABLE && LA123_0<=QUOT_ER)||LA123_0==L_NCName||LA123_0==EXPLICITLY) ) {
                int LA123_1 = input.LA(2);

                if ( (LA123_1==COLON) ) {
                    int LA123_3 = input.LA(3);

                    if ( (LA123_3==STAR) ) {
                        alt123=2;
                    }
                    else if ( ((LA123_3>=ANCESTOR && LA123_3<=DECIMAL_SEPARATOR)||(LA123_3>=DIGIT && LA123_3<=NEXT)||(LA123_3>=ONLY && LA123_3<=EXIT)||(LA123_3>=SEQUENTIAL && LA123_3<=MAINTAINED)||(LA123_3>=MUTABLE && LA123_3<=QUOT_ER)||LA123_3==L_NCName||LA123_3==EXPLICITLY) ) {
                        alt123=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 123, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA123_1==EOF||(LA123_1>=AND && LA123_1<=ASCENDING)||(LA123_1>=BY && LA123_1<=CASTABLE)||LA123_1==COLLATION||LA123_1==DEFAULT||(LA123_1>=DESCENDING && LA123_1<=DIV)||(LA123_1>=ELSE && LA123_1<=EMPTY)||LA123_1==EQ||LA123_1==EXCEPT||LA123_1==FOR||LA123_1==GE||(LA123_1>=GT && LA123_1<=IDIV)||(LA123_1>=INSTANCE && LA123_1<=IS)||LA123_1==LE||(LA123_1>=LET && LA123_1<=MOD)||LA123_1==NE||(LA123_1>=OR && LA123_1<=ORDER)||(LA123_1>=RETURN && LA123_1<=SATISFIES)||LA123_1==STABLE||(LA123_1>=TO && LA123_1<=TREAT)||LA123_1==UNION||LA123_1==WHERE||LA123_1==COUNT||(LA123_1>=END && LA123_1<=GROUP)||LA123_1==ONLY||LA123_1==START||(LA123_1>=AFTER && LA123_1<=BEFORE)||LA123_1==INTO||LA123_1==MODIFY||LA123_1==WITH||(LA123_1>=LPAREN && LA123_1<=RPAREN)||(LA123_1>=LBRACKET && LA123_1<=EQUAL)||LA123_1==NOTEQUAL||LA123_1==COMMA||(LA123_1>=STAR && LA123_1<=SLASH_SLASH)||(LA123_1>=SEMICOLON && LA123_1<=VBAR)) ) {
                    alt123=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 123, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA123_0==STAR) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // XQueryParser.g:752:11: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_NameTest6621);
                    p_QName311=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName311.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:752:21: p_Wildcard
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Wildcard_in_p_NameTest6625);
                    p_Wildcard312=p_Wildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Wildcard312.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NameTest"

    public static class p_Wildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Wildcard"
    // XQueryParser.g:756:1: p_Wildcard : ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) );
    public final XQueryParser.p_Wildcard_return p_Wildcard() throws RecognitionException {
        XQueryParser.p_Wildcard_return retval = new XQueryParser.p_Wildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR313=null;
        CommonToken COLON314=null;
        CommonToken COLON317=null;
        CommonToken STAR318=null;
        XQueryParser.p_NCName_return p_NCName315 = null;

        XQueryParser.p_NCName_return p_NCName316 = null;


        XQDTCommonTree STAR313_tree=null;
        XQDTCommonTree COLON314_tree=null;
        XQDTCommonTree COLON317_tree=null;
        XQDTCommonTree STAR318_tree=null;

        setWsExplicit(true);
        try {
            // XQueryParser.g:757:9: ( STAR ( COLON p_NCName )? | ( p_NCName COLON STAR ) )
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==STAR) ) {
                alt125=1;
            }
            else if ( ((LA125_0>=ANCESTOR && LA125_0<=DECIMAL_SEPARATOR)||(LA125_0>=DIGIT && LA125_0<=NEXT)||(LA125_0>=ONLY && LA125_0<=EXIT)||(LA125_0>=SEQUENTIAL && LA125_0<=MAINTAINED)||(LA125_0>=MUTABLE && LA125_0<=QUOT_ER)||LA125_0==L_NCName||LA125_0==EXPLICITLY) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);

                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    // XQueryParser.g:757:11: STAR ( COLON p_NCName )?
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR313=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6655); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR313_tree = (XQDTCommonTree)adaptor.create(STAR313);
                    adaptor.addChild(root_0, STAR313_tree);
                    }
                    // XQueryParser.g:757:16: ( COLON p_NCName )?
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==COLON) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            // XQueryParser.g:757:17: COLON p_NCName
                            {
                            COLON314=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6658); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON314_tree = (XQDTCommonTree)adaptor.create(COLON314);
                            adaptor.addChild(root_0, COLON314_tree);
                            }
                            pushFollow(FOLLOW_p_NCName_in_p_Wildcard6660);
                            p_NCName315=p_NCName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName315.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // XQueryParser.g:757:36: ( p_NCName COLON STAR )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:757:36: ( p_NCName COLON STAR )
                    // XQueryParser.g:757:37: p_NCName COLON STAR
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_Wildcard6667);
                    p_NCName316=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName316.getTree());
                    COLON317=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_Wildcard6669); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON317_tree = (XQDTCommonTree)adaptor.create(COLON317);
                    adaptor.addChild(root_0, COLON317_tree);
                    }
                    STAR318=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_Wildcard6671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR318_tree = (XQDTCommonTree)adaptor.create(STAR318);
                    adaptor.addChild(root_0, STAR318_tree);
                    }

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_Wildcard"

    public static class p_FilterExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FilterExpr"
    // XQueryParser.g:762:1: p_FilterExpr : p_PrimaryExpr p_PredicateList ;
    public final XQueryParser.p_FilterExpr_return p_FilterExpr() throws RecognitionException {
        XQueryParser.p_FilterExpr_return retval = new XQueryParser.p_FilterExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PrimaryExpr_return p_PrimaryExpr319 = null;

        XQueryParser.p_PredicateList_return p_PredicateList320 = null;



        try {
            // XQueryParser.g:763:9: ( p_PrimaryExpr p_PredicateList )
            // XQueryParser.g:763:13: p_PrimaryExpr p_PredicateList
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PrimaryExpr_in_p_FilterExpr6712);
            p_PrimaryExpr319=p_PrimaryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PrimaryExpr319.getTree());
            pushFollow(FOLLOW_p_PredicateList_in_p_FilterExpr6714);
            p_PredicateList320=p_PredicateList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PredicateList320.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FilterExpr"

    public static class p_PredicateList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PredicateList"
    // XQueryParser.g:767:1: p_PredicateList : ( p_Predicate )* ;
    public final XQueryParser.p_PredicateList_return p_PredicateList() throws RecognitionException {
        XQueryParser.p_PredicateList_return retval = new XQueryParser.p_PredicateList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Predicate_return p_Predicate321 = null;



        try {
            // XQueryParser.g:768:9: ( ( p_Predicate )* )
            // XQueryParser.g:768:13: ( p_Predicate )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:768:13: ( p_Predicate )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==LSQUARE) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // XQueryParser.g:768:13: p_Predicate
            	    {
            	    pushFollow(FOLLOW_p_Predicate_in_p_PredicateList6742);
            	    p_Predicate321=p_Predicate();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Predicate321.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PredicateList"

    public static class p_Predicate_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Predicate"
    // XQueryParser.g:772:1: p_Predicate : LSQUARE pm_Expr RSQUARE ;
    public final XQueryParser.p_Predicate_return p_Predicate() throws RecognitionException {
        XQueryParser.p_Predicate_return retval = new XQueryParser.p_Predicate_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LSQUARE322=null;
        CommonToken RSQUARE324=null;
        XQueryParser.pm_Expr_return pm_Expr323 = null;


        XQDTCommonTree LSQUARE322_tree=null;
        XQDTCommonTree RSQUARE324_tree=null;

        try {
            // XQueryParser.g:773:9: ( LSQUARE pm_Expr RSQUARE )
            // XQueryParser.g:773:13: LSQUARE pm_Expr RSQUARE
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LSQUARE322=(CommonToken)match(input,LSQUARE,FOLLOW_LSQUARE_in_p_Predicate6771); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LSQUARE322_tree = (XQDTCommonTree)adaptor.create(LSQUARE322);
            adaptor.addChild(root_0, LSQUARE322_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_Predicate6773);
            pm_Expr323=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr323.getTree());
            RSQUARE324=(CommonToken)match(input,RSQUARE,FOLLOW_RSQUARE_in_p_Predicate6775); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RSQUARE324_tree = (XQDTCommonTree)adaptor.create(RSQUARE324);
            adaptor.addChild(root_0, RSQUARE324_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Predicate"

    public static class p_PrimaryExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PrimaryExpr"
    // XQueryParser.g:777:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );
    public final XQueryParser.p_PrimaryExpr_return p_PrimaryExpr() throws RecognitionException {
        XQueryParser.p_PrimaryExpr_return retval = new XQueryParser.p_PrimaryExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Literal_return p_Literal325 = null;

        XQueryParser.p_VarRef_return p_VarRef326 = null;

        XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr327 = null;

        XQueryParser.p_ContextItemExpr_return p_ContextItemExpr328 = null;

        XQueryParser.p_FunctionCall_return p_FunctionCall329 = null;

        XQueryParser.p_OrderedExpr_return p_OrderedExpr330 = null;

        XQueryParser.p_UnorderedExpr_return p_UnorderedExpr331 = null;

        XQueryParser.p_Constructor_return p_Constructor332 = null;



        try {
            // XQueryParser.g:778:9: ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor )
            int alt127=8;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // XQueryParser.g:778:13: p_Literal
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Literal_in_p_PrimaryExpr6803);
                    p_Literal325=p_Literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Literal325.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:779:11: p_VarRef
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_VarRef_in_p_PrimaryExpr6815);
                    p_VarRef326=p_VarRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarRef326.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:780:11: p_ParenthesizedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6827);
                    p_ParenthesizedExpr327=p_ParenthesizedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ParenthesizedExpr327.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:781:11: p_ContextItemExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6839);
                    p_ContextItemExpr328=p_ContextItemExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ContextItemExpr328.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:782:11: p_FunctionCall
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_FunctionCall_in_p_PrimaryExpr6851);
                    p_FunctionCall329=p_FunctionCall();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FunctionCall329.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:783:11: p_OrderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6863);
                    p_OrderedExpr330=p_OrderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderedExpr330.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:784:11: p_UnorderedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6875);
                    p_UnorderedExpr331=p_UnorderedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UnorderedExpr331.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:785:11: p_Constructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_Constructor_in_p_PrimaryExpr6887);
                    p_Constructor332=p_Constructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Constructor332.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PrimaryExpr"

    public static class p_Literal_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Literal"
    // XQueryParser.g:789:1: p_Literal : ( p_NumericLiteral | p_StringLiteral );
    public final XQueryParser.p_Literal_return p_Literal() throws RecognitionException {
        XQueryParser.p_Literal_return retval = new XQueryParser.p_Literal_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NumericLiteral_return p_NumericLiteral333 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral334 = null;



        try {
            // XQueryParser.g:790:9: ( p_NumericLiteral | p_StringLiteral )
            int alt128=2;
            int LA128_0 = input.LA(1);

            if ( ((LA128_0>=L_IntegerLiteral && LA128_0<=L_DoubleLiteral)) ) {
                alt128=1;
            }
            else if ( ((LA128_0>=APOS && LA128_0<=QUOT)) ) {
                alt128=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }
            switch (alt128) {
                case 1 :
                    // XQueryParser.g:790:13: p_NumericLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NumericLiteral_in_p_Literal6915);
                    p_NumericLiteral333=p_NumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NumericLiteral333.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:790:32: p_StringLiteral
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_StringLiteral_in_p_Literal6919);
                    p_StringLiteral334=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral334.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Literal"

    public static class p_NumericLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NumericLiteral"
    // XQueryParser.g:794:1: p_NumericLiteral : ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral );
    public final XQueryParser.p_NumericLiteral_return p_NumericLiteral() throws RecognitionException {
        XQueryParser.p_NumericLiteral_return retval = new XQueryParser.p_NumericLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set335=null;

        XQDTCommonTree set335_tree=null;

        try {
            // XQueryParser.g:795:9: ( L_IntegerLiteral | L_DecimalLiteral | L_DoubleLiteral )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set335=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_IntegerLiteral && input.LA(1)<=L_DoubleLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set335));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NumericLiteral"

    public static class p_VarRef_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarRef"
    // XQueryParser.g:799:1: p_VarRef : DOLLAR p_VarName ;
    public final XQueryParser.p_VarRef_return p_VarRef() throws RecognitionException {
        XQueryParser.p_VarRef_return retval = new XQueryParser.p_VarRef_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR336=null;
        XQueryParser.p_VarName_return p_VarName337 = null;


        XQDTCommonTree DOLLAR336_tree=null;

        try {
            // XQueryParser.g:800:9: ( DOLLAR p_VarName )
            // XQueryParser.g:800:13: DOLLAR p_VarName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR336=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_VarRef6991); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR336_tree = (XQDTCommonTree)adaptor.create(DOLLAR336);
            adaptor.addChild(root_0, DOLLAR336_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_VarRef6993);
            p_VarName337=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName337.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarRef"

    public static class p_VarName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_VarName"
    // XQueryParser.g:804:1: p_VarName : p_QName ;
    public final XQueryParser.p_VarName_return p_VarName() throws RecognitionException {
        XQueryParser.p_VarName_return retval = new XQueryParser.p_VarName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName338 = null;



        try {
            // XQueryParser.g:805:9: ( p_QName )
            // XQueryParser.g:805:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_VarName7021);
            p_QName338=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName338.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_VarName"

    public static class p_ParenthesizedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ParenthesizedExpr"
    // XQueryParser.g:809:1: p_ParenthesizedExpr : LPAREN ( pm_Expr )? RPAREN ;
    public final XQueryParser.p_ParenthesizedExpr_return p_ParenthesizedExpr() throws RecognitionException {
        XQueryParser.p_ParenthesizedExpr_return retval = new XQueryParser.p_ParenthesizedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN339=null;
        CommonToken RPAREN341=null;
        XQueryParser.pm_Expr_return pm_Expr340 = null;


        XQDTCommonTree LPAREN339_tree=null;
        XQDTCommonTree RPAREN341_tree=null;

        try {
            // XQueryParser.g:810:9: ( LPAREN ( pm_Expr )? RPAREN )
            // XQueryParser.g:810:13: LPAREN ( pm_Expr )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN339=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ParenthesizedExpr7049); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN339_tree = (XQDTCommonTree)adaptor.create(LPAREN339);
            adaptor.addChild(root_0, LPAREN339_tree);
            }
            // XQueryParser.g:810:20: ( pm_Expr )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( ((LA129_0>=ANCESTOR && LA129_0<=DECIMAL_SEPARATOR)||(LA129_0>=DIGIT && LA129_0<=NEXT)||(LA129_0>=ONLY && LA129_0<=EXIT)||(LA129_0>=SEQUENTIAL && LA129_0<=MAINTAINED)||(LA129_0>=MUTABLE && LA129_0<=LPAREN)||LA129_0==DOLLAR||(LA129_0>=STAR && LA129_0<=SMALLER)||(LA129_0>=SLASH && LA129_0<=DOT_DOT)||LA129_0==ATTR_SIGN||(LA129_0>=APOS && LA129_0<=QUOT)||LA129_0==L_NCName||(LA129_0>=L_Pragma && LA129_0<=L_DoubleLiteral)||LA129_0==EXPLICITLY) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // XQueryParser.g:810:20: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_ParenthesizedExpr7051);
                    pm_Expr340=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr340.getTree());

                    }
                    break;

            }

            RPAREN341=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ParenthesizedExpr7054); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN341_tree = (XQDTCommonTree)adaptor.create(RPAREN341);
            adaptor.addChild(root_0, RPAREN341_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ParenthesizedExpr"

    public static class p_ContextItemExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ContextItemExpr"
    // XQueryParser.g:814:1: p_ContextItemExpr : DOT ;
    public final XQueryParser.p_ContextItemExpr_return p_ContextItemExpr() throws RecognitionException {
        XQueryParser.p_ContextItemExpr_return retval = new XQueryParser.p_ContextItemExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOT342=null;

        XQDTCommonTree DOT342_tree=null;

        try {
            // XQueryParser.g:815:9: ( DOT )
            // XQueryParser.g:815:13: DOT
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOT342=(CommonToken)match(input,DOT,FOLLOW_DOT_in_p_ContextItemExpr7082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT342_tree = (XQDTCommonTree)adaptor.create(DOT342);
            adaptor.addChild(root_0, DOT342_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ContextItemExpr"

    public static class p_OrderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OrderedExpr"
    // XQueryParser.g:819:1: p_OrderedExpr : k= ORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_OrderedExpr_return p_OrderedExpr() throws RecognitionException {
        XQueryParser.p_OrderedExpr_return retval = new XQueryParser.p_OrderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET343=null;
        CommonToken RBRACKET345=null;
        XQueryParser.pm_Expr_return pm_Expr344 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET343_tree=null;
        XQDTCommonTree RBRACKET345_tree=null;

        try {
            // XQueryParser.g:820:9: (k= ORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:820:13: k= ORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_OrderedExpr7112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET343=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_OrderedExpr7116); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET343_tree = (XQDTCommonTree)adaptor.create(LBRACKET343);
            adaptor.addChild(root_0, LBRACKET343_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_OrderedExpr7118);
            pm_Expr344=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr344.getTree());
            RBRACKET345=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_OrderedExpr7120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET345_tree = (XQDTCommonTree)adaptor.create(RBRACKET345);
            adaptor.addChild(root_0, RBRACKET345_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OrderedExpr"

    public static class p_UnorderedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UnorderedExpr"
    // XQueryParser.g:824:1: p_UnorderedExpr : k= UNORDERED LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_UnorderedExpr_return p_UnorderedExpr() throws RecognitionException {
        XQueryParser.p_UnorderedExpr_return retval = new XQueryParser.p_UnorderedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET346=null;
        CommonToken RBRACKET348=null;
        XQueryParser.pm_Expr_return pm_Expr347 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET346_tree=null;
        XQDTCommonTree RBRACKET348_tree=null;

        try {
            // XQueryParser.g:825:9: (k= UNORDERED LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:825:13: k= UNORDERED LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_UnorderedExpr7150); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET346=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_UnorderedExpr7154); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET346_tree = (XQDTCommonTree)adaptor.create(LBRACKET346);
            adaptor.addChild(root_0, LBRACKET346_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_UnorderedExpr7156);
            pm_Expr347=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr347.getTree());
            RBRACKET348=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_UnorderedExpr7158); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET348_tree = (XQDTCommonTree)adaptor.create(RBRACKET348);
            adaptor.addChild(root_0, RBRACKET348_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UnorderedExpr"

    public static class p_FunctionCall_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FunctionCall"
    // XQueryParser.g:830:1: p_FunctionCall : p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN ;
    public final XQueryParser.p_FunctionCall_return p_FunctionCall() throws RecognitionException {
        XQueryParser.p_FunctionCall_return retval = new XQueryParser.p_FunctionCall_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN350=null;
        CommonToken COMMA352=null;
        CommonToken RPAREN354=null;
        XQueryParser.p_FQName_return p_FQName349 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle351 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle353 = null;


        XQDTCommonTree LPAREN350_tree=null;
        XQDTCommonTree COMMA352_tree=null;
        XQDTCommonTree RPAREN354_tree=null;

        try {
            // XQueryParser.g:831:9: ( p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN )
            // XQueryParser.g:831:13: p_FQName LPAREN ( p_ExprSingle ( COMMA p_ExprSingle )* )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FQName_in_p_FunctionCall7187);
            p_FQName349=p_FQName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FQName349.getTree());
            LPAREN350=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_FunctionCall7189); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN350_tree = (XQDTCommonTree)adaptor.create(LPAREN350);
            adaptor.addChild(root_0, LPAREN350_tree);
            }
            // XQueryParser.g:831:29: ( p_ExprSingle ( COMMA p_ExprSingle )* )?
            int alt131=2;
            int LA131_0 = input.LA(1);

            if ( ((LA131_0>=ANCESTOR && LA131_0<=DECIMAL_SEPARATOR)||(LA131_0>=DIGIT && LA131_0<=NEXT)||(LA131_0>=ONLY && LA131_0<=EXIT)||(LA131_0>=SEQUENTIAL && LA131_0<=MAINTAINED)||(LA131_0>=MUTABLE && LA131_0<=LPAREN)||LA131_0==DOLLAR||(LA131_0>=STAR && LA131_0<=SMALLER)||(LA131_0>=SLASH && LA131_0<=DOT_DOT)||LA131_0==ATTR_SIGN||(LA131_0>=APOS && LA131_0<=QUOT)||LA131_0==L_NCName||(LA131_0>=L_Pragma && LA131_0<=L_DoubleLiteral)||LA131_0==EXPLICITLY) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    // XQueryParser.g:831:30: p_ExprSingle ( COMMA p_ExprSingle )*
                    {
                    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7192);
                    p_ExprSingle351=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle351.getTree());
                    // XQueryParser.g:831:43: ( COMMA p_ExprSingle )*
                    loop130:
                    do {
                        int alt130=2;
                        int LA130_0 = input.LA(1);

                        if ( (LA130_0==COMMA) ) {
                            alt130=1;
                        }


                        switch (alt130) {
                    	case 1 :
                    	    // XQueryParser.g:831:44: COMMA p_ExprSingle
                    	    {
                    	    COMMA352=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_FunctionCall7195); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA352_tree = (XQDTCommonTree)adaptor.create(COMMA352);
                    	    adaptor.addChild(root_0, COMMA352_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_ExprSingle_in_p_FunctionCall7197);
                    	    p_ExprSingle353=p_ExprSingle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop130;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN354=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_FunctionCall7203); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN354_tree = (XQDTCommonTree)adaptor.create(RPAREN354);
            adaptor.addChild(root_0, RPAREN354_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FunctionCall"

    public static class p_Constructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Constructor"
    // XQueryParser.g:835:1: p_Constructor : ( p_DirectConstructor | p_ComputedConstructor );
    public final XQueryParser.p_Constructor_return p_Constructor() throws RecognitionException {
        XQueryParser.p_Constructor_return retval = new XQueryParser.p_Constructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DirectConstructor_return p_DirectConstructor355 = null;

        XQueryParser.p_ComputedConstructor_return p_ComputedConstructor356 = null;



        try {
            // XQueryParser.g:836:9: ( p_DirectConstructor | p_ComputedConstructor )
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==SMALLER||(LA132_0>=L_DirCommentConstructor && LA132_0<=L_DirPIConstructor)) ) {
                alt132=1;
            }
            else if ( (LA132_0==ATTRIBUTE||LA132_0==COMMENT||LA132_0==DOCUMENT||LA132_0==ELEMENT||LA132_0==NAMESPACE||LA132_0==PROCESSING_INSTRUCTION||LA132_0==TEXT) ) {
                alt132=2;
            }
            else if ( (LA132_0==BINARY) && ((lc(MLS)))) {
                alt132=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // XQueryParser.g:836:13: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_p_Constructor7235);
                    p_DirectConstructor355=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor355.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:836:35: p_ComputedConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ComputedConstructor_in_p_Constructor7239);
                    p_ComputedConstructor356=p_ComputedConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ComputedConstructor356.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Constructor"

    public static class p_DirectConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirectConstructor"
    // XQueryParser.g:840:1: p_DirectConstructor : ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor );
    public final XQueryParser.p_DirectConstructor_return p_DirectConstructor() throws RecognitionException {
        XQueryParser.p_DirectConstructor_return retval = new XQueryParser.p_DirectConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_DirCommentConstructor358=null;
        CommonToken L_DirPIConstructor359=null;
        XQueryParser.p_DirElemConstructor_return p_DirElemConstructor357 = null;


        XQDTCommonTree L_DirCommentConstructor358_tree=null;
        XQDTCommonTree L_DirPIConstructor359_tree=null;

        try {
            // XQueryParser.g:841:9: ( p_DirElemConstructor | L_DirCommentConstructor | L_DirPIConstructor )
            int alt133=3;
            switch ( input.LA(1) ) {
            case SMALLER:
                {
                alt133=1;
                }
                break;
            case L_DirCommentConstructor:
                {
                alt133=2;
                }
                break;
            case L_DirPIConstructor:
                {
                alt133=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 133, 0, input);

                throw nvae;
            }

            switch (alt133) {
                case 1 :
                    // XQueryParser.g:841:13: p_DirElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7267);
                    p_DirElemConstructor357=p_DirElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirElemConstructor357.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:842:11: L_DirCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirCommentConstructor358=(CommonToken)match(input,L_DirCommentConstructor,FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirCommentConstructor358_tree = (XQDTCommonTree)adaptor.create(L_DirCommentConstructor358);
                    adaptor.addChild(root_0, L_DirCommentConstructor358_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:843:11: L_DirPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_DirPIConstructor359=(CommonToken)match(input,L_DirPIConstructor,FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7291); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_DirPIConstructor359_tree = (XQDTCommonTree)adaptor.create(L_DirPIConstructor359);
                    adaptor.addChild(root_0, L_DirPIConstructor359_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirectConstructor"

    public static class p_DirElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirElemConstructor"
    // XQueryParser.g:847:1: p_DirElemConstructor : SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) ;
    public final XQueryParser.p_DirElemConstructor_return p_DirElemConstructor() throws RecognitionException {
        XQueryParser.p_DirElemConstructor_return retval = new XQueryParser.p_DirElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SMALLER360=null;
        CommonToken EMPTY_CLOSE_TAG363=null;
        CommonToken GREATER364=null;
        CommonToken CLOSE_TAG366=null;
        CommonToken S368=null;
        CommonToken GREATER369=null;
        XQueryParser.p_QName_return p_QName361 = null;

        XQueryParser.p_DirAttributeList_return p_DirAttributeList362 = null;

        XQueryParser.pm_DirElemContent_return pm_DirElemContent365 = null;

        XQueryParser.p_QName_return p_QName367 = null;


        XQDTCommonTree SMALLER360_tree=null;
        XQDTCommonTree EMPTY_CLOSE_TAG363_tree=null;
        XQDTCommonTree GREATER364_tree=null;
        XQDTCommonTree CLOSE_TAG366_tree=null;
        XQDTCommonTree S368_tree=null;
        XQDTCommonTree GREATER369_tree=null;
        RewriteRuleTokenStream stream_S=new RewriteRuleTokenStream(adaptor,"token S");
        RewriteRuleTokenStream stream_GREATER=new RewriteRuleTokenStream(adaptor,"token GREATER");
        RewriteRuleTokenStream stream_SMALLER=new RewriteRuleTokenStream(adaptor,"token SMALLER");
        RewriteRuleTokenStream stream_EMPTY_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token EMPTY_CLOSE_TAG");
        RewriteRuleTokenStream stream_CLOSE_TAG=new RewriteRuleTokenStream(adaptor,"token CLOSE_TAG");
        RewriteRuleSubtreeStream stream_p_DirAttributeList=new RewriteRuleSubtreeStream(adaptor,"rule p_DirAttributeList");
        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        RewriteRuleSubtreeStream stream_pm_DirElemContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_DirElemContent");
        try {
            // XQueryParser.g:848:9: ( SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) ) -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) ) )
            // XQueryParser.g:848:13: SMALLER p_QName p_DirAttributeList ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            {
            SMALLER360=(CommonToken)match(input,SMALLER,FOLLOW_SMALLER_in_p_DirElemConstructor7320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SMALLER.add(SMALLER360);

            if ( state.backtracking==0 ) {
              pushXMLLexer();
            }
            pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7336);
            p_QName361=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName361.getTree());
            pushFollow(FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7338);
            p_DirAttributeList362=p_DirAttributeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_DirAttributeList.add(p_DirAttributeList362.getTree());
            // XQueryParser.g:850:13: ( EMPTY_CLOSE_TAG | ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER ) )
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==EMPTY_CLOSE_TAG) ) {
                alt136=1;
            }
            else if ( (LA136_0==GREATER) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);

                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    // XQueryParser.g:850:14: EMPTY_CLOSE_TAG
                    {
                    EMPTY_CLOSE_TAG363=(CommonToken)match(input,EMPTY_CLOSE_TAG,FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_CLOSE_TAG.add(EMPTY_CLOSE_TAG363);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:850:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    {
                    // XQueryParser.g:850:32: ( GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER )
                    // XQueryParser.g:850:33: GREATER ( pm_DirElemContent )* CLOSE_TAG p_QName ( S )? GREATER
                    {
                    GREATER364=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER364);

                    // XQueryParser.g:850:41: ( pm_DirElemContent )*
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( ((LA134_0>=L_ElementContentChar && LA134_0<=ESCAPE_RBRACKET)||LA134_0==LBRACKET||LA134_0==SMALLER||(LA134_0>=L_DirCommentConstructor && LA134_0<=L_DirPIConstructor)) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // XQueryParser.g:850:41: pm_DirElemContent
                    	    {
                    	    pushFollow(FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7361);
                    	    pm_DirElemContent365=pm_DirElemContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_DirElemContent.add(pm_DirElemContent365.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop134;
                        }
                    } while (true);

                    CLOSE_TAG366=(CommonToken)match(input,CLOSE_TAG,FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7364); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CLOSE_TAG.add(CLOSE_TAG366);

                    pushFollow(FOLLOW_p_QName_in_p_DirElemConstructor7366);
                    p_QName367=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QName.add(p_QName367.getTree());
                    // XQueryParser.g:850:78: ( S )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==S) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // XQueryParser.g:850:78: S
                            {
                            S368=(CommonToken)match(input,S,FOLLOW_S_in_p_DirElemConstructor7368); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_S.add(S368);


                            }
                            break;

                    }

                    GREATER369=(CommonToken)match(input,GREATER,FOLLOW_GREATER_in_p_DirElemConstructor7371); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GREATER.add(GREATER369);


                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: pm_DirElemContent, p_DirAttributeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 851:17: -> ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
            {
                // XQueryParser.g:851:20: ^( DirElemConstructor ^( DirAttributeList ( p_DirAttributeList )* ) ^( DirElemContent ( pm_DirElemContent )* ) )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemConstructor, "DirElemConstructor"), root_1);

                // XQueryParser.g:851:41: ^( DirAttributeList ( p_DirAttributeList )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeList, "DirAttributeList"), root_2);

                // XQueryParser.g:851:60: ( p_DirAttributeList )*
                while ( stream_p_DirAttributeList.hasNext() ) {
                    adaptor.addChild(root_2, stream_p_DirAttributeList.nextTree());

                }
                stream_p_DirAttributeList.reset();

                adaptor.addChild(root_1, root_2);
                }
                // XQueryParser.g:851:81: ^( DirElemContent ( pm_DirElemContent )* )
                {
                XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirElemContent, "DirElemContent"), root_2);

                // XQueryParser.g:851:98: ( pm_DirElemContent )*
                while ( stream_pm_DirElemContent.hasNext() ) {
                    adaptor.addChild(root_2, stream_pm_DirElemContent.nextTree());

                }
                stream_pm_DirElemContent.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            popLexer();
        }
        return retval;
    }
    // $ANTLR end "p_DirElemConstructor"

    public static class p_DirAttributeList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeList"
    // XQueryParser.g:856:1: p_DirAttributeList : ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* ;
    public final XQueryParser.p_DirAttributeList_return p_DirAttributeList() throws RecognitionException {
        XQueryParser.p_DirAttributeList_return retval = new XQueryParser.p_DirAttributeList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken S370=null;
        CommonToken S372=null;
        CommonToken EQUAL373=null;
        CommonToken S374=null;
        XQueryParser.p_QName_return p_QName371 = null;

        XQueryParser.p_DirAttributeValue_return p_DirAttributeValue375 = null;


        XQDTCommonTree S370_tree=null;
        XQDTCommonTree S372_tree=null;
        XQDTCommonTree EQUAL373_tree=null;
        XQDTCommonTree S374_tree=null;

        try {
            // XQueryParser.g:857:9: ( ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )* )
            // XQueryParser.g:857:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:857:11: ( S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )? )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==S) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // XQueryParser.g:857:12: S ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    {
            	    S370=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7448); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    S370_tree = (XQDTCommonTree)adaptor.create(S370);
            	    adaptor.addChild(root_0, S370_tree);
            	    }
            	    // XQueryParser.g:857:14: ( p_QName ( S )? EQUAL ( S )? p_DirAttributeValue )?
            	    int alt139=2;
            	    int LA139_0 = input.LA(1);

            	    if ( ((LA139_0>=ANCESTOR && LA139_0<=DECIMAL_SEPARATOR)||(LA139_0>=DIGIT && LA139_0<=NEXT)||(LA139_0>=ONLY && LA139_0<=EXIT)||(LA139_0>=SEQUENTIAL && LA139_0<=MAINTAINED)||(LA139_0>=MUTABLE && LA139_0<=QUOT_ER)||LA139_0==L_NCName||LA139_0==EXPLICITLY) ) {
            	        alt139=1;
            	    }
            	    switch (alt139) {
            	        case 1 :
            	            // XQueryParser.g:857:15: p_QName ( S )? EQUAL ( S )? p_DirAttributeValue
            	            {
            	            pushFollow(FOLLOW_p_QName_in_p_DirAttributeList7451);
            	            p_QName371=p_QName();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName371.getTree());
            	            // XQueryParser.g:857:23: ( S )?
            	            int alt137=2;
            	            int LA137_0 = input.LA(1);

            	            if ( (LA137_0==S) ) {
            	                alt137=1;
            	            }
            	            switch (alt137) {
            	                case 1 :
            	                    // XQueryParser.g:857:23: S
            	                    {
            	                    S372=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7453); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S372_tree = (XQDTCommonTree)adaptor.create(S372);
            	                    adaptor.addChild(root_0, S372_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            EQUAL373=(CommonToken)match(input,EQUAL,FOLLOW_EQUAL_in_p_DirAttributeList7456); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            EQUAL373_tree = (XQDTCommonTree)adaptor.create(EQUAL373);
            	            adaptor.addChild(root_0, EQUAL373_tree);
            	            }
            	            // XQueryParser.g:857:32: ( S )?
            	            int alt138=2;
            	            int LA138_0 = input.LA(1);

            	            if ( (LA138_0==S) ) {
            	                alt138=1;
            	            }
            	            switch (alt138) {
            	                case 1 :
            	                    // XQueryParser.g:857:32: S
            	                    {
            	                    S374=(CommonToken)match(input,S,FOLLOW_S_in_p_DirAttributeList7458); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    S374_tree = (XQDTCommonTree)adaptor.create(S374);
            	                    adaptor.addChild(root_0, S374_tree);
            	                    }

            	                    }
            	                    break;

            	            }

            	            pushFollow(FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7461);
            	            p_DirAttributeValue375=p_DirAttributeValue();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirAttributeValue375.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeList"

    public static class p_DirAttributeValue_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DirAttributeValue"
    // XQueryParser.g:861:1: p_DirAttributeValue : ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) );
    public final XQueryParser.p_DirAttributeValue_return p_DirAttributeValue() throws RecognitionException {
        XQueryParser.p_DirAttributeValue_return retval = new XQueryParser.p_DirAttributeValue_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT376=null;
        CommonToken ESCAPE_QUOT377=null;
        CommonToken QUOT379=null;
        CommonToken APOS380=null;
        CommonToken ESCAPE_APOS381=null;
        CommonToken APOS383=null;
        XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent378 = null;

        XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent382 = null;


        XQDTCommonTree QUOT376_tree=null;
        XQDTCommonTree ESCAPE_QUOT377_tree=null;
        XQDTCommonTree QUOT379_tree=null;
        XQDTCommonTree APOS380_tree=null;
        XQDTCommonTree ESCAPE_APOS381_tree=null;
        XQDTCommonTree APOS383_tree=null;
        RewriteRuleTokenStream stream_ESCAPE_APOS=new RewriteRuleTokenStream(adaptor,"token ESCAPE_APOS");
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleTokenStream stream_ESCAPE_QUOT=new RewriteRuleTokenStream(adaptor,"token ESCAPE_QUOT");
        RewriteRuleSubtreeStream stream_pm_AposAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_AposAttrValueContent");
        RewriteRuleSubtreeStream stream_pm_QuotAttrValueContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_QuotAttrValueContent");
        try {
            // XQueryParser.g:862:9: ( ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT ) -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* ) | ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS ) -> ^( DirAttributeValue ( pm_AposAttrValueContent )* ) )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==QUOT) ) {
                alt143=1;
            }
            else if ( (LA143_0==APOS) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // XQueryParser.g:862:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    {
                    // XQueryParser.g:862:11: ( QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT )
                    // XQueryParser.g:862:12: QUOT ( ESCAPE_QUOT | pm_QuotAttrValueContent )* QUOT
                    {
                    QUOT376=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT376);

                    // XQueryParser.g:862:17: ( ESCAPE_QUOT | pm_QuotAttrValueContent )*
                    loop141:
                    do {
                        int alt141=3;
                        int LA141_0 = input.LA(1);

                        if ( (LA141_0==ESCAPE_QUOT) ) {
                            alt141=1;
                        }
                        else if ( (LA141_0==L_QuotAttrContentChar||(LA141_0>=L_PredefinedEntityRef && LA141_0<=ESCAPE_RBRACKET)||LA141_0==LBRACKET) ) {
                            alt141=2;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // XQueryParser.g:862:18: ESCAPE_QUOT
                    	    {
                    	    ESCAPE_QUOT377=(CommonToken)match(input,ESCAPE_QUOT,FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7495); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_QUOT.add(ESCAPE_QUOT377);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:862:32: pm_QuotAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7499);
                    	    pm_QuotAttrValueContent378=pm_QuotAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_QuotAttrValueContent.add(pm_QuotAttrValueContent378.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);

                    QUOT379=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_DirAttributeValue7503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT379);


                    }



                    // AST REWRITE
                    // elements: pm_QuotAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 863:17: -> ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                    {
                        // XQueryParser.g:863:20: ^( DirAttributeValue ( pm_QuotAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:863:40: ( pm_QuotAttrValueContent )*
                        while ( stream_pm_QuotAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_QuotAttrValueContent.nextTree());

                        }
                        stream_pm_QuotAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:864:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    {
                    // XQueryParser.g:864:11: ( APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS )
                    // XQueryParser.g:864:12: APOS ( ESCAPE_APOS | pm_AposAttrValueContent )* APOS
                    {
                    APOS380=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS380);

                    // XQueryParser.g:864:17: ( ESCAPE_APOS | pm_AposAttrValueContent )*
                    loop142:
                    do {
                        int alt142=3;
                        int LA142_0 = input.LA(1);

                        if ( (LA142_0==ESCAPE_APOS) ) {
                            alt142=1;
                        }
                        else if ( (LA142_0==L_AposAttrContentChar||(LA142_0>=L_PredefinedEntityRef && LA142_0<=ESCAPE_RBRACKET)||LA142_0==LBRACKET) ) {
                            alt142=2;
                        }


                        switch (alt142) {
                    	case 1 :
                    	    // XQueryParser.g:864:18: ESCAPE_APOS
                    	    {
                    	    ESCAPE_APOS381=(CommonToken)match(input,ESCAPE_APOS,FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7545); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_ESCAPE_APOS.add(ESCAPE_APOS381);


                    	    }
                    	    break;
                    	case 2 :
                    	    // XQueryParser.g:864:32: pm_AposAttrValueContent
                    	    {
                    	    pushFollow(FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7549);
                    	    pm_AposAttrValueContent382=pm_AposAttrValueContent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_pm_AposAttrValueContent.add(pm_AposAttrValueContent382.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop142;
                        }
                    } while (true);

                    APOS383=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_DirAttributeValue7553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS383);


                    }



                    // AST REWRITE
                    // elements: pm_AposAttrValueContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 865:17: -> ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                    {
                        // XQueryParser.g:865:20: ^( DirAttributeValue ( pm_AposAttrValueContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(DirAttributeValue, "DirAttributeValue"), root_1);

                        // XQueryParser.g:865:40: ( pm_AposAttrValueContent )*
                        while ( stream_pm_AposAttrValueContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_pm_AposAttrValueContent.nextTree());

                        }
                        stream_pm_AposAttrValueContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DirAttributeValue"

    public static class pm_QuotAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_QuotAttrValueContent"
    // XQueryParser.g:869:1: pm_QuotAttrValueContent : ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_QuotAttrValueContent_return pm_QuotAttrValueContent() throws RecognitionException {
        XQueryParser.pm_QuotAttrValueContent_return retval = new XQueryParser.pm_QuotAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar384 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent385 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr386 = null;



        try {
            // XQueryParser.g:870:9: ( pg_QuotAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt144=3;
            switch ( input.LA(1) ) {
            case L_QuotAttrContentChar:
                {
                alt144=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt144=2;
                }
                break;
            case LBRACKET:
                {
                alt144=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }

            switch (alt144) {
                case 1 :
                    // XQueryParser.g:870:11: pg_QuotAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7605);
                    pg_QuotAttrContentChar384=pg_QuotAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_QuotAttrContentChar384.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:870:36: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7609);
                    pg_CommonContent385=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent385.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:870:55: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7613);
                    p_ElemEnclosedExpr386=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr386.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_QuotAttrValueContent"

    public static class pg_QuotAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_QuotAttrContentChar"
    // XQueryParser.g:877:1: pg_QuotAttrContentChar : L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) ;
    public final XQueryParser.pg_QuotAttrContentChar_return pg_QuotAttrContentChar() throws RecognitionException {
        XQueryParser.pg_QuotAttrContentChar_return retval = new XQueryParser.pg_QuotAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_QuotAttrContentChar387=null;

        XQDTCommonTree L_QuotAttrContentChar387_tree=null;
        RewriteRuleTokenStream stream_L_QuotAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_QuotAttrContentChar");

        try {
            // XQueryParser.g:878:9: ( L_QuotAttrContentChar -> ^( AttributeValueChar L_QuotAttrContentChar ) )
            // XQueryParser.g:878:11: L_QuotAttrContentChar
            {
            L_QuotAttrContentChar387=(CommonToken)match(input,L_QuotAttrContentChar,FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7642); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_QuotAttrContentChar.add(L_QuotAttrContentChar387);



            // AST REWRITE
            // elements: L_QuotAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 879:17: -> ^( AttributeValueChar L_QuotAttrContentChar )
            {
                // XQueryParser.g:879:20: ^( AttributeValueChar L_QuotAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_QuotAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_QuotAttrContentChar"

    public static class pm_AposAttrValueContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_AposAttrValueContent"
    // XQueryParser.g:884:1: pm_AposAttrValueContent : ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr );
    public final XQueryParser.pm_AposAttrValueContent_return pm_AposAttrValueContent() throws RecognitionException {
        XQueryParser.pm_AposAttrValueContent_return retval = new XQueryParser.pm_AposAttrValueContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar388 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent389 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr390 = null;



        try {
            // XQueryParser.g:885:9: ( pg_AposAttrContentChar | pg_CommonContent | p_ElemEnclosedExpr )
            int alt145=3;
            switch ( input.LA(1) ) {
            case L_AposAttrContentChar:
                {
                alt145=1;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt145=2;
                }
                break;
            case LBRACKET:
                {
                alt145=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }

            switch (alt145) {
                case 1 :
                    // XQueryParser.g:885:13: pg_AposAttrContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7695);
                    pg_AposAttrContentChar388=pg_AposAttrContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_AposAttrContentChar388.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:885:38: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7699);
                    pg_CommonContent389=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent389.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:885:57: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7703);
                    p_ElemEnclosedExpr390=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr390.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_AposAttrValueContent"

    public static class pg_AposAttrContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_AposAttrContentChar"
    // XQueryParser.g:892:1: pg_AposAttrContentChar : L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) ;
    public final XQueryParser.pg_AposAttrContentChar_return pg_AposAttrContentChar() throws RecognitionException {
        XQueryParser.pg_AposAttrContentChar_return retval = new XQueryParser.pg_AposAttrContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_AposAttrContentChar391=null;

        XQDTCommonTree L_AposAttrContentChar391_tree=null;
        RewriteRuleTokenStream stream_L_AposAttrContentChar=new RewriteRuleTokenStream(adaptor,"token L_AposAttrContentChar");

        try {
            // XQueryParser.g:893:9: ( L_AposAttrContentChar -> ^( AttributeValueChar L_AposAttrContentChar ) )
            // XQueryParser.g:893:11: L_AposAttrContentChar
            {
            L_AposAttrContentChar391=(CommonToken)match(input,L_AposAttrContentChar,FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_AposAttrContentChar.add(L_AposAttrContentChar391);



            // AST REWRITE
            // elements: L_AposAttrContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 894:17: -> ^( AttributeValueChar L_AposAttrContentChar )
            {
                // XQueryParser.g:894:20: ^( AttributeValueChar L_AposAttrContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AttributeValueChar, "AttributeValueChar"), root_1);

                adaptor.addChild(root_1, stream_L_AposAttrContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_AposAttrContentChar"

    public static class pm_DirElemContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_DirElemContent"
    // XQueryParser.g:899:1: pm_DirElemContent : ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar );
    public final XQueryParser.pm_DirElemContent_return pm_DirElemContent() throws RecognitionException {
        XQueryParser.pm_DirElemContent_return retval = new XQueryParser.pm_DirElemContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_CDataSection393=null;
        XQueryParser.p_DirectConstructor_return p_DirectConstructor392 = null;

        XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr394 = null;

        XQueryParser.pg_CommonContent_return pg_CommonContent395 = null;

        XQueryParser.pg_ElementContentChar_return pg_ElementContentChar396 = null;


        XQDTCommonTree L_CDataSection393_tree=null;

        try {
            // XQueryParser.g:900:9: ( p_DirectConstructor | L_CDataSection | p_ElemEnclosedExpr | pg_CommonContent | pg_ElementContentChar )
            int alt146=5;
            switch ( input.LA(1) ) {
            case SMALLER:
            case L_DirCommentConstructor:
            case L_DirPIConstructor:
                {
                alt146=1;
                }
                break;
            case L_CDataSection:
                {
                alt146=2;
                }
                break;
            case LBRACKET:
                {
                alt146=3;
                }
                break;
            case L_PredefinedEntityRef:
            case L_CharRef:
            case ESCAPE_LBRACKET:
            case ESCAPE_RBRACKET:
                {
                alt146=4;
                }
                break;
            case L_ElementContentChar:
                {
                alt146=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // XQueryParser.g:900:11: p_DirectConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DirectConstructor_in_pm_DirElemContent7783);
                    p_DirectConstructor392=p_DirectConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DirectConstructor392.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:901:11: L_CDataSection
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    L_CDataSection393=(CommonToken)match(input,L_CDataSection,FOLLOW_L_CDataSection_in_pm_DirElemContent7795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    L_CDataSection393_tree = (XQDTCommonTree)adaptor.create(L_CDataSection393);
                    adaptor.addChild(root_0, L_CDataSection393_tree);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:902:11: p_ElemEnclosedExpr
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7807);
                    p_ElemEnclosedExpr394=p_ElemEnclosedExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElemEnclosedExpr394.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:903:11: pg_CommonContent
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_CommonContent_in_pm_DirElemContent7819);
                    pg_CommonContent395=pg_CommonContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_CommonContent395.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:904:11: pg_ElementContentChar
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7831);
                    pg_ElementContentChar396=pg_ElementContentChar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pg_ElementContentChar396.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_DirElemContent"

    public static class pg_ElementContentChar_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_ElementContentChar"
    // XQueryParser.g:911:1: pg_ElementContentChar : L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) ;
    public final XQueryParser.pg_ElementContentChar_return pg_ElementContentChar() throws RecognitionException {
        XQueryParser.pg_ElementContentChar_return retval = new XQueryParser.pg_ElementContentChar_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken L_ElementContentChar397=null;

        XQDTCommonTree L_ElementContentChar397_tree=null;
        RewriteRuleTokenStream stream_L_ElementContentChar=new RewriteRuleTokenStream(adaptor,"token L_ElementContentChar");

        try {
            // XQueryParser.g:912:9: ( L_ElementContentChar -> ^( ElementContentChar L_ElementContentChar ) )
            // XQueryParser.g:912:11: L_ElementContentChar
            {
            L_ElementContentChar397=(CommonToken)match(input,L_ElementContentChar,FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7860); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_L_ElementContentChar.add(L_ElementContentChar397);



            // AST REWRITE
            // elements: L_ElementContentChar
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 913:17: -> ^( ElementContentChar L_ElementContentChar )
            {
                // XQueryParser.g:913:20: ^( ElementContentChar L_ElementContentChar )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ElementContentChar, "ElementContentChar"), root_1);

                adaptor.addChild(root_1, stream_L_ElementContentChar.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_ElementContentChar"

    public static class pg_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pg_CommonContent"
    // XQueryParser.g:921:1: pg_CommonContent : pm_CommonContent -> ^( CommonContent pm_CommonContent ) ;
    public final XQueryParser.pg_CommonContent_return pg_CommonContent() throws RecognitionException {
        XQueryParser.pg_CommonContent_return retval = new XQueryParser.pg_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_CommonContent_return pm_CommonContent398 = null;


        RewriteRuleSubtreeStream stream_pm_CommonContent=new RewriteRuleSubtreeStream(adaptor,"rule pm_CommonContent");
        try {
            // XQueryParser.g:922:9: ( pm_CommonContent -> ^( CommonContent pm_CommonContent ) )
            // XQueryParser.g:922:13: pm_CommonContent
            {
            pushFollow(FOLLOW_pm_CommonContent_in_pg_CommonContent7916);
            pm_CommonContent398=pm_CommonContent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_CommonContent.add(pm_CommonContent398.getTree());


            // AST REWRITE
            // elements: pm_CommonContent
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 923:17: -> ^( CommonContent pm_CommonContent )
            {
                // XQueryParser.g:923:20: ^( CommonContent pm_CommonContent )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(CommonContent, "CommonContent"), root_1);

                adaptor.addChild(root_1, stream_pm_CommonContent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pg_CommonContent"

    public static class pm_CommonContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_CommonContent"
    // XQueryParser.g:928:1: pm_CommonContent : ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET );
    public final XQueryParser.pm_CommonContent_return pm_CommonContent() throws RecognitionException {
        XQueryParser.pm_CommonContent_return retval = new XQueryParser.pm_CommonContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set399=null;

        XQDTCommonTree set399_tree=null;

        try {
            // XQueryParser.g:929:9: ( L_PredefinedEntityRef | L_CharRef | ESCAPE_LBRACKET | ESCAPE_RBRACKET )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set399=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=L_PredefinedEntityRef && input.LA(1)<=ESCAPE_RBRACKET) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set399));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_CommonContent"

    public static class p_ElemEnclosedExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElemEnclosedExpr"
    // XQueryParser.g:936:1: p_ElemEnclosedExpr : LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_ElemEnclosedExpr_return p_ElemEnclosedExpr() throws RecognitionException {
        XQueryParser.p_ElemEnclosedExpr_return retval = new XQueryParser.p_ElemEnclosedExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET400=null;
        CommonToken RBRACKET402=null;
        XQueryParser.pm_Expr_return pm_Expr401 = null;


        XQDTCommonTree LBRACKET400_tree=null;
        XQDTCommonTree RBRACKET402_tree=null;

        try {
            // XQueryParser.g:937:9: ( LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:937:13: LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LBRACKET400=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_ElemEnclosedExpr8012); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET400_tree = (XQDTCommonTree)adaptor.create(LBRACKET400);
            adaptor.addChild(root_0, LBRACKET400_tree);
            }
            if ( state.backtracking==0 ) {
              pushXQueryLexer();
            }
            pushFollow(FOLLOW_pm_Expr_in_p_ElemEnclosedExpr8028);
            pm_Expr401=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr401.getTree());
            RBRACKET402=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_ElemEnclosedExpr8042); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET402_tree = (XQDTCommonTree)adaptor.create(RBRACKET402);
            adaptor.addChild(root_0, RBRACKET402_tree);
            }
            if ( state.backtracking==0 ) {
              popLexer();
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElemEnclosedExpr"

    public static class p_ComputedConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ComputedConstructor"
    // XQueryParser.g:962:1: p_ComputedConstructor : ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor );
    public final XQueryParser.p_ComputedConstructor_return p_ComputedConstructor() throws RecognitionException {
        XQueryParser.p_ComputedConstructor_return retval = new XQueryParser.p_ComputedConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_CompDocConstructor_return p_CompDocConstructor403 = null;

        XQueryParser.p_CompElemConstructor_return p_CompElemConstructor404 = null;

        XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor405 = null;

        XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor406 = null;

        XQueryParser.p_CompTextConstructor_return p_CompTextConstructor407 = null;

        XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor408 = null;

        XQueryParser.p_CompPIConstructor_return p_CompPIConstructor409 = null;

        XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor410 = null;



        try {
            // XQueryParser.g:963:9: ( p_CompDocConstructor | p_CompElemConstructor | p_CompAttrConstructor | p_CompNamespaceConstructor | p_CompTextConstructor | p_CompCommentConstructor | p_CompPIConstructor | {...}? => p_CompBinaryConstructor )
            int alt147=8;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==DOCUMENT) ) {
                alt147=1;
            }
            else if ( (LA147_0==ELEMENT) ) {
                alt147=2;
            }
            else if ( (LA147_0==ATTRIBUTE) ) {
                alt147=3;
            }
            else if ( (LA147_0==NAMESPACE) ) {
                alt147=4;
            }
            else if ( (LA147_0==TEXT) ) {
                alt147=5;
            }
            else if ( (LA147_0==COMMENT) ) {
                alt147=6;
            }
            else if ( (LA147_0==PROCESSING_INSTRUCTION) ) {
                alt147=7;
            }
            else if ( (LA147_0==BINARY) && ((lc(MLS)))) {
                alt147=8;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // XQueryParser.g:963:13: p_CompDocConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8094);
                    p_CompDocConstructor403=p_CompDocConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompDocConstructor403.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:964:11: p_CompElemConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8106);
                    p_CompElemConstructor404=p_CompElemConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompElemConstructor404.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:965:11: p_CompAttrConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8118);
                    p_CompAttrConstructor405=p_CompAttrConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompAttrConstructor405.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:966:11: p_CompNamespaceConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8130);
                    p_CompNamespaceConstructor406=p_CompNamespaceConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompNamespaceConstructor406.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:967:11: p_CompTextConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8142);
                    p_CompTextConstructor407=p_CompTextConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompTextConstructor407.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:968:11: p_CompCommentConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8154);
                    p_CompCommentConstructor408=p_CompCommentConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompCommentConstructor408.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:969:11: p_CompPIConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8166);
                    p_CompPIConstructor409=p_CompPIConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompPIConstructor409.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:970:11: {...}? => p_CompBinaryConstructor
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ComputedConstructor", "lc(MLS)");
                    }
                    pushFollow(FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8181);
                    p_CompBinaryConstructor410=p_CompBinaryConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CompBinaryConstructor410.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ComputedConstructor"

    public static class p_CompDocConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompDocConstructor"
    // XQueryParser.g:974:1: p_CompDocConstructor : k= DOCUMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompDocConstructor_return p_CompDocConstructor() throws RecognitionException {
        XQueryParser.p_CompDocConstructor_return retval = new XQueryParser.p_CompDocConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET411=null;
        CommonToken RBRACKET413=null;
        XQueryParser.pm_Expr_return pm_Expr412 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET411_tree=null;
        XQDTCommonTree RBRACKET413_tree=null;

        try {
            // XQueryParser.g:975:9: (k= DOCUMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:975:13: k= DOCUMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DOCUMENT,FOLLOW_DOCUMENT_in_p_CompDocConstructor8215); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET411=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompDocConstructor8219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET411_tree = (XQDTCommonTree)adaptor.create(LBRACKET411);
            adaptor.addChild(root_0, LBRACKET411_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompDocConstructor8221);
            pm_Expr412=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr412.getTree());
            RBRACKET413=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompDocConstructor8223); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET413_tree = (XQDTCommonTree)adaptor.create(RBRACKET413);
            adaptor.addChild(root_0, RBRACKET413_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompDocConstructor"

    public static class p_CompElemConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompElemConstructor"
    // XQueryParser.g:979:1: p_CompElemConstructor : k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompElemConstructor_return p_CompElemConstructor() throws RecognitionException {
        XQueryParser.p_CompElemConstructor_return retval = new XQueryParser.p_CompElemConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET415=null;
        CommonToken RBRACKET417=null;
        CommonToken LBRACKET418=null;
        CommonToken RBRACKET420=null;
        XQueryParser.p_QName_return p_QName414 = null;

        XQueryParser.pm_Expr_return pm_Expr416 = null;

        XQueryParser.pm_Expr_return pm_Expr419 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET415_tree=null;
        XQDTCommonTree RBRACKET417_tree=null;
        XQDTCommonTree LBRACKET418_tree=null;
        XQDTCommonTree RBRACKET420_tree=null;

        try {
            // XQueryParser.g:980:9: (k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:980:13: k= ELEMENT ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_CompElemConstructor8264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:980:33: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( ((LA148_0>=ANCESTOR && LA148_0<=DECIMAL_SEPARATOR)||(LA148_0>=DIGIT && LA148_0<=NEXT)||(LA148_0>=ONLY && LA148_0<=EXIT)||(LA148_0>=SEQUENTIAL && LA148_0<=MAINTAINED)||(LA148_0>=MUTABLE && LA148_0<=QUOT_ER)||LA148_0==L_NCName||LA148_0==EXPLICITLY) ) {
                alt148=1;
            }
            else if ( (LA148_0==LBRACKET) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // XQueryParser.g:980:34: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompElemConstructor8269);
                    p_QName414=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName414.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:980:44: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:980:44: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:980:45: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET415=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET415_tree = (XQDTCommonTree)adaptor.create(LBRACKET415);
                    adaptor.addChild(root_0, LBRACKET415_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8276);
                    pm_Expr416=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr416.getTree());
                    RBRACKET417=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET417_tree = (XQDTCommonTree)adaptor.create(RBRACKET417);
                    adaptor.addChild(root_0, RBRACKET417_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET418=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompElemConstructor8282); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET418_tree = (XQDTCommonTree)adaptor.create(LBRACKET418);
            adaptor.addChild(root_0, LBRACKET418_tree);
            }
            // XQueryParser.g:980:82: ( pm_Expr )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=ANCESTOR && LA149_0<=DECIMAL_SEPARATOR)||(LA149_0>=DIGIT && LA149_0<=NEXT)||(LA149_0>=ONLY && LA149_0<=EXIT)||(LA149_0>=SEQUENTIAL && LA149_0<=MAINTAINED)||(LA149_0>=MUTABLE && LA149_0<=LPAREN)||LA149_0==DOLLAR||(LA149_0>=STAR && LA149_0<=SMALLER)||(LA149_0>=SLASH && LA149_0<=DOT_DOT)||LA149_0==ATTR_SIGN||(LA149_0>=APOS && LA149_0<=QUOT)||LA149_0==L_NCName||(LA149_0>=L_Pragma && LA149_0<=L_DoubleLiteral)||LA149_0==EXPLICITLY) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // XQueryParser.g:980:82: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompElemConstructor8284);
                    pm_Expr419=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr419.getTree());

                    }
                    break;

            }

            RBRACKET420=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompElemConstructor8287); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET420_tree = (XQDTCommonTree)adaptor.create(RBRACKET420);
            adaptor.addChild(root_0, RBRACKET420_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompElemConstructor"

    public static class p_CompAttrConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompAttrConstructor"
    // XQueryParser.g:987:1: p_CompAttrConstructor : k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompAttrConstructor_return p_CompAttrConstructor() throws RecognitionException {
        XQueryParser.p_CompAttrConstructor_return retval = new XQueryParser.p_CompAttrConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET422=null;
        CommonToken RBRACKET424=null;
        CommonToken LBRACKET425=null;
        CommonToken RBRACKET427=null;
        XQueryParser.p_QName_return p_QName421 = null;

        XQueryParser.pm_Expr_return pm_Expr423 = null;

        XQueryParser.pm_Expr_return pm_Expr426 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET422_tree=null;
        XQDTCommonTree RBRACKET424_tree=null;
        XQDTCommonTree LBRACKET425_tree=null;
        XQDTCommonTree RBRACKET427_tree=null;

        try {
            // XQueryParser.g:988:9: (k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:988:13: k= ATTRIBUTE ( p_QName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8320); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:988:35: ( p_QName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( ((LA150_0>=ANCESTOR && LA150_0<=DECIMAL_SEPARATOR)||(LA150_0>=DIGIT && LA150_0<=NEXT)||(LA150_0>=ONLY && LA150_0<=EXIT)||(LA150_0>=SEQUENTIAL && LA150_0<=MAINTAINED)||(LA150_0>=MUTABLE && LA150_0<=QUOT_ER)||LA150_0==L_NCName||LA150_0==EXPLICITLY) ) {
                alt150=1;
            }
            else if ( (LA150_0==LBRACKET) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    // XQueryParser.g:988:36: p_QName
                    {
                    pushFollow(FOLLOW_p_QName_in_p_CompAttrConstructor8325);
                    p_QName421=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName421.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:988:46: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:988:46: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:988:47: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET422=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET422_tree = (XQDTCommonTree)adaptor.create(LBRACKET422);
                    adaptor.addChild(root_0, LBRACKET422_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8332);
                    pm_Expr423=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr423.getTree());
                    RBRACKET424=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8334); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET424_tree = (XQDTCommonTree)adaptor.create(RBRACKET424);
                    adaptor.addChild(root_0, RBRACKET424_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET425=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompAttrConstructor8338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET425_tree = (XQDTCommonTree)adaptor.create(LBRACKET425);
            adaptor.addChild(root_0, LBRACKET425_tree);
            }
            // XQueryParser.g:988:84: ( pm_Expr )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=ANCESTOR && LA151_0<=DECIMAL_SEPARATOR)||(LA151_0>=DIGIT && LA151_0<=NEXT)||(LA151_0>=ONLY && LA151_0<=EXIT)||(LA151_0>=SEQUENTIAL && LA151_0<=MAINTAINED)||(LA151_0>=MUTABLE && LA151_0<=LPAREN)||LA151_0==DOLLAR||(LA151_0>=STAR && LA151_0<=SMALLER)||(LA151_0>=SLASH && LA151_0<=DOT_DOT)||LA151_0==ATTR_SIGN||(LA151_0>=APOS && LA151_0<=QUOT)||LA151_0==L_NCName||(LA151_0>=L_Pragma && LA151_0<=L_DoubleLiteral)||LA151_0==EXPLICITLY) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // XQueryParser.g:988:84: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompAttrConstructor8340);
                    pm_Expr426=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr426.getTree());

                    }
                    break;

            }

            RBRACKET427=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompAttrConstructor8343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET427_tree = (XQDTCommonTree)adaptor.create(RBRACKET427);
            adaptor.addChild(root_0, RBRACKET427_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompAttrConstructor"

    public static class p_CompNamespaceConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompNamespaceConstructor"
    // XQueryParser.g:992:1: p_CompNamespaceConstructor : k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompNamespaceConstructor_return p_CompNamespaceConstructor() throws RecognitionException {
        XQueryParser.p_CompNamespaceConstructor_return retval = new XQueryParser.p_CompNamespaceConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET429=null;
        CommonToken RBRACKET431=null;
        CommonToken LBRACKET432=null;
        CommonToken RBRACKET434=null;
        XQueryParser.p_NCName_return p_NCName428 = null;

        XQueryParser.pm_Expr_return pm_Expr430 = null;

        XQueryParser.pm_Expr_return pm_Expr433 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET429_tree=null;
        XQDTCommonTree RBRACKET431_tree=null;
        XQDTCommonTree LBRACKET432_tree=null;
        XQDTCommonTree RBRACKET434_tree=null;

        try {
            // XQueryParser.g:993:9: (k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:993:11: k= NAMESPACE ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NAMESPACE,FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:993:33: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( ((LA152_0>=ANCESTOR && LA152_0<=DECIMAL_SEPARATOR)||(LA152_0>=DIGIT && LA152_0<=NEXT)||(LA152_0>=ONLY && LA152_0<=EXIT)||(LA152_0>=SEQUENTIAL && LA152_0<=MAINTAINED)||(LA152_0>=MUTABLE && LA152_0<=QUOT_ER)||LA152_0==L_NCName||LA152_0==EXPLICITLY) ) {
                alt152=1;
            }
            else if ( (LA152_0==LBRACKET) ) {
                alt152=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 152, 0, input);

                throw nvae;
            }
            switch (alt152) {
                case 1 :
                    // XQueryParser.g:993:34: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompNamespaceConstructor8376);
                    p_NCName428=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName428.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:993:45: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:993:45: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:993:46: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET429=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8381); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET429_tree = (XQDTCommonTree)adaptor.create(LBRACKET429);
                    adaptor.addChild(root_0, LBRACKET429_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8383);
                    pm_Expr430=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr430.getTree());
                    RBRACKET431=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET431_tree = (XQDTCommonTree)adaptor.create(RBRACKET431);
                    adaptor.addChild(root_0, RBRACKET431_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET432=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET432_tree = (XQDTCommonTree)adaptor.create(LBRACKET432);
            adaptor.addChild(root_0, LBRACKET432_tree);
            }
            // XQueryParser.g:993:83: ( pm_Expr )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( ((LA153_0>=ANCESTOR && LA153_0<=DECIMAL_SEPARATOR)||(LA153_0>=DIGIT && LA153_0<=NEXT)||(LA153_0>=ONLY && LA153_0<=EXIT)||(LA153_0>=SEQUENTIAL && LA153_0<=MAINTAINED)||(LA153_0>=MUTABLE && LA153_0<=LPAREN)||LA153_0==DOLLAR||(LA153_0>=STAR && LA153_0<=SMALLER)||(LA153_0>=SLASH && LA153_0<=DOT_DOT)||LA153_0==ATTR_SIGN||(LA153_0>=APOS && LA153_0<=QUOT)||LA153_0==L_NCName||(LA153_0>=L_Pragma && LA153_0<=L_DoubleLiteral)||LA153_0==EXPLICITLY) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    // XQueryParser.g:993:83: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8391);
                    pm_Expr433=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr433.getTree());

                    }
                    break;

            }

            RBRACKET434=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8394); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET434_tree = (XQDTCommonTree)adaptor.create(RBRACKET434);
            adaptor.addChild(root_0, RBRACKET434_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompNamespaceConstructor"

    public static class p_CompTextConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompTextConstructor"
    // XQueryParser.g:1003:1: p_CompTextConstructor : k= TEXT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompTextConstructor_return p_CompTextConstructor() throws RecognitionException {
        XQueryParser.p_CompTextConstructor_return retval = new XQueryParser.p_CompTextConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET435=null;
        CommonToken RBRACKET437=null;
        XQueryParser.pm_Expr_return pm_Expr436 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET435_tree=null;
        XQDTCommonTree RBRACKET437_tree=null;

        try {
            // XQueryParser.g:1004:9: (k= TEXT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1004:13: k= TEXT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_CompTextConstructor8430); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET435=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompTextConstructor8434); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET435_tree = (XQDTCommonTree)adaptor.create(LBRACKET435);
            adaptor.addChild(root_0, LBRACKET435_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompTextConstructor8436);
            pm_Expr436=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr436.getTree());
            RBRACKET437=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompTextConstructor8438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET437_tree = (XQDTCommonTree)adaptor.create(RBRACKET437);
            adaptor.addChild(root_0, RBRACKET437_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompTextConstructor"

    public static class p_CompBinaryConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompBinaryConstructor"
    // XQueryParser.g:1008:1: p_CompBinaryConstructor : k= BINARY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompBinaryConstructor_return p_CompBinaryConstructor() throws RecognitionException {
        XQueryParser.p_CompBinaryConstructor_return retval = new XQueryParser.p_CompBinaryConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET438=null;
        CommonToken RBRACKET440=null;
        XQueryParser.pm_Expr_return pm_Expr439 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET438_tree=null;
        XQDTCommonTree RBRACKET440_tree=null;

        try {
            // XQueryParser.g:1009:9: (k= BINARY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1009:13: k= BINARY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_CompBinaryConstructor8468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET438=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompBinaryConstructor8472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET438_tree = (XQDTCommonTree)adaptor.create(LBRACKET438);
            adaptor.addChild(root_0, LBRACKET438_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompBinaryConstructor8474);
            pm_Expr439=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr439.getTree());
            RBRACKET440=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompBinaryConstructor8476); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET440_tree = (XQDTCommonTree)adaptor.create(RBRACKET440);
            adaptor.addChild(root_0, RBRACKET440_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompBinaryConstructor"

    public static class p_CompCommentConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompCommentConstructor"
    // XQueryParser.g:1013:1: p_CompCommentConstructor : k= COMMENT LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CompCommentConstructor_return p_CompCommentConstructor() throws RecognitionException {
        XQueryParser.p_CompCommentConstructor_return retval = new XQueryParser.p_CompCommentConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET441=null;
        CommonToken RBRACKET443=null;
        XQueryParser.pm_Expr_return pm_Expr442 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET441_tree=null;
        XQDTCommonTree RBRACKET443_tree=null;

        try {
            // XQueryParser.g:1014:9: (k= COMMENT LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1014:13: k= COMMENT LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CompCommentConstructor8506); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            LBRACKET441=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompCommentConstructor8510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET441_tree = (XQDTCommonTree)adaptor.create(LBRACKET441);
            adaptor.addChild(root_0, LBRACKET441_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CompCommentConstructor8512);
            pm_Expr442=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr442.getTree());
            RBRACKET443=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompCommentConstructor8514); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET443_tree = (XQDTCommonTree)adaptor.create(RBRACKET443);
            adaptor.addChild(root_0, RBRACKET443_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompCommentConstructor"

    public static class p_CompPIConstructor_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CompPIConstructor"
    // XQueryParser.g:1018:1: p_CompPIConstructor : k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET ;
    public final XQueryParser.p_CompPIConstructor_return p_CompPIConstructor() throws RecognitionException {
        XQueryParser.p_CompPIConstructor_return retval = new XQueryParser.p_CompPIConstructor_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken LBRACKET445=null;
        CommonToken RBRACKET447=null;
        CommonToken LBRACKET448=null;
        CommonToken RBRACKET450=null;
        XQueryParser.p_NCName_return p_NCName444 = null;

        XQueryParser.pm_Expr_return pm_Expr446 = null;

        XQueryParser.pm_Expr_return pm_Expr449 = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree LBRACKET445_tree=null;
        XQDTCommonTree RBRACKET447_tree=null;
        XQDTCommonTree LBRACKET448_tree=null;
        XQDTCommonTree RBRACKET450_tree=null;

        try {
            // XQueryParser.g:1019:9: (k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET )
            // XQueryParser.g:1019:13: k= PROCESSING_INSTRUCTION ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) ) LBRACKET ( pm_Expr )? RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if ( state.backtracking==0 ) {
              ak(k);
            }
            // XQueryParser.g:1019:48: ( p_NCName | ( LBRACKET pm_Expr RBRACKET ) )
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( ((LA154_0>=ANCESTOR && LA154_0<=DECIMAL_SEPARATOR)||(LA154_0>=DIGIT && LA154_0<=NEXT)||(LA154_0>=ONLY && LA154_0<=EXIT)||(LA154_0>=SEQUENTIAL && LA154_0<=MAINTAINED)||(LA154_0>=MUTABLE && LA154_0<=QUOT_ER)||LA154_0==L_NCName||LA154_0==EXPLICITLY) ) {
                alt154=1;
            }
            else if ( (LA154_0==LBRACKET) ) {
                alt154=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }
            switch (alt154) {
                case 1 :
                    // XQueryParser.g:1019:49: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_CompPIConstructor8550);
                    p_NCName444=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName444.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1019:60: ( LBRACKET pm_Expr RBRACKET )
                    {
                    // XQueryParser.g:1019:60: ( LBRACKET pm_Expr RBRACKET )
                    // XQueryParser.g:1019:61: LBRACKET pm_Expr RBRACKET
                    {
                    LBRACKET445=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACKET445_tree = (XQDTCommonTree)adaptor.create(LBRACKET445);
                    adaptor.addChild(root_0, LBRACKET445_tree);
                    }
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8557);
                    pm_Expr446=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr446.getTree());
                    RBRACKET447=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8559); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACKET447_tree = (XQDTCommonTree)adaptor.create(RBRACKET447);
                    adaptor.addChild(root_0, RBRACKET447_tree);
                    }

                    }


                    }
                    break;

            }

            LBRACKET448=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CompPIConstructor8563); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET448_tree = (XQDTCommonTree)adaptor.create(LBRACKET448);
            adaptor.addChild(root_0, LBRACKET448_tree);
            }
            // XQueryParser.g:1019:98: ( pm_Expr )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( ((LA155_0>=ANCESTOR && LA155_0<=DECIMAL_SEPARATOR)||(LA155_0>=DIGIT && LA155_0<=NEXT)||(LA155_0>=ONLY && LA155_0<=EXIT)||(LA155_0>=SEQUENTIAL && LA155_0<=MAINTAINED)||(LA155_0>=MUTABLE && LA155_0<=LPAREN)||LA155_0==DOLLAR||(LA155_0>=STAR && LA155_0<=SMALLER)||(LA155_0>=SLASH && LA155_0<=DOT_DOT)||LA155_0==ATTR_SIGN||(LA155_0>=APOS && LA155_0<=QUOT)||LA155_0==L_NCName||(LA155_0>=L_Pragma && LA155_0<=L_DoubleLiteral)||LA155_0==EXPLICITLY) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // XQueryParser.g:1019:98: pm_Expr
                    {
                    pushFollow(FOLLOW_pm_Expr_in_p_CompPIConstructor8565);
                    pm_Expr449=pm_Expr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr449.getTree());

                    }
                    break;

            }

            RBRACKET450=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CompPIConstructor8568); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET450_tree = (XQDTCommonTree)adaptor.create(RBRACKET450);
            adaptor.addChild(root_0, RBRACKET450_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CompPIConstructor"

    public static class p_SingleType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SingleType"
    // XQueryParser.g:1023:1: p_SingleType : p_AtomicType ( QUESTION )? ;
    public final XQueryParser.p_SingleType_return p_SingleType() throws RecognitionException {
        XQueryParser.p_SingleType_return retval = new XQueryParser.p_SingleType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUESTION452=null;
        XQueryParser.p_AtomicType_return p_AtomicType451 = null;


        XQDTCommonTree QUESTION452_tree=null;

        try {
            // XQueryParser.g:1024:9: ( p_AtomicType ( QUESTION )? )
            // XQueryParser.g:1024:13: p_AtomicType ( QUESTION )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AtomicType_in_p_SingleType8596);
            p_AtomicType451=p_AtomicType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType451.getTree());
            // XQueryParser.g:1024:26: ( QUESTION )?
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==QUESTION) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    // XQueryParser.g:1024:26: QUESTION
                    {
                    QUESTION452=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_SingleType8598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    QUESTION452_tree = (XQDTCommonTree)adaptor.create(QUESTION452);
                    adaptor.addChild(root_0, QUESTION452_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SingleType"

    public static class p_TypeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeDeclaration"
    // XQueryParser.g:1028:1: p_TypeDeclaration : k= AS st= p_SequenceType -> ^( TypeDeclaration $st) ;
    public final XQueryParser.p_TypeDeclaration_return p_TypeDeclaration() throws RecognitionException {
        XQueryParser.p_TypeDeclaration_return retval = new XQueryParser.p_TypeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        XQueryParser.p_SequenceType_return st = null;


        XQDTCommonTree k_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleSubtreeStream stream_p_SequenceType=new RewriteRuleSubtreeStream(adaptor,"rule p_SequenceType");
        try {
            // XQueryParser.g:1029:9: (k= AS st= p_SequenceType -> ^( TypeDeclaration $st) )
            // XQueryParser.g:1029:13: k= AS st= p_SequenceType
            {
            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_TypeDeclaration8629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(k);

            if ( state.backtracking==0 ) {
              ak(k);
            }
            pushFollow(FOLLOW_p_SequenceType_in_p_TypeDeclaration8635);
            st=p_SequenceType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_SequenceType.add(st.getTree());


            // AST REWRITE
            // elements: st
            // token labels: 
            // rule labels: retval, st
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_st=new RewriteRuleSubtreeStream(adaptor,"rule st",st!=null?st.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1030:17: -> ^( TypeDeclaration $st)
            {
                // XQueryParser.g:1030:20: ^( TypeDeclaration $st)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(TypeDeclaration, "TypeDeclaration"), root_1);

                adaptor.addChild(root_1, stream_st.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeDeclaration"

    public static class p_SequenceType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SequenceType"
    // XQueryParser.g:1034:1: p_SequenceType : (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) );
    public final XQueryParser.p_SequenceType_return p_SequenceType() throws RecognitionException {
        XQueryParser.p_SequenceType_return retval = new XQueryParser.p_SequenceType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        CommonToken l=null;
        CommonToken r=null;
        XQueryParser.p_ItemType_return it = null;

        XQueryParser.p_OccurrenceIndicator_return oi = null;


        XQDTCommonTree k_tree=null;
        XQDTCommonTree l_tree=null;
        XQDTCommonTree r_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_EMPTY_SEQUENCE=new RewriteRuleTokenStream(adaptor,"token EMPTY_SEQUENCE");
        RewriteRuleSubtreeStream stream_p_OccurrenceIndicator=new RewriteRuleSubtreeStream(adaptor,"rule p_OccurrenceIndicator");
        RewriteRuleSubtreeStream stream_p_ItemType=new RewriteRuleSubtreeStream(adaptor,"rule p_ItemType");
        try {
            // XQueryParser.g:1035:9: (k= EMPTY_SEQUENCE l= LPAREN r= RPAREN -> ^( SequenceType ^( EmptySequenceTest $k $l $r) ) | it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )? -> ^( SequenceType $it ( $oi)? ) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==EMPTY_SEQUENCE) ) {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==LPAREN) ) {
                    alt158=1;
                }
                else if ( (LA158_1==EOF||(LA158_1>=AND && LA158_1<=AT)||LA158_1==CASE||LA158_1==COLLATION||LA158_1==DEFAULT||(LA158_1>=DESCENDING && LA158_1<=DIV)||(LA158_1>=ELSE && LA158_1<=EMPTY)||LA158_1==EQ||(LA158_1>=EXCEPT && LA158_1<=EXTERNAL)||LA158_1==FOR||LA158_1==GE||(LA158_1>=GT && LA158_1<=IDIV)||LA158_1==IN||(LA158_1>=INSTANCE && LA158_1<=IS)||LA158_1==LE||(LA158_1>=LET && LA158_1<=MOD)||LA158_1==NE||(LA158_1>=OR && LA158_1<=ORDER)||(LA158_1>=RETURN && LA158_1<=SATISFIES)||LA158_1==STABLE||LA158_1==TO||LA158_1==UNION||LA158_1==WHERE||LA158_1==COUNT||(LA158_1>=END && LA158_1<=GROUP)||LA158_1==ONLY||LA158_1==START||(LA158_1>=AFTER && LA158_1<=BEFORE)||LA158_1==INTO||LA158_1==MODIFY||LA158_1==WITH||LA158_1==RPAREN||(LA158_1>=LBRACKET && LA158_1<=RBRACKET)||(LA158_1>=RSQUARE && LA158_1<=NOTEQUAL)||(LA158_1>=COMMA && LA158_1<=GREATER_GREATER)||LA158_1==COLON||(LA158_1>=SEMICOLON && LA158_1<=VBAR)) ) {
                    alt158=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA158_0>=ANCESTOR && LA158_0<=EMPTY)||(LA158_0>=ENCODING && LA158_0<=DECIMAL_SEPARATOR)||(LA158_0>=DIGIT && LA158_0<=NEXT)||(LA158_0>=ONLY && LA158_0<=EXIT)||(LA158_0>=SEQUENTIAL && LA158_0<=MAINTAINED)||(LA158_0>=MUTABLE && LA158_0<=QUOT_ER)||LA158_0==L_NCName||LA158_0==EXPLICITLY) ) {
                alt158=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // XQueryParser.g:1035:13: k= EMPTY_SEQUENCE l= LPAREN r= RPAREN
                    {
                    k=(CommonToken)match(input,EMPTY_SEQUENCE,FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EMPTY_SEQUENCE.add(k);

                    if ( state.backtracking==0 ) {
                      ak(k);
                    }
                    l=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SequenceType8696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    r=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SequenceType8700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(r);



                    // AST REWRITE
                    // elements: l, r, k
                    // token labels: k, r, l
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
                    RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                    RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1036:17: -> ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                    {
                        // XQueryParser.g:1036:20: ^( SequenceType ^( EmptySequenceTest $k $l $r) )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        // XQueryParser.g:1036:35: ^( EmptySequenceTest $k $l $r)
                        {
                        XQDTCommonTree root_2 = (XQDTCommonTree)adaptor.nil();
                        root_2 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(EmptySequenceTest, "EmptySequenceTest"), root_2);

                        adaptor.addChild(root_2, stream_k.nextNode());
                        adaptor.addChild(root_2, stream_l.nextNode());
                        adaptor.addChild(root_2, stream_r.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1037:11: it= p_ItemType ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    {
                    pushFollow(FOLLOW_p_ItemType_in_p_SequenceType8749);
                    it=p_ItemType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ItemType.add(it.getTree());
                    // XQueryParser.g:1037:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?
                    int alt157=2;
                    alt157 = dfa157.predict(input);
                    switch (alt157) {
                        case 1 :
                            // XQueryParser.g:1037:26: ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator
                            {
                            pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8760);
                            oi=p_OccurrenceIndicator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_p_OccurrenceIndicator.add(oi.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: it, oi
                    // token labels: 
                    // rule labels: oi, it, retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_oi=new RewriteRuleSubtreeStream(adaptor,"rule oi",oi!=null?oi.tree:null);
                    RewriteRuleSubtreeStream stream_it=new RewriteRuleSubtreeStream(adaptor,"rule it",it!=null?it.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1038:17: -> ^( SequenceType $it ( $oi)? )
                    {
                        // XQueryParser.g:1038:20: ^( SequenceType $it ( $oi)? )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(SequenceType, "SequenceType"), root_1);

                        adaptor.addChild(root_1, stream_it.nextTree());
                        // XQueryParser.g:1038:39: ( $oi)?
                        if ( stream_oi.hasNext() ) {
                            adaptor.addChild(root_1, stream_oi.nextTree());

                        }
                        stream_oi.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SequenceType"

    public static class p_OccurrenceIndicator_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_OccurrenceIndicator"
    // XQueryParser.g:1042:1: p_OccurrenceIndicator : ( QUESTION | STAR | PLUS );
    public final XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator() throws RecognitionException {
        XQueryParser.p_OccurrenceIndicator_return retval = new XQueryParser.p_OccurrenceIndicator_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set453=null;

        XQDTCommonTree set453_tree=null;

        try {
            // XQueryParser.g:1043:9: ( QUESTION | STAR | PLUS )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set453=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=QUESTION && input.LA(1)<=PLUS) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set453));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_OccurrenceIndicator"

    public static class p_ItemType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ItemType"
    // XQueryParser.g:1047:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );
    public final XQueryParser.p_ItemType_return p_ItemType() throws RecognitionException {
        XQueryParser.p_ItemType_return retval = new XQueryParser.p_ItemType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken BINARY455=null;
        CommonToken LPAREN456=null;
        CommonToken RPAREN457=null;
        CommonToken ITEM458=null;
        CommonToken LPAREN459=null;
        CommonToken RPAREN460=null;
        XQueryParser.p_KindTest_return p_KindTest454 = null;

        XQueryParser.p_AtomicType_return p_AtomicType461 = null;


        XQDTCommonTree BINARY455_tree=null;
        XQDTCommonTree LPAREN456_tree=null;
        XQDTCommonTree RPAREN457_tree=null;
        XQDTCommonTree ITEM458_tree=null;
        XQDTCommonTree LPAREN459_tree=null;
        XQDTCommonTree RPAREN460_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ITEM=new RewriteRuleTokenStream(adaptor,"token ITEM");
        RewriteRuleTokenStream stream_BINARY=new RewriteRuleTokenStream(adaptor,"token BINARY");
        RewriteRuleSubtreeStream stream_p_KindTest=new RewriteRuleSubtreeStream(adaptor,"rule p_KindTest");
        try {
            // XQueryParser.g:1048:9: ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType )
            int alt159=4;
            alt159 = dfa159.predict(input);
            switch (alt159) {
                case 1 :
                    // XQueryParser.g:1048:11: p_KindTest
                    {
                    pushFollow(FOLLOW_p_KindTest_in_p_ItemType8862);
                    p_KindTest454=p_KindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_KindTest.add(p_KindTest454.getTree());


                    // AST REWRITE
                    // elements: p_KindTest
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1049:17: -> ^( KindTest p_KindTest )
                    {
                        // XQueryParser.g:1049:20: ^( KindTest p_KindTest )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(KindTest, "KindTest"), root_1);

                        adaptor.addChild(root_1, stream_p_KindTest.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1050:11: {...}? => ( BINARY LPAREN RPAREN )
                    {
                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_ItemType", "lc(MLS)");
                    }
                    // XQueryParser.g:1050:24: ( BINARY LPAREN RPAREN )
                    // XQueryParser.g:1050:25: BINARY LPAREN RPAREN
                    {
                    BINARY455=(CommonToken)match(input,BINARY,FOLLOW_BINARY_in_p_ItemType8902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BINARY.add(BINARY455);

                    LPAREN456=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN456);

                    RPAREN457=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN457);


                    }



                    // AST REWRITE
                    // elements: LPAREN, RPAREN, BINARY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1051:17: -> ^( BinaryTest BINARY LPAREN RPAREN )
                    {
                        // XQueryParser.g:1051:20: ^( BinaryTest BINARY LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BinaryTest, "BinaryTest"), root_1);

                        adaptor.addChild(root_1, stream_BINARY.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // XQueryParser.g:1052:11: ( ITEM LPAREN RPAREN )
                    {
                    // XQueryParser.g:1052:11: ( ITEM LPAREN RPAREN )
                    // XQueryParser.g:1052:12: ITEM LPAREN RPAREN
                    {
                    ITEM458=(CommonToken)match(input,ITEM,FOLLOW_ITEM_in_p_ItemType8948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ITEM.add(ITEM458);

                    LPAREN459=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ItemType8950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN459);

                    RPAREN460=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ItemType8952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN460);


                    }



                    // AST REWRITE
                    // elements: ITEM, RPAREN, LPAREN
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1053:17: -> ^( ItemTest ITEM LPAREN RPAREN )
                    {
                        // XQueryParser.g:1053:20: ^( ItemTest ITEM LPAREN RPAREN )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(ItemTest, "ItemTest"), root_1);

                        adaptor.addChild(root_1, stream_ITEM.nextNode());
                        adaptor.addChild(root_1, stream_LPAREN.nextNode());
                        adaptor.addChild(root_1, stream_RPAREN.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // XQueryParser.g:1054:11: p_AtomicType
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AtomicType_in_p_ItemType8993);
                    p_AtomicType461=p_AtomicType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AtomicType461.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ItemType"

    public static class p_AtomicType_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AtomicType"
    // XQueryParser.g:1058:1: p_AtomicType : p_QName -> ^( AtomicType p_QName ) ;
    public final XQueryParser.p_AtomicType_return p_AtomicType() throws RecognitionException {
        XQueryParser.p_AtomicType_return retval = new XQueryParser.p_AtomicType_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName462 = null;


        RewriteRuleSubtreeStream stream_p_QName=new RewriteRuleSubtreeStream(adaptor,"rule p_QName");
        try {
            // XQueryParser.g:1059:9: ( p_QName -> ^( AtomicType p_QName ) )
            // XQueryParser.g:1059:11: p_QName
            {
            pushFollow(FOLLOW_p_QName_in_p_AtomicType9019);
            p_QName462=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_QName.add(p_QName462.getTree());


            // AST REWRITE
            // elements: p_QName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1060:17: -> ^( AtomicType p_QName )
            {
                // XQueryParser.g:1060:20: ^( AtomicType p_QName )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(AtomicType, "AtomicType"), root_1);

                adaptor.addChild(root_1, stream_p_QName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AtomicType"

    public static class p_KindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_KindTest"
    // XQueryParser.g:1064:1: p_KindTest : ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest );
    public final XQueryParser.p_KindTest_return p_KindTest() throws RecognitionException {
        XQueryParser.p_KindTest_return retval = new XQueryParser.p_KindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_DocumentTest_return p_DocumentTest463 = null;

        XQueryParser.p_ElementTest_return p_ElementTest464 = null;

        XQueryParser.p_AttributeTest_return p_AttributeTest465 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest466 = null;

        XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest467 = null;

        XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest468 = null;

        XQueryParser.p_PITest_return p_PITest469 = null;

        XQueryParser.p_CommentTest_return p_CommentTest470 = null;

        XQueryParser.p_TextTest_return p_TextTest471 = null;

        XQueryParser.p_AnyKindTest_return p_AnyKindTest472 = null;



        try {
            // XQueryParser.g:1065:9: ( p_DocumentTest | p_ElementTest | p_AttributeTest | p_SchemaElementTest | p_SchemaAttributeTest | p_NamespaceNodeTest | p_PITest | p_CommentTest | p_TextTest | p_AnyKindTest )
            int alt160=10;
            switch ( input.LA(1) ) {
            case DOCUMENT_NODE:
                {
                alt160=1;
                }
                break;
            case ELEMENT:
                {
                alt160=2;
                }
                break;
            case ATTRIBUTE:
                {
                alt160=3;
                }
                break;
            case SCHEMA_ELEMENT:
                {
                alt160=4;
                }
                break;
            case SCHEMA_ATTRIBUTE:
                {
                alt160=5;
                }
                break;
            case NAMESPACE_NODE:
                {
                alt160=6;
                }
                break;
            case PROCESSING_INSTRUCTION:
                {
                alt160=7;
                }
                break;
            case COMMENT:
                {
                alt160=8;
                }
                break;
            case TEXT:
                {
                alt160=9;
                }
                break;
            case NODE:
                {
                alt160=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 160, 0, input);

                throw nvae;
            }

            switch (alt160) {
                case 1 :
                    // XQueryParser.g:1065:11: p_DocumentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_DocumentTest_in_p_KindTest9069);
                    p_DocumentTest463=p_DocumentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_DocumentTest463.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1066:11: p_ElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_ElementTest_in_p_KindTest9081);
                    p_ElementTest464=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest464.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1067:11: p_AttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AttributeTest_in_p_KindTest9093);
                    p_AttributeTest465=p_AttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeTest465.getTree());

                    }
                    break;
                case 4 :
                    // XQueryParser.g:1068:11: p_SchemaElementTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_KindTest9105);
                    p_SchemaElementTest466=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest466.getTree());

                    }
                    break;
                case 5 :
                    // XQueryParser.g:1069:11: p_SchemaAttributeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_SchemaAttributeTest_in_p_KindTest9117);
                    p_SchemaAttributeTest467=p_SchemaAttributeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaAttributeTest467.getTree());

                    }
                    break;
                case 6 :
                    // XQueryParser.g:1070:11: p_NamespaceNodeTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NamespaceNodeTest_in_p_KindTest9129);
                    p_NamespaceNodeTest468=p_NamespaceNodeTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NamespaceNodeTest468.getTree());

                    }
                    break;
                case 7 :
                    // XQueryParser.g:1071:11: p_PITest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_PITest_in_p_KindTest9141);
                    p_PITest469=p_PITest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PITest469.getTree());

                    }
                    break;
                case 8 :
                    // XQueryParser.g:1072:11: p_CommentTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_CommentTest_in_p_KindTest9153);
                    p_CommentTest470=p_CommentTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CommentTest470.getTree());

                    }
                    break;
                case 9 :
                    // XQueryParser.g:1073:11: p_TextTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_TextTest_in_p_KindTest9165);
                    p_TextTest471=p_TextTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TextTest471.getTree());

                    }
                    break;
                case 10 :
                    // XQueryParser.g:1074:11: p_AnyKindTest
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_AnyKindTest_in_p_KindTest9177);
                    p_AnyKindTest472=p_AnyKindTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AnyKindTest472.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_KindTest"

    public static class p_AnyKindTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AnyKindTest"
    // XQueryParser.g:1078:1: p_AnyKindTest : NODE LPAREN RPAREN ;
    public final XQueryParser.p_AnyKindTest_return p_AnyKindTest() throws RecognitionException {
        XQueryParser.p_AnyKindTest_return retval = new XQueryParser.p_AnyKindTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NODE473=null;
        CommonToken LPAREN474=null;
        CommonToken RPAREN475=null;

        XQDTCommonTree NODE473_tree=null;
        XQDTCommonTree LPAREN474_tree=null;
        XQDTCommonTree RPAREN475_tree=null;

        try {
            // XQueryParser.g:1079:9: ( NODE LPAREN RPAREN )
            // XQueryParser.g:1079:13: NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NODE473=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_AnyKindTest9205); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NODE473_tree = (XQDTCommonTree)adaptor.create(NODE473);
            adaptor.addChild(root_0, NODE473_tree);
            }
            LPAREN474=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AnyKindTest9207); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN474_tree = (XQDTCommonTree)adaptor.create(LPAREN474);
            adaptor.addChild(root_0, LPAREN474_tree);
            }
            RPAREN475=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AnyKindTest9209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN475_tree = (XQDTCommonTree)adaptor.create(RPAREN475);
            adaptor.addChild(root_0, RPAREN475_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AnyKindTest"

    public static class p_DocumentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DocumentTest"
    // XQueryParser.g:1083:1: p_DocumentTest : DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN ;
    public final XQueryParser.p_DocumentTest_return p_DocumentTest() throws RecognitionException {
        XQueryParser.p_DocumentTest_return retval = new XQueryParser.p_DocumentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOCUMENT_NODE476=null;
        CommonToken LPAREN477=null;
        CommonToken RPAREN480=null;
        XQueryParser.p_ElementTest_return p_ElementTest478 = null;

        XQueryParser.p_SchemaElementTest_return p_SchemaElementTest479 = null;


        XQDTCommonTree DOCUMENT_NODE476_tree=null;
        XQDTCommonTree LPAREN477_tree=null;
        XQDTCommonTree RPAREN480_tree=null;

        try {
            // XQueryParser.g:1084:9: ( DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN )
            // XQueryParser.g:1084:13: DOCUMENT_NODE LPAREN ( p_ElementTest | p_SchemaElementTest )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOCUMENT_NODE476=(CommonToken)match(input,DOCUMENT_NODE,FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9237); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOCUMENT_NODE476_tree = (XQDTCommonTree)adaptor.create(DOCUMENT_NODE476);
            adaptor.addChild(root_0, DOCUMENT_NODE476_tree);
            }
            LPAREN477=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_DocumentTest9239); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN477_tree = (XQDTCommonTree)adaptor.create(LPAREN477);
            adaptor.addChild(root_0, LPAREN477_tree);
            }
            // XQueryParser.g:1084:34: ( p_ElementTest | p_SchemaElementTest )?
            int alt161=3;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==ELEMENT) ) {
                alt161=1;
            }
            else if ( (LA161_0==SCHEMA_ELEMENT) ) {
                alt161=2;
            }
            switch (alt161) {
                case 1 :
                    // XQueryParser.g:1084:35: p_ElementTest
                    {
                    pushFollow(FOLLOW_p_ElementTest_in_p_DocumentTest9242);
                    p_ElementTest478=p_ElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementTest478.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1084:51: p_SchemaElementTest
                    {
                    pushFollow(FOLLOW_p_SchemaElementTest_in_p_DocumentTest9246);
                    p_SchemaElementTest479=p_SchemaElementTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SchemaElementTest479.getTree());

                    }
                    break;

            }

            RPAREN480=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_DocumentTest9250); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN480_tree = (XQDTCommonTree)adaptor.create(RPAREN480);
            adaptor.addChild(root_0, RPAREN480_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DocumentTest"

    public static class p_TextTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TextTest"
    // XQueryParser.g:1087:1: p_TextTest : TEXT LPAREN RPAREN ;
    public final XQueryParser.p_TextTest_return p_TextTest() throws RecognitionException {
        XQueryParser.p_TextTest_return retval = new XQueryParser.p_TextTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken TEXT481=null;
        CommonToken LPAREN482=null;
        CommonToken RPAREN483=null;

        XQDTCommonTree TEXT481_tree=null;
        XQDTCommonTree LPAREN482_tree=null;
        XQDTCommonTree RPAREN483_tree=null;

        try {
            // XQueryParser.g:1088:9: ( TEXT LPAREN RPAREN )
            // XQueryParser.g:1088:13: TEXT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            TEXT481=(CommonToken)match(input,TEXT,FOLLOW_TEXT_in_p_TextTest9270); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TEXT481_tree = (XQDTCommonTree)adaptor.create(TEXT481);
            adaptor.addChild(root_0, TEXT481_tree);
            }
            LPAREN482=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_TextTest9272); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN482_tree = (XQDTCommonTree)adaptor.create(LPAREN482);
            adaptor.addChild(root_0, LPAREN482_tree);
            }
            RPAREN483=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_TextTest9274); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN483_tree = (XQDTCommonTree)adaptor.create(RPAREN483);
            adaptor.addChild(root_0, RPAREN483_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TextTest"

    public static class p_CommentTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CommentTest"
    // XQueryParser.g:1092:1: p_CommentTest : COMMENT LPAREN RPAREN ;
    public final XQueryParser.p_CommentTest_return p_CommentTest() throws RecognitionException {
        XQueryParser.p_CommentTest_return retval = new XQueryParser.p_CommentTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMENT484=null;
        CommonToken LPAREN485=null;
        CommonToken RPAREN486=null;

        XQDTCommonTree COMMENT484_tree=null;
        XQDTCommonTree LPAREN485_tree=null;
        XQDTCommonTree RPAREN486_tree=null;

        try {
            // XQueryParser.g:1093:9: ( COMMENT LPAREN RPAREN )
            // XQueryParser.g:1093:13: COMMENT LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            COMMENT484=(CommonToken)match(input,COMMENT,FOLLOW_COMMENT_in_p_CommentTest9302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMENT484_tree = (XQDTCommonTree)adaptor.create(COMMENT484);
            adaptor.addChild(root_0, COMMENT484_tree);
            }
            LPAREN485=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CommentTest9304); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN485_tree = (XQDTCommonTree)adaptor.create(LPAREN485);
            adaptor.addChild(root_0, LPAREN485_tree);
            }
            RPAREN486=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CommentTest9306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN486_tree = (XQDTCommonTree)adaptor.create(RPAREN486);
            adaptor.addChild(root_0, RPAREN486_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CommentTest"

    public static class p_NamespaceNodeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NamespaceNodeTest"
    // XQueryParser.g:1097:1: p_NamespaceNodeTest : NAMESPACE_NODE LPAREN RPAREN ;
    public final XQueryParser.p_NamespaceNodeTest_return p_NamespaceNodeTest() throws RecognitionException {
        XQueryParser.p_NamespaceNodeTest_return retval = new XQueryParser.p_NamespaceNodeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken NAMESPACE_NODE487=null;
        CommonToken LPAREN488=null;
        CommonToken RPAREN489=null;

        XQDTCommonTree NAMESPACE_NODE487_tree=null;
        XQDTCommonTree LPAREN488_tree=null;
        XQDTCommonTree RPAREN489_tree=null;

        try {
            // XQueryParser.g:1098:9: ( NAMESPACE_NODE LPAREN RPAREN )
            // XQueryParser.g:1098:11: NAMESPACE_NODE LPAREN RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            NAMESPACE_NODE487=(CommonToken)match(input,NAMESPACE_NODE,FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9332); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAMESPACE_NODE487_tree = (XQDTCommonTree)adaptor.create(NAMESPACE_NODE487);
            adaptor.addChild(root_0, NAMESPACE_NODE487_tree);
            }
            LPAREN488=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_NamespaceNodeTest9334); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN488_tree = (XQDTCommonTree)adaptor.create(LPAREN488);
            adaptor.addChild(root_0, LPAREN488_tree);
            }
            RPAREN489=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_NamespaceNodeTest9336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN489_tree = (XQDTCommonTree)adaptor.create(RPAREN489);
            adaptor.addChild(root_0, RPAREN489_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NamespaceNodeTest"

    public static class p_PITest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_PITest"
    // XQueryParser.g:1102:1: p_PITest : PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN ;
    public final XQueryParser.p_PITest_return p_PITest() throws RecognitionException {
        XQueryParser.p_PITest_return retval = new XQueryParser.p_PITest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken PROCESSING_INSTRUCTION490=null;
        CommonToken LPAREN491=null;
        CommonToken RPAREN494=null;
        XQueryParser.p_NCName_return p_NCName492 = null;

        XQueryParser.p_StringLiteral_return p_StringLiteral493 = null;


        XQDTCommonTree PROCESSING_INSTRUCTION490_tree=null;
        XQDTCommonTree LPAREN491_tree=null;
        XQDTCommonTree RPAREN494_tree=null;

        try {
            // XQueryParser.g:1103:9: ( PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN )
            // XQueryParser.g:1103:13: PROCESSING_INSTRUCTION LPAREN ( p_NCName | p_StringLiteral )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            PROCESSING_INSTRUCTION490=(CommonToken)match(input,PROCESSING_INSTRUCTION,FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9364); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PROCESSING_INSTRUCTION490_tree = (XQDTCommonTree)adaptor.create(PROCESSING_INSTRUCTION490);
            adaptor.addChild(root_0, PROCESSING_INSTRUCTION490_tree);
            }
            LPAREN491=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_PITest9366); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN491_tree = (XQDTCommonTree)adaptor.create(LPAREN491);
            adaptor.addChild(root_0, LPAREN491_tree);
            }
            // XQueryParser.g:1103:43: ( p_NCName | p_StringLiteral )?
            int alt162=3;
            int LA162_0 = input.LA(1);

            if ( ((LA162_0>=ANCESTOR && LA162_0<=DECIMAL_SEPARATOR)||(LA162_0>=DIGIT && LA162_0<=NEXT)||(LA162_0>=ONLY && LA162_0<=EXIT)||(LA162_0>=SEQUENTIAL && LA162_0<=MAINTAINED)||(LA162_0>=MUTABLE && LA162_0<=QUOT_ER)||LA162_0==L_NCName||LA162_0==EXPLICITLY) ) {
                alt162=1;
            }
            else if ( ((LA162_0>=APOS && LA162_0<=QUOT)) ) {
                alt162=2;
            }
            switch (alt162) {
                case 1 :
                    // XQueryParser.g:1103:44: p_NCName
                    {
                    pushFollow(FOLLOW_p_NCName_in_p_PITest9369);
                    p_NCName492=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName492.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1103:55: p_StringLiteral
                    {
                    pushFollow(FOLLOW_p_StringLiteral_in_p_PITest9373);
                    p_StringLiteral493=p_StringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_StringLiteral493.getTree());

                    }
                    break;

            }

            RPAREN494=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_PITest9377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN494_tree = (XQDTCommonTree)adaptor.create(RPAREN494);
            adaptor.addChild(root_0, RPAREN494_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_PITest"

    public static class p_AttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeTest"
    // XQueryParser.g:1107:1: p_AttributeTest : ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN ;
    public final XQueryParser.p_AttributeTest_return p_AttributeTest() throws RecognitionException {
        XQueryParser.p_AttributeTest_return retval = new XQueryParser.p_AttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ATTRIBUTE495=null;
        CommonToken LPAREN496=null;
        CommonToken COMMA498=null;
        CommonToken RPAREN500=null;
        XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard497 = null;

        XQueryParser.p_TypeName_return p_TypeName499 = null;


        XQDTCommonTree ATTRIBUTE495_tree=null;
        XQDTCommonTree LPAREN496_tree=null;
        XQDTCommonTree COMMA498_tree=null;
        XQDTCommonTree RPAREN500_tree=null;

        try {
            // XQueryParser.g:1108:9: ( ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN )
            // XQueryParser.g:1108:13: ATTRIBUTE LPAREN ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ATTRIBUTE495=(CommonToken)match(input,ATTRIBUTE,FOLLOW_ATTRIBUTE_in_p_AttributeTest9405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ATTRIBUTE495_tree = (XQDTCommonTree)adaptor.create(ATTRIBUTE495);
            adaptor.addChild(root_0, ATTRIBUTE495_tree);
            }
            LPAREN496=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_AttributeTest9407); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN496_tree = (XQDTCommonTree)adaptor.create(LPAREN496);
            adaptor.addChild(root_0, LPAREN496_tree);
            }
            // XQueryParser.g:1108:30: ( p_AttribNameOrWildcard ( COMMA p_TypeName )? )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( ((LA164_0>=ANCESTOR && LA164_0<=DECIMAL_SEPARATOR)||(LA164_0>=DIGIT && LA164_0<=NEXT)||(LA164_0>=ONLY && LA164_0<=EXIT)||(LA164_0>=SEQUENTIAL && LA164_0<=MAINTAINED)||(LA164_0>=MUTABLE && LA164_0<=QUOT_ER)||LA164_0==STAR||LA164_0==L_NCName||LA164_0==EXPLICITLY) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // XQueryParser.g:1108:31: p_AttribNameOrWildcard ( COMMA p_TypeName )?
                    {
                    pushFollow(FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9410);
                    p_AttribNameOrWildcard497=p_AttribNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttribNameOrWildcard497.getTree());
                    // XQueryParser.g:1108:54: ( COMMA p_TypeName )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==COMMA) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // XQueryParser.g:1108:55: COMMA p_TypeName
                            {
                            COMMA498=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_AttributeTest9413); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA498_tree = (XQDTCommonTree)adaptor.create(COMMA498);
                            adaptor.addChild(root_0, COMMA498_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_AttributeTest9415);
                            p_TypeName499=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName499.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN500=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_AttributeTest9421); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN500_tree = (XQDTCommonTree)adaptor.create(RPAREN500);
            adaptor.addChild(root_0, RPAREN500_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeTest"

    public static class p_AttribNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttribNameOrWildcard"
    // XQueryParser.g:1112:1: p_AttribNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_AttribNameOrWildcard_return p_AttribNameOrWildcard() throws RecognitionException {
        XQueryParser.p_AttribNameOrWildcard_return retval = new XQueryParser.p_AttribNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR502=null;
        XQueryParser.p_QName_return p_QName501 = null;


        XQDTCommonTree STAR502_tree=null;

        try {
            // XQueryParser.g:1113:9: ( p_QName | STAR )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( ((LA165_0>=ANCESTOR && LA165_0<=DECIMAL_SEPARATOR)||(LA165_0>=DIGIT && LA165_0<=NEXT)||(LA165_0>=ONLY && LA165_0<=EXIT)||(LA165_0>=SEQUENTIAL && LA165_0<=MAINTAINED)||(LA165_0>=MUTABLE && LA165_0<=QUOT_ER)||LA165_0==L_NCName||LA165_0==EXPLICITLY) ) {
                alt165=1;
            }
            else if ( (LA165_0==STAR) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // XQueryParser.g:1113:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_AttribNameOrWildcard9451);
                    p_QName501=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName501.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1113:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR502=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_AttribNameOrWildcard9455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR502_tree = (XQDTCommonTree)adaptor.create(STAR502);
                    adaptor.addChild(root_0, STAR502_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttribNameOrWildcard"

    public static class p_SchemaAttributeTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaAttributeTest"
    // XQueryParser.g:1117:1: p_SchemaAttributeTest : SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN ;
    public final XQueryParser.p_SchemaAttributeTest_return p_SchemaAttributeTest() throws RecognitionException {
        XQueryParser.p_SchemaAttributeTest_return retval = new XQueryParser.p_SchemaAttributeTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ATTRIBUTE503=null;
        CommonToken LPAREN504=null;
        CommonToken RPAREN506=null;
        XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration505 = null;


        XQDTCommonTree SCHEMA_ATTRIBUTE503_tree=null;
        XQDTCommonTree LPAREN504_tree=null;
        XQDTCommonTree RPAREN506_tree=null;

        try {
            // XQueryParser.g:1118:9: ( SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN )
            // XQueryParser.g:1118:13: SCHEMA_ATTRIBUTE LPAREN p_AttributeDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ATTRIBUTE503=(CommonToken)match(input,SCHEMA_ATTRIBUTE,FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ATTRIBUTE503_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ATTRIBUTE503);
            adaptor.addChild(root_0, SCHEMA_ATTRIBUTE503_tree);
            }
            LPAREN504=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaAttributeTest9485); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN504_tree = (XQDTCommonTree)adaptor.create(LPAREN504);
            adaptor.addChild(root_0, LPAREN504_tree);
            }
            pushFollow(FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9487);
            p_AttributeDeclaration505=p_AttributeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeDeclaration505.getTree());
            RPAREN506=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaAttributeTest9489); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN506_tree = (XQDTCommonTree)adaptor.create(RPAREN506);
            adaptor.addChild(root_0, RPAREN506_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaAttributeTest"

    public static class p_AttributeDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeDeclaration"
    // XQueryParser.g:1122:1: p_AttributeDeclaration : p_AttributeName ;
    public final XQueryParser.p_AttributeDeclaration_return p_AttributeDeclaration() throws RecognitionException {
        XQueryParser.p_AttributeDeclaration_return retval = new XQueryParser.p_AttributeDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_AttributeName_return p_AttributeName507 = null;



        try {
            // XQueryParser.g:1123:9: ( p_AttributeName )
            // XQueryParser.g:1123:11: p_AttributeName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_AttributeName_in_p_AttributeDeclaration9515);
            p_AttributeName507=p_AttributeName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_AttributeName507.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeDeclaration"

    public static class p_ElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementTest"
    // XQueryParser.g:1127:1: p_ElementTest : ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN ;
    public final XQueryParser.p_ElementTest_return p_ElementTest() throws RecognitionException {
        XQueryParser.p_ElementTest_return retval = new XQueryParser.p_ElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ELEMENT508=null;
        CommonToken LPAREN509=null;
        CommonToken COMMA511=null;
        CommonToken QUESTION513=null;
        CommonToken RPAREN514=null;
        XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard510 = null;

        XQueryParser.p_TypeName_return p_TypeName512 = null;


        XQDTCommonTree ELEMENT508_tree=null;
        XQDTCommonTree LPAREN509_tree=null;
        XQDTCommonTree COMMA511_tree=null;
        XQDTCommonTree QUESTION513_tree=null;
        XQDTCommonTree RPAREN514_tree=null;

        try {
            // XQueryParser.g:1128:9: ( ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN )
            // XQueryParser.g:1128:13: ELEMENT LPAREN ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ELEMENT508=(CommonToken)match(input,ELEMENT,FOLLOW_ELEMENT_in_p_ElementTest9543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ELEMENT508_tree = (XQDTCommonTree)adaptor.create(ELEMENT508);
            adaptor.addChild(root_0, ELEMENT508_tree);
            }
            LPAREN509=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_ElementTest9545); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN509_tree = (XQDTCommonTree)adaptor.create(LPAREN509);
            adaptor.addChild(root_0, LPAREN509_tree);
            }
            // XQueryParser.g:1128:28: ( p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )? )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( ((LA168_0>=ANCESTOR && LA168_0<=DECIMAL_SEPARATOR)||(LA168_0>=DIGIT && LA168_0<=NEXT)||(LA168_0>=ONLY && LA168_0<=EXIT)||(LA168_0>=SEQUENTIAL && LA168_0<=MAINTAINED)||(LA168_0>=MUTABLE && LA168_0<=QUOT_ER)||LA168_0==STAR||LA168_0==L_NCName||LA168_0==EXPLICITLY) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // XQueryParser.g:1128:29: p_ElementNameOrWildcard ( COMMA p_TypeName ( QUESTION )? )?
                    {
                    pushFollow(FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9548);
                    p_ElementNameOrWildcard510=p_ElementNameOrWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementNameOrWildcard510.getTree());
                    // XQueryParser.g:1128:53: ( COMMA p_TypeName ( QUESTION )? )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==COMMA) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // XQueryParser.g:1128:54: COMMA p_TypeName ( QUESTION )?
                            {
                            COMMA511=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ElementTest9551); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA511_tree = (XQDTCommonTree)adaptor.create(COMMA511);
                            adaptor.addChild(root_0, COMMA511_tree);
                            }
                            pushFollow(FOLLOW_p_TypeName_in_p_ElementTest9553);
                            p_TypeName512=p_TypeName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeName512.getTree());
                            // XQueryParser.g:1128:71: ( QUESTION )?
                            int alt166=2;
                            int LA166_0 = input.LA(1);

                            if ( (LA166_0==QUESTION) ) {
                                alt166=1;
                            }
                            switch (alt166) {
                                case 1 :
                                    // XQueryParser.g:1128:71: QUESTION
                                    {
                                    QUESTION513=(CommonToken)match(input,QUESTION,FOLLOW_QUESTION_in_p_ElementTest9555); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    QUESTION513_tree = (XQDTCommonTree)adaptor.create(QUESTION513);
                                    adaptor.addChild(root_0, QUESTION513_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN514=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_ElementTest9562); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN514_tree = (XQDTCommonTree)adaptor.create(RPAREN514);
            adaptor.addChild(root_0, RPAREN514_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementTest"

    public static class p_ElementNameOrWildcard_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementNameOrWildcard"
    // XQueryParser.g:1132:1: p_ElementNameOrWildcard : ( p_QName | STAR );
    public final XQueryParser.p_ElementNameOrWildcard_return p_ElementNameOrWildcard() throws RecognitionException {
        XQueryParser.p_ElementNameOrWildcard_return retval = new XQueryParser.p_ElementNameOrWildcard_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken STAR516=null;
        XQueryParser.p_QName_return p_QName515 = null;


        XQDTCommonTree STAR516_tree=null;

        try {
            // XQueryParser.g:1133:9: ( p_QName | STAR )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( ((LA169_0>=ANCESTOR && LA169_0<=DECIMAL_SEPARATOR)||(LA169_0>=DIGIT && LA169_0<=NEXT)||(LA169_0>=ONLY && LA169_0<=EXIT)||(LA169_0>=SEQUENTIAL && LA169_0<=MAINTAINED)||(LA169_0>=MUTABLE && LA169_0<=QUOT_ER)||LA169_0==L_NCName||LA169_0==EXPLICITLY) ) {
                alt169=1;
            }
            else if ( (LA169_0==STAR) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // XQueryParser.g:1133:13: p_QName
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_QName_in_p_ElementNameOrWildcard9590);
                    p_QName515=p_QName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName515.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1133:23: STAR
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    STAR516=(CommonToken)match(input,STAR,FOLLOW_STAR_in_p_ElementNameOrWildcard9594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR516_tree = (XQDTCommonTree)adaptor.create(STAR516);
                    adaptor.addChild(root_0, STAR516_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementNameOrWildcard"

    public static class p_SchemaElementTest_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SchemaElementTest"
    // XQueryParser.g:1136:1: p_SchemaElementTest : SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN ;
    public final XQueryParser.p_SchemaElementTest_return p_SchemaElementTest() throws RecognitionException {
        XQueryParser.p_SchemaElementTest_return retval = new XQueryParser.p_SchemaElementTest_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SCHEMA_ELEMENT517=null;
        CommonToken LPAREN518=null;
        CommonToken RPAREN520=null;
        XQueryParser.p_ElementDeclaration_return p_ElementDeclaration519 = null;


        XQDTCommonTree SCHEMA_ELEMENT517_tree=null;
        XQDTCommonTree LPAREN518_tree=null;
        XQDTCommonTree RPAREN520_tree=null;

        try {
            // XQueryParser.g:1137:9: ( SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN )
            // XQueryParser.g:1137:13: SCHEMA_ELEMENT LPAREN p_ElementDeclaration RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            SCHEMA_ELEMENT517=(CommonToken)match(input,SCHEMA_ELEMENT,FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9614); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SCHEMA_ELEMENT517_tree = (XQDTCommonTree)adaptor.create(SCHEMA_ELEMENT517);
            adaptor.addChild(root_0, SCHEMA_ELEMENT517_tree);
            }
            LPAREN518=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_SchemaElementTest9616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN518_tree = (XQDTCommonTree)adaptor.create(LPAREN518);
            adaptor.addChild(root_0, LPAREN518_tree);
            }
            pushFollow(FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9618);
            p_ElementDeclaration519=p_ElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementDeclaration519.getTree());
            RPAREN520=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_SchemaElementTest9620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN520_tree = (XQDTCommonTree)adaptor.create(RPAREN520);
            adaptor.addChild(root_0, RPAREN520_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SchemaElementTest"

    public static class p_ElementDeclaration_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementDeclaration"
    // XQueryParser.g:1141:1: p_ElementDeclaration : p_ElementName ;
    public final XQueryParser.p_ElementDeclaration_return p_ElementDeclaration() throws RecognitionException {
        XQueryParser.p_ElementDeclaration_return retval = new XQueryParser.p_ElementDeclaration_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ElementName_return p_ElementName521 = null;



        try {
            // XQueryParser.g:1142:9: ( p_ElementName )
            // XQueryParser.g:1142:11: p_ElementName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ElementName_in_p_ElementDeclaration9646);
            p_ElementName521=p_ElementName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ElementName521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementDeclaration"

    public static class p_AttributeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AttributeName"
    // XQueryParser.g:1146:1: p_AttributeName : p_QName ;
    public final XQueryParser.p_AttributeName_return p_AttributeName() throws RecognitionException {
        XQueryParser.p_AttributeName_return retval = new XQueryParser.p_AttributeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName522 = null;



        try {
            // XQueryParser.g:1147:9: ( p_QName )
            // XQueryParser.g:1147:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_AttributeName9674);
            p_QName522=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName522.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AttributeName"

    public static class p_ElementName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ElementName"
    // XQueryParser.g:1151:1: p_ElementName : p_QName ;
    public final XQueryParser.p_ElementName_return p_ElementName() throws RecognitionException {
        XQueryParser.p_ElementName_return retval = new XQueryParser.p_ElementName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName523 = null;



        try {
            // XQueryParser.g:1152:9: ( p_QName )
            // XQueryParser.g:1152:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_ElementName9702);
            p_QName523=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName523.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ElementName"

    public static class p_TypeName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TypeName"
    // XQueryParser.g:1156:1: p_TypeName : p_QName ;
    public final XQueryParser.p_TypeName_return p_TypeName() throws RecognitionException {
        XQueryParser.p_TypeName_return retval = new XQueryParser.p_TypeName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName524 = null;



        try {
            // XQueryParser.g:1157:9: ( p_QName )
            // XQueryParser.g:1157:13: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_TypeName9730);
            p_QName524=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName524.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TypeName"

    public static class p_TryCatchExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryCatchExpr"
    // XQueryParser.g:1167:1: p_TryCatchExpr : p_TryClause ( p_CatchClause )+ ;
    public final XQueryParser.p_TryCatchExpr_return p_TryCatchExpr() throws RecognitionException {
        XQueryParser.p_TryCatchExpr_return retval = new XQueryParser.p_TryCatchExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_TryClause_return p_TryClause525 = null;

        XQueryParser.p_CatchClause_return p_CatchClause526 = null;



        try {
            // XQueryParser.g:1168:9: ( p_TryClause ( p_CatchClause )+ )
            // XQueryParser.g:1168:11: p_TryClause ( p_CatchClause )+
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_TryClause_in_p_TryCatchExpr9762);
            p_TryClause525=p_TryClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TryClause525.getTree());
            // XQueryParser.g:1168:23: ( p_CatchClause )+
            int cnt170=0;
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==CATCH) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // XQueryParser.g:1168:23: p_CatchClause
            	    {
            	    pushFollow(FOLLOW_p_CatchClause_in_p_TryCatchExpr9764);
            	    p_CatchClause526=p_CatchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchClause526.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt170 >= 1 ) break loop170;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(170, input);
                        throw eee;
                }
                cnt170++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryCatchExpr"

    public static class p_TryClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TryClause"
    // XQueryParser.g:1172:1: p_TryClause : kc= TRY LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_TryClause_return p_TryClause() throws RecognitionException {
        XQueryParser.p_TryClause_return retval = new XQueryParser.p_TryClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET527=null;
        CommonToken RBRACKET529=null;
        XQueryParser.pm_Expr_return pm_Expr528 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET527_tree=null;
        XQDTCommonTree RBRACKET529_tree=null;

        try {
            // XQueryParser.g:1173:9: (kc= TRY LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1173:11: kc= TRY LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,TRY,FOLLOW_TRY_in_p_TryClause9793); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            LBRACKET527=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_TryClause9797); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET527_tree = (XQDTCommonTree)adaptor.create(LBRACKET527);
            adaptor.addChild(root_0, LBRACKET527_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_TryClause9799);
            pm_Expr528=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr528.getTree());
            RBRACKET529=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_TryClause9801); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET529_tree = (XQDTCommonTree)adaptor.create(RBRACKET529);
            adaptor.addChild(root_0, RBRACKET529_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TryClause"

    public static class p_CatchClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchClause"
    // XQueryParser.g:1180:1: p_CatchClause : kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET ;
    public final XQueryParser.p_CatchClause_return p_CatchClause() throws RecognitionException {
        XQueryParser.p_CatchClause_return retval = new XQueryParser.p_CatchClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken LBRACKET532=null;
        CommonToken RBRACKET534=null;
        XQueryParser.p_CatchErrorList_return p_CatchErrorList530 = null;

        XQueryParser.p_CatchVars_return p_CatchVars531 = null;

        XQueryParser.pm_Expr_return pm_Expr533 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree LBRACKET532_tree=null;
        XQDTCommonTree RBRACKET534_tree=null;

        try {
            // XQueryParser.g:1181:9: (kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET )
            // XQueryParser.g:1181:11: kc= CATCH p_CatchErrorList ( p_CatchVars )? LBRACKET pm_Expr RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kc=(CommonToken)match(input,CATCH,FOLLOW_CATCH_in_p_CatchClause9832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_CatchErrorList_in_p_CatchClause9836);
            p_CatchErrorList530=p_CatchErrorList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchErrorList530.getTree());
            // XQueryParser.g:1181:48: ( p_CatchVars )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==LPAREN) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // XQueryParser.g:1181:48: p_CatchVars
                    {
                    pushFollow(FOLLOW_p_CatchVars_in_p_CatchClause9838);
                    p_CatchVars531=p_CatchVars();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CatchVars531.getTree());

                    }
                    break;

            }

            LBRACKET532=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_CatchClause9841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET532_tree = (XQDTCommonTree)adaptor.create(LBRACKET532);
            adaptor.addChild(root_0, LBRACKET532_tree);
            }
            pushFollow(FOLLOW_pm_Expr_in_p_CatchClause9843);
            pm_Expr533=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr533.getTree());
            RBRACKET534=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_CatchClause9845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET534_tree = (XQDTCommonTree)adaptor.create(RBRACKET534);
            adaptor.addChild(root_0, RBRACKET534_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchClause"

    public static class p_CatchErrorList_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchErrorList"
    // XQueryParser.g:1185:1: p_CatchErrorList : ( p_NameTest ( VBAR p_NameTest )* | {...}? => () );
    public final XQueryParser.p_CatchErrorList_return p_CatchErrorList() throws RecognitionException {
        XQueryParser.p_CatchErrorList_return retval = new XQueryParser.p_CatchErrorList_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken VBAR536=null;
        XQueryParser.p_NameTest_return p_NameTest535 = null;

        XQueryParser.p_NameTest_return p_NameTest537 = null;


        XQDTCommonTree VBAR536_tree=null;

        try {
            // XQueryParser.g:1186:9: ( p_NameTest ( VBAR p_NameTest )* | {...}? => () )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( ((LA173_0>=ANCESTOR && LA173_0<=DECIMAL_SEPARATOR)||(LA173_0>=DIGIT && LA173_0<=NEXT)||(LA173_0>=ONLY && LA173_0<=EXIT)||(LA173_0>=SEQUENTIAL && LA173_0<=MAINTAINED)||(LA173_0>=MUTABLE && LA173_0<=QUOT_ER)||LA173_0==STAR||LA173_0==L_NCName||LA173_0==EXPLICITLY) ) {
                alt173=1;
            }
            else if ( (LA173_0==LPAREN||LA173_0==LBRACKET) && ((lc(MLS)))) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // XQueryParser.g:1186:11: p_NameTest ( VBAR p_NameTest )*
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9871);
                    p_NameTest535=p_NameTest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest535.getTree());
                    // XQueryParser.g:1186:22: ( VBAR p_NameTest )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==VBAR) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // XQueryParser.g:1186:23: VBAR p_NameTest
                    	    {
                    	    VBAR536=(CommonToken)match(input,VBAR,FOLLOW_VBAR_in_p_CatchErrorList9874); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    VBAR536_tree = (XQDTCommonTree)adaptor.create(VBAR536);
                    	    adaptor.addChild(root_0, VBAR536_tree);
                    	    }
                    	    pushFollow(FOLLOW_p_NameTest_in_p_CatchErrorList9876);
                    	    p_NameTest537=p_NameTest();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NameTest537.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1187:11: {...}? => ()
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    if ( !((lc(MLS))) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "p_CatchErrorList", "lc(MLS)");
                    }
                    // XQueryParser.g:1187:24: ()
                    // XQueryParser.g:1187:38: 
                    {
                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchErrorList"

    public static class p_CatchVars_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CatchVars"
    // XQueryParser.g:1191:2: p_CatchVars : LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN ;
    public final XQueryParser.p_CatchVars_return p_CatchVars() throws RecognitionException {
        XQueryParser.p_CatchVars_return retval = new XQueryParser.p_CatchVars_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LPAREN538=null;
        CommonToken DOLLAR539=null;
        CommonToken COMMA541=null;
        CommonToken DOLLAR542=null;
        CommonToken COMMA544=null;
        CommonToken DOLLAR545=null;
        CommonToken RPAREN547=null;
        XQueryParser.p_VarName_return p_VarName540 = null;

        XQueryParser.p_VarName_return p_VarName543 = null;

        XQueryParser.p_VarName_return p_VarName546 = null;


        XQDTCommonTree LPAREN538_tree=null;
        XQDTCommonTree DOLLAR539_tree=null;
        XQDTCommonTree COMMA541_tree=null;
        XQDTCommonTree DOLLAR542_tree=null;
        XQDTCommonTree COMMA544_tree=null;
        XQDTCommonTree DOLLAR545_tree=null;
        XQDTCommonTree RPAREN547_tree=null;

        try {
            // XQueryParser.g:1192:9: ( LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN )
            // XQueryParser.g:1192:11: LPAREN DOLLAR p_VarName ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )? RPAREN
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            LPAREN538=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_CatchVars9922); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN538_tree = (XQDTCommonTree)adaptor.create(LPAREN538);
            adaptor.addChild(root_0, LPAREN538_tree);
            }
            DOLLAR539=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR539_tree = (XQDTCommonTree)adaptor.create(DOLLAR539);
            adaptor.addChild(root_0, DOLLAR539_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9926);
            p_VarName540=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName540.getTree());
            // XQueryParser.g:1192:35: ( COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )? )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==COMMA) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // XQueryParser.g:1192:36: COMMA DOLLAR p_VarName ( COMMA DOLLAR p_VarName )?
                    {
                    COMMA541=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9929); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA541_tree = (XQDTCommonTree)adaptor.create(COMMA541);
                    adaptor.addChild(root_0, COMMA541_tree);
                    }
                    DOLLAR542=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOLLAR542_tree = (XQDTCommonTree)adaptor.create(DOLLAR542);
                    adaptor.addChild(root_0, DOLLAR542_tree);
                    }
                    pushFollow(FOLLOW_p_VarName_in_p_CatchVars9933);
                    p_VarName543=p_VarName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName543.getTree());
                    // XQueryParser.g:1192:59: ( COMMA DOLLAR p_VarName )?
                    int alt174=2;
                    int LA174_0 = input.LA(1);

                    if ( (LA174_0==COMMA) ) {
                        alt174=1;
                    }
                    switch (alt174) {
                        case 1 :
                            // XQueryParser.g:1192:60: COMMA DOLLAR p_VarName
                            {
                            COMMA544=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_CatchVars9936); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA544_tree = (XQDTCommonTree)adaptor.create(COMMA544);
                            adaptor.addChild(root_0, COMMA544_tree);
                            }
                            DOLLAR545=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_CatchVars9938); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOLLAR545_tree = (XQDTCommonTree)adaptor.create(DOLLAR545);
                            adaptor.addChild(root_0, DOLLAR545_tree);
                            }
                            pushFollow(FOLLOW_p_VarName_in_p_CatchVars9940);
                            p_VarName546=p_VarName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName546.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN547=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_CatchVars9946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN547_tree = (XQDTCommonTree)adaptor.create(RPAREN547);
            adaptor.addChild(root_0, RPAREN547_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CatchVars"

    public static class p_StringLiteral_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_StringLiteral"
    // XQueryParser.g:1218:1: p_StringLiteral : ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) );
    public final XQueryParser.p_StringLiteral_return p_StringLiteral() throws RecognitionException {
        XQueryParser.p_StringLiteral_return retval = new XQueryParser.p_StringLiteral_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken QUOT548=null;
        CommonToken QUOT550=null;
        CommonToken APOS551=null;
        CommonToken APOS553=null;
        XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent549 = null;

        XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent552 = null;


        XQDTCommonTree QUOT548_tree=null;
        XQDTCommonTree QUOT550_tree=null;
        XQDTCommonTree APOS551_tree=null;
        XQDTCommonTree APOS553_tree=null;
        RewriteRuleTokenStream stream_APOS=new RewriteRuleTokenStream(adaptor,"token APOS");
        RewriteRuleTokenStream stream_QUOT=new RewriteRuleTokenStream(adaptor,"token QUOT");
        RewriteRuleSubtreeStream stream_p_QuotStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_QuotStringLiteralContent");
        RewriteRuleSubtreeStream stream_p_AposStringLiteralContent=new RewriteRuleSubtreeStream(adaptor,"rule p_AposStringLiteralContent");
        try {
            // XQueryParser.g:1219:9: ( QUOT p_QuotStringLiteralContent QUOT -> ^( StringLiteral ( p_QuotStringLiteralContent )* ) | APOS p_AposStringLiteralContent APOS -> ^( StringLiteral ( p_AposStringLiteralContent )* ) )
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==QUOT) ) {
                alt176=1;
            }
            else if ( (LA176_0==APOS) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    // XQueryParser.g:1219:11: QUOT p_QuotStringLiteralContent QUOT
                    {
                    QUOT548=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral9995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT548);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(false);
                    }
                    pushFollow(FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9999);
                    p_QuotStringLiteralContent549=p_QuotStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_QuotStringLiteralContent.add(p_QuotStringLiteralContent549.getTree());
                    QUOT550=(CommonToken)match(input,QUOT,FOLLOW_QUOT_in_p_StringLiteral10001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOT.add(QUOT550);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_QuotStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1220:17: -> ^( StringLiteral ( p_QuotStringLiteralContent )* )
                    {
                        // XQueryParser.g:1220:20: ^( StringLiteral ( p_QuotStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1220:36: ( p_QuotStringLiteralContent )*
                        while ( stream_p_QuotStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_QuotStringLiteralContent.nextTree());

                        }
                        stream_p_QuotStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // XQueryParser.g:1221:13: APOS p_AposStringLiteralContent APOS
                    {
                    APOS551=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral10042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS551);

                    if ( state.backtracking==0 ) {
                      pushStringLexer(true);
                    }
                    pushFollow(FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral10046);
                    p_AposStringLiteralContent552=p_AposStringLiteralContent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_AposStringLiteralContent.add(p_AposStringLiteralContent552.getTree());
                    APOS553=(CommonToken)match(input,APOS,FOLLOW_APOS_in_p_StringLiteral10048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_APOS.add(APOS553);

                    if ( state.backtracking==0 ) {
                       popLexer(); 
                    }


                    // AST REWRITE
                    // elements: p_AposStringLiteralContent
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (XQDTCommonTree)adaptor.nil();
                    // 1222:17: -> ^( StringLiteral ( p_AposStringLiteralContent )* )
                    {
                        // XQueryParser.g:1222:20: ^( StringLiteral ( p_AposStringLiteralContent )* )
                        {
                        XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                        root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(StringLiteral, "StringLiteral"), root_1);

                        // XQueryParser.g:1222:36: ( p_AposStringLiteralContent )*
                        while ( stream_p_AposStringLiteralContent.hasNext() ) {
                            adaptor.addChild(root_1, stream_p_AposStringLiteralContent.nextTree());

                        }
                        stream_p_AposStringLiteralContent.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_StringLiteral"

    public static class p_QuotStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QuotStringLiteralContent"
    // XQueryParser.g:1229:1: p_QuotStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* ;
    public final XQueryParser.p_QuotStringLiteralContent_return p_QuotStringLiteralContent() throws RecognitionException {
        XQueryParser.p_QuotStringLiteralContent_return retval = new XQueryParser.p_QuotStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set554=null;

        XQDTCommonTree set554_tree=null;

        try {
            // XQueryParser.g:1230:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )* )
            // XQueryParser.g:1230:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1230:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( QUOT | AMP ) )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( ((LA177_0>=L_QuotAttrContentChar && LA177_0<=NOTEQUAL)||(LA177_0>=COMMA && LA177_0<=APOS)||(LA177_0>=NCNameStartChar && LA177_0<=EXPLICITLY)) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set554=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=APOS)||(input.LA(1)>=NCNameStartChar && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set554));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QuotStringLiteralContent"

    public static class p_AposStringLiteralContent_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AposStringLiteralContent"
    // XQueryParser.g:1238:1: p_AposStringLiteralContent : ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* ;
    public final XQueryParser.p_AposStringLiteralContent_return p_AposStringLiteralContent() throws RecognitionException {
        XQueryParser.p_AposStringLiteralContent_return retval = new XQueryParser.p_AposStringLiteralContent_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set555=null;

        XQDTCommonTree set555_tree=null;

        try {
            // XQueryParser.g:1239:9: ( ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )* )
            // XQueryParser.g:1239:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1239:11: ( ESCAPE_QUOT | L_CharRef | L_PredefinedEntityRef | ~ ( APOS | AMP ) )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( ((LA178_0>=L_QuotAttrContentChar && LA178_0<=NOTEQUAL)||(LA178_0>=COMMA && LA178_0<=CHARREF_HEX)||(LA178_0>=QUOT && LA178_0<=EXPLICITLY)) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // XQueryParser.g:
            	    {
            	    set555=(CommonToken)input.LT(1);
            	    if ( (input.LA(1)>=L_QuotAttrContentChar && input.LA(1)<=NOTEQUAL)||(input.LA(1)>=COMMA && input.LA(1)<=CHARREF_HEX)||(input.LA(1)>=QUOT && input.LA(1)<=EXPLICITLY) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set555));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AposStringLiteralContent"

    public static class p_QName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_QName"
    // XQueryParser.g:1272:1: p_QName : p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) ;
    public final XQueryParser.p_QName_return p_QName() throws RecognitionException {
        XQueryParser.p_QName_return retval = new XQueryParser.p_QName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_NCName_return p_NCName556 = null;

        XQueryParser.p_LocalNCName_return p_LocalNCName557 = null;


        RewriteRuleSubtreeStream stream_p_LocalNCName=new RewriteRuleSubtreeStream(adaptor,"rule p_LocalNCName");
        RewriteRuleSubtreeStream stream_p_NCName=new RewriteRuleSubtreeStream(adaptor,"rule p_NCName");
        setWsExplicit(true);
        try {
            // XQueryParser.g:1273:9: ( p_NCName p_LocalNCName -> ^( QName p_NCName ( p_LocalNCName )? ) )
            // XQueryParser.g:1273:11: p_NCName p_LocalNCName
            {
            pushFollow(FOLLOW_p_NCName_in_p_QName10246);
            p_NCName556=p_NCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_NCName.add(p_NCName556.getTree());
            pushFollow(FOLLOW_p_LocalNCName_in_p_QName10248);
            p_LocalNCName557=p_LocalNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_LocalNCName.add(p_LocalNCName557.getTree());


            // AST REWRITE
            // elements: p_LocalNCName, p_NCName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1274:17: -> ^( QName p_NCName ( p_LocalNCName )? )
            {
                // XQueryParser.g:1274:20: ^( QName p_NCName ( p_LocalNCName )? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(QName, "QName"), root_1);

                adaptor.addChild(root_1, stream_p_NCName.nextTree());
                // XQueryParser.g:1274:37: ( p_LocalNCName )?
                if ( stream_p_LocalNCName.hasNext() ) {
                    adaptor.addChild(root_1, stream_p_LocalNCName.nextTree());

                }
                stream_p_LocalNCName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_QName"

    public static class p_LocalNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalNCName"
    // XQueryParser.g:1279:1: p_LocalNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalNCName_return p_LocalNCName() throws RecognitionException {
        XQueryParser.p_LocalNCName_return retval = new XQueryParser.p_LocalNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON558=null;
        XQueryParser.p_NCName_return p_NCName559 = null;


        XQDTCommonTree COLON558_tree=null;

        try {
            // XQueryParser.g:1280:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1280:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1280:11: ( COLON p_NCName )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==COLON) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // XQueryParser.g:1280:12: COLON p_NCName
                    {
                    COLON558=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalNCName10303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON558_tree = (XQDTCommonTree)adaptor.create(COLON558);
                    adaptor.addChild(root_0, COLON558_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalNCName10305);
                    p_NCName559=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName559.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalNCName"

    public static class p_FQName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FQName"
    // XQueryParser.g:1287:1: p_FQName : p_FNCName p_LocalFNCName ;
    public final XQueryParser.p_FQName_return p_FQName() throws RecognitionException {
        XQueryParser.p_FQName_return retval = new XQueryParser.p_FQName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_FNCName_return p_FNCName560 = null;

        XQueryParser.p_LocalFNCName_return p_LocalFNCName561 = null;



        setWsExplicit(true);
        try {
            // XQueryParser.g:1288:9: ( p_FNCName p_LocalFNCName )
            // XQueryParser.g:1288:11: p_FNCName p_LocalFNCName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_FNCName_in_p_FQName10352);
            p_FNCName560=p_FNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_FNCName560.getTree());
            pushFollow(FOLLOW_p_LocalFNCName_in_p_FQName10354);
            p_LocalFNCName561=p_LocalFNCName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_LocalFNCName561.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FQName"

    public static class p_LocalFNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_LocalFNCName"
    // XQueryParser.g:1293:1: p_LocalFNCName : ( COLON p_NCName )? ;
    public final XQueryParser.p_LocalFNCName_return p_LocalFNCName() throws RecognitionException {
        XQueryParser.p_LocalFNCName_return retval = new XQueryParser.p_LocalFNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COLON562=null;
        XQueryParser.p_NCName_return p_NCName563 = null;


        XQDTCommonTree COLON562_tree=null;

        try {
            // XQueryParser.g:1294:9: ( ( COLON p_NCName )? )
            // XQueryParser.g:1294:11: ( COLON p_NCName )?
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1294:11: ( COLON p_NCName )?
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==COLON) ) {
                alt180=1;
            }
            switch (alt180) {
                case 1 :
                    // XQueryParser.g:1294:12: COLON p_NCName
                    {
                    COLON562=(CommonToken)match(input,COLON,FOLLOW_COLON_in_p_LocalFNCName10382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON562_tree = (XQDTCommonTree)adaptor.create(COLON562);
                    adaptor.addChild(root_0, COLON562_tree);
                    }
                    pushFollow(FOLLOW_p_NCName_in_p_LocalFNCName10384);
                    p_NCName563=p_NCName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NCName563.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            setWsExplicit(false);
        }
        return retval;
    }
    // $ANTLR end "p_LocalFNCName"

    public static class p_NCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NCName"
    // XQueryParser.g:1300:1: p_NCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_NCName_return p_NCName() throws RecognitionException {
        XQueryParser.p_NCName_return retval = new XQueryParser.p_NCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set564=null;

        XQDTCommonTree set564_tree=null;

        try {
            // XQueryParser.g:1301:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | ATTRIBUTE | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | COMMENT | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | DOCUMENT_NODE | ELEMENT | ELSE | EMPTY | EMPTY_SEQUENCE | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IF | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | ITEM | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | NODE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | PROCESSING_INSTRUCTION | RETURN | SATISFIES | SCHEMA | SCHEMA_ATTRIBUTE | SCHEMA_ELEMENT | SELF | SOME | STABLE | STRICT | STRIP | TEXT | THEN | TO | TREAT | TYPESWITCH | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAMESPACE_NODE | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | WHILE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set564=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=DECIMAL_SEPARATOR)||(input.LA(1)>=DIGIT && input.LA(1)<=NEXT)||(input.LA(1)>=ONLY && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set564));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NCName"

    public static class p_FNCName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_FNCName"
    // XQueryParser.g:1319:1: p_FNCName : ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER );
    public final XQueryParser.p_FNCName_return p_FNCName() throws RecognitionException {
        XQueryParser.p_FNCName_return retval = new XQueryParser.p_FNCName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken set565=null;

        XQDTCommonTree set565_tree=null;

        try {
            // XQueryParser.g:1320:9: ( L_NCName | ANCESTOR | ANCESTOR_OR_SELF | AND | AS | ASCENDING | AT | BASE_URI | BOUNDARY_SPACE | BY | CASE | CAST | CASTABLE | CHILD | COLLATION | CONSTRUCTION | COPY_NAMESPACES | DECLARE | DEFAULT | DESCENDANT | DESCENDANT_OR_SELF | DESCENDING | DIV | DOCUMENT | ELSE | EMPTY | ENCODING | EQ | EVERY | EXCEPT | EXTERNAL | FOLLOWING | FOLLOWING_SIBLING | FOR | FUNCTION | GE | GREATEST | GT | IDIV | IMPORT | IN | INHERIT | INSTANCE | INTERSECT | IS | LAX | LE | LEAST | LET | LT | MOD | MODULE | NAMESPACE | NE | NO_INHERIT | NO_PRESERVE | OF | OPTION | OR | ORDER | ORDERED | ORDERING | PARENT | PRECEDING | PRECEDING_SIBLING | PRESERVE | RETURN | SATISFIES | SCHEMA | SELF | SOME | STABLE | STRICT | STRIP | THEN | TO | TREAT | UNION | UNORDERED | VALIDATE | VARIABLE | VERSION | WHERE | XQUERY | CATCH | CONTEXT | COUNT | DECIMAL_FORMAT | DECIMAL_SEPARATOR | DIGIT | END | GROUP | GROUPING_SEPARATOR | INFINITY | MINUS_SIGN | NAN | NEXT | ONLY | OUTER | PATTERN_SEPARATOR | PERCENT | PER_MILLE | PREVIOUS | PRIVATE | PUBLIC | SLIDING | START | TRY | TUMBLING | WHEN | WINDOW | ZERO_DIGIT | AFTER | BEFORE | COPY | DELETE | FIRST | INSERT | INTO | LAST | MODIFY | NODES | RENAME | REPLACE | REVALIDATION | SKIP | UPDATING | VALUE | WITH | BLOCK | CONSTANT | EXIT | SEQUENTIAL | SET | SIMPLE | EVAL | USING | APPEND_ONLY | AUTOMATICALLY | CHECK | COLLECTION | CONSTRAINT | CONST | EQUALITY | EXPLICITLY | FOREACH | FOREIGN | FROM | INDEX | INTEGRITY | KEY | MAINTAINED | MUTABLE | NON | ON | QUEUE | RANGE | READ_ONLY | UNIQUE | BINARY | AMP_ER | APOS_ER | QUOT_ER )
            // XQueryParser.g:
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            set565=(CommonToken)input.LT(1);
            if ( (input.LA(1)>=ANCESTOR && input.LA(1)<=AT)||(input.LA(1)>=BASE_URI && input.LA(1)<=COLLATION)||(input.LA(1)>=CONSTRUCTION && input.LA(1)<=DOCUMENT)||(input.LA(1)>=ELSE && input.LA(1)<=EMPTY)||(input.LA(1)>=ENCODING && input.LA(1)<=IDIV)||(input.LA(1)>=IMPORT && input.LA(1)<=IS)||(input.LA(1)>=LAX && input.LA(1)<=NO_PRESERVE)||(input.LA(1)>=OF && input.LA(1)<=PRESERVE)||(input.LA(1)>=RETURN && input.LA(1)<=SCHEMA)||(input.LA(1)>=SELF && input.LA(1)<=STRIP)||(input.LA(1)>=THEN && input.LA(1)<=TREAT)||(input.LA(1)>=UNION && input.LA(1)<=DECIMAL_SEPARATOR)||(input.LA(1)>=DIGIT && input.LA(1)<=MINUS_SIGN)||(input.LA(1)>=NAN && input.LA(1)<=NEXT)||(input.LA(1)>=ONLY && input.LA(1)<=EXIT)||(input.LA(1)>=SEQUENTIAL && input.LA(1)<=SIMPLE)||(input.LA(1)>=EVAL && input.LA(1)<=MAINTAINED)||(input.LA(1)>=MUTABLE && input.LA(1)<=QUOT_ER)||input.LA(1)==L_NCName||input.LA(1)==EXPLICITLY ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (XQDTCommonTree)adaptor.create(set565));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_FNCName"

    public static class pm_RevalidationDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_RevalidationDecl"
    // XQueryParser.g:1353:1: pm_RevalidationDecl : k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) ;
    public final XQueryParser.pm_RevalidationDecl_return pm_RevalidationDecl() throws RecognitionException {
        XQueryParser.pm_RevalidationDecl_return retval = new XQueryParser.pm_RevalidationDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1354:9: (k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP ) )
            // XQueryParser.g:1354:11: k+= DECLARE k+= REVALIDATION (k+= STRICT | k+= LAX | k+= SKIP )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_RevalidationDecl12120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,REVALIDATION,FOLLOW_REVALIDATION_in_pm_RevalidationDecl12124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1354:38: (k+= STRICT | k+= LAX | k+= SKIP )
            int alt181=3;
            switch ( input.LA(1) ) {
            case STRICT:
                {
                alt181=1;
                }
                break;
            case LAX:
                {
                alt181=2;
                }
                break;
            case SKIP:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    // XQueryParser.g:1354:39: k+= STRICT
                    {
                    k=(CommonToken)match(input,STRICT,FOLLOW_STRICT_in_pm_RevalidationDecl12129); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1354:51: k+= LAX
                    {
                    k=(CommonToken)match(input,LAX,FOLLOW_LAX_in_pm_RevalidationDecl12135); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 3 :
                    // XQueryParser.g:1354:60: k+= SKIP
                    {
                    k=(CommonToken)match(input,SKIP,FOLLOW_SKIP_in_pm_RevalidationDecl12141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_RevalidationDecl"

    public static class p_InsertExprTargetChoice_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExprTargetChoice"
    // XQueryParser.g:1358:1: p_InsertExprTargetChoice : ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE );
    public final XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice() throws RecognitionException {
        XQueryParser.p_InsertExprTargetChoice_return retval = new XQueryParser.p_InsertExprTargetChoice_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        CommonToken kb=null;
        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree ka_tree=null;
        XQDTCommonTree kb_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1359:9: ( ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO ) | ka= AFTER | kb= BEFORE )
            int alt184=3;
            switch ( input.LA(1) ) {
            case AS:
            case INTO:
                {
                alt184=1;
                }
                break;
            case AFTER:
                {
                alt184=2;
                }
                break;
            case BEFORE:
                {
                alt184=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }

            switch (alt184) {
                case 1 :
                    // XQueryParser.g:1359:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    // XQueryParser.g:1359:11: ( (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO )
                    // XQueryParser.g:1359:12: (k+= AS (k+= FIRST | k+= LAST ) )? k+= INTO
                    {
                    // XQueryParser.g:1359:12: (k+= AS (k+= FIRST | k+= LAST ) )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==AS) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // XQueryParser.g:1359:13: k+= AS (k+= FIRST | k+= LAST )
                            {
                            k=(CommonToken)match(input,AS,FOLLOW_AS_in_p_InsertExprTargetChoice12174); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            k_tree = (XQDTCommonTree)adaptor.create(k);
                            adaptor.addChild(root_0, k_tree);
                            }
                            if (list_k==null) list_k=new ArrayList();
                            list_k.add(k);

                            // XQueryParser.g:1359:19: (k+= FIRST | k+= LAST )
                            int alt182=2;
                            int LA182_0 = input.LA(1);

                            if ( (LA182_0==FIRST) ) {
                                alt182=1;
                            }
                            else if ( (LA182_0==LAST) ) {
                                alt182=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 182, 0, input);

                                throw nvae;
                            }
                            switch (alt182) {
                                case 1 :
                                    // XQueryParser.g:1359:20: k+= FIRST
                                    {
                                    k=(CommonToken)match(input,FIRST,FOLLOW_FIRST_in_p_InsertExprTargetChoice12179); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;
                                case 2 :
                                    // XQueryParser.g:1359:31: k+= LAST
                                    {
                                    k=(CommonToken)match(input,LAST,FOLLOW_LAST_in_p_InsertExprTargetChoice12185); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    k_tree = (XQDTCommonTree)adaptor.create(k);
                                    adaptor.addChild(root_0, k_tree);
                                    }
                                    if (list_k==null) list_k=new ArrayList();
                                    list_k.add(k);


                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    k=(CommonToken)match(input,INTO,FOLLOW_INTO_in_p_InsertExprTargetChoice12192); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }

                    if ( state.backtracking==0 ) {
                      ak(list_k);
                    }

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1360:11: ka= AFTER
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    ka=(CommonToken)match(input,AFTER,FOLLOW_AFTER_in_p_InsertExprTargetChoice12209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ka_tree = (XQDTCommonTree)adaptor.create(ka);
                    adaptor.addChild(root_0, ka_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(ka);
                    }

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1361:11: kb= BEFORE
                    {
                    root_0 = (XQDTCommonTree)adaptor.nil();

                    kb=(CommonToken)match(input,BEFORE,FOLLOW_BEFORE_in_p_InsertExprTargetChoice12225); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kb_tree = (XQDTCommonTree)adaptor.create(kb);
                    adaptor.addChild(root_0, kb_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ak(kb);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExprTargetChoice"

    public static class p_InsertExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_InsertExpr"
    // XQueryParser.g:1365:1: p_InsertExpr : k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr ;
    public final XQueryParser.p_InsertExpr_return p_InsertExpr() throws RecognitionException {
        XQueryParser.p_InsertExpr_return retval = new XQueryParser.p_InsertExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_SourceExpr_return p_SourceExpr566 = null;

        XQueryParser.p_InsertExprTargetChoice_return p_InsertExprTargetChoice567 = null;

        XQueryParser.p_TargetExpr_return p_TargetExpr568 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1366:9: (k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr )
            // XQueryParser.g:1366:11: k+= INSERT (k+= NODE | k+= NODES ) p_SourceExpr p_InsertExprTargetChoice p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,INSERT,FOLLOW_INSERT_in_p_InsertExpr12255); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1366:21: (k+= NODE | k+= NODES )
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==NODE) ) {
                alt185=1;
            }
            else if ( (LA185_0==NODES) ) {
                alt185=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 185, 0, input);

                throw nvae;
            }
            switch (alt185) {
                case 1 :
                    // XQueryParser.g:1366:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_InsertExpr12260); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1366:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_InsertExpr12266); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_SourceExpr_in_p_InsertExpr12269);
            p_SourceExpr566=p_SourceExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_SourceExpr566.getTree());
            pushFollow(FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr12271);
            p_InsertExprTargetChoice567=p_InsertExprTargetChoice();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_InsertExprTargetChoice567.getTree());
            pushFollow(FOLLOW_p_TargetExpr_in_p_InsertExpr12273);
            p_TargetExpr568=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr568.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_InsertExpr"

    public static class p_DeleteExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_DeleteExpr"
    // XQueryParser.g:1370:1: p_DeleteExpr : k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr ;
    public final XQueryParser.p_DeleteExpr_return p_DeleteExpr() throws RecognitionException {
        XQueryParser.p_DeleteExpr_return retval = new XQueryParser.p_DeleteExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr569 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1371:9: (k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr )
            // XQueryParser.g:1371:11: k+= DELETE (k+= NODE | k+= NODES ) p_TargetExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DELETE,FOLLOW_DELETE_in_p_DeleteExpr12303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1371:21: (k+= NODE | k+= NODES )
            int alt186=2;
            int LA186_0 = input.LA(1);

            if ( (LA186_0==NODE) ) {
                alt186=1;
            }
            else if ( (LA186_0==NODES) ) {
                alt186=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }
            switch (alt186) {
                case 1 :
                    // XQueryParser.g:1371:22: k+= NODE
                    {
                    k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_DeleteExpr12308); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1371:32: k+= NODES
                    {
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_DeleteExpr12314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            pushFollow(FOLLOW_p_TargetExpr_in_p_DeleteExpr12317);
            p_TargetExpr569=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr569.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_DeleteExpr"

    public static class p_ReplaceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ReplaceExpr"
    // XQueryParser.g:1375:1: p_ReplaceExpr : k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle ;
    public final XQueryParser.p_ReplaceExpr_return p_ReplaceExpr() throws RecognitionException {
        XQueryParser.p_ReplaceExpr_return retval = new XQueryParser.p_ReplaceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle570 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle571 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1376:9: (k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle )
            // XQueryParser.g:1376:11: k+= REPLACE (k+= VALUE k+= OF )? k+= NODE p_ExprSingle k+= WITH p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,REPLACE,FOLLOW_REPLACE_in_p_ReplaceExpr12347); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            // XQueryParser.g:1376:22: (k+= VALUE k+= OF )?
            int alt187=2;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==VALUE) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    // XQueryParser.g:1376:23: k+= VALUE k+= OF
                    {
                    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_ReplaceExpr12352); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    k=(CommonToken)match(input,OF,FOLLOW_OF_in_p_ReplaceExpr12356); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ReplaceExpr12362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12364);
            p_ExprSingle570=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle570.getTree());
            k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_ReplaceExpr12368); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ReplaceExpr12370);
            p_ExprSingle571=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle571.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ReplaceExpr"

    public static class p_RenameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_RenameExpr"
    // XQueryParser.g:1380:1: p_RenameExpr : k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr ;
    public final XQueryParser.p_RenameExpr_return p_RenameExpr() throws RecognitionException {
        XQueryParser.p_RenameExpr_return retval = new XQueryParser.p_RenameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken AS573=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_TargetExpr_return p_TargetExpr572 = null;

        XQueryParser.p_NewNameExpr_return p_NewNameExpr574 = null;


        XQDTCommonTree AS573_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1381:9: (k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr )
            // XQueryParser.g:1381:11: k+= RENAME k+= NODE p_TargetExpr AS p_NewNameExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,RENAME,FOLLOW_RENAME_in_p_RenameExpr12400); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_RenameExpr12404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_TargetExpr_in_p_RenameExpr12406);
            p_TargetExpr572=p_TargetExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TargetExpr572.getTree());
            AS573=(CommonToken)match(input,AS,FOLLOW_AS_in_p_RenameExpr12408); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AS573_tree = (XQDTCommonTree)adaptor.create(AS573);
            adaptor.addChild(root_0, AS573_tree);
            }
            pushFollow(FOLLOW_p_NewNameExpr_in_p_RenameExpr12410);
            p_NewNameExpr574=p_NewNameExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NewNameExpr574.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_RenameExpr"

    public static class p_SourceExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_SourceExpr"
    // XQueryParser.g:1385:1: p_SourceExpr : p_ExprSingle ;
    public final XQueryParser.p_SourceExpr_return p_SourceExpr() throws RecognitionException {
        XQueryParser.p_SourceExpr_return retval = new XQueryParser.p_SourceExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle575 = null;



        try {
            // XQueryParser.g:1386:9: ( p_ExprSingle )
            // XQueryParser.g:1386:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_SourceExpr12438);
            p_ExprSingle575=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle575.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_SourceExpr"

    public static class p_TargetExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TargetExpr"
    // XQueryParser.g:1390:1: p_TargetExpr : p_ExprSingle ;
    public final XQueryParser.p_TargetExpr_return p_TargetExpr() throws RecognitionException {
        XQueryParser.p_TargetExpr_return retval = new XQueryParser.p_TargetExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle576 = null;



        try {
            // XQueryParser.g:1391:9: ( p_ExprSingle )
            // XQueryParser.g:1391:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_TargetExpr12464);
            p_ExprSingle576=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle576.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TargetExpr"

    public static class p_NewNameExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NewNameExpr"
    // XQueryParser.g:1395:1: p_NewNameExpr : p_ExprSingle ;
    public final XQueryParser.p_NewNameExpr_return p_NewNameExpr() throws RecognitionException {
        XQueryParser.p_NewNameExpr_return retval = new XQueryParser.p_NewNameExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle577 = null;



        try {
            // XQueryParser.g:1396:9: ( p_ExprSingle )
            // XQueryParser.g:1396:11: p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_NewNameExpr12490);
            p_ExprSingle577=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle577.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NewNameExpr"

    public static class p_TransformExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_TransformExpr"
    // XQueryParser.g:1400:1: p_TransformExpr : k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle ;
    public final XQueryParser.p_TransformExpr_return p_TransformExpr() throws RecognitionException {
        XQueryParser.p_TransformExpr_return retval = new XQueryParser.p_TransformExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR578=null;
        CommonToken BIND580=null;
        CommonToken COMMA582=null;
        CommonToken DOLLAR583=null;
        CommonToken BIND585=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_VarName_return p_VarName579 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle581 = null;

        XQueryParser.p_VarName_return p_VarName584 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle586 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle587 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle588 = null;


        XQDTCommonTree DOLLAR578_tree=null;
        XQDTCommonTree BIND580_tree=null;
        XQDTCommonTree COMMA582_tree=null;
        XQDTCommonTree DOLLAR583_tree=null;
        XQDTCommonTree BIND585_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1401:9: (k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle )
            // XQueryParser.g:1401:11: k+= COPY DOLLAR p_VarName BIND p_ExprSingle ( COMMA DOLLAR p_VarName BIND p_ExprSingle )* k+= MODIFY p_ExprSingle k+= RETURN p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COPY,FOLLOW_COPY_in_p_TransformExpr12518); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR578=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12520); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR578_tree = (XQDTCommonTree)adaptor.create(DOLLAR578);
            adaptor.addChild(root_0, DOLLAR578_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12522);
            p_VarName579=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName579.getTree());
            BIND580=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12524); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND580_tree = (XQDTCommonTree)adaptor.create(BIND580);
            adaptor.addChild(root_0, BIND580_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12526);
            p_ExprSingle581=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle581.getTree());
            // XQueryParser.g:1401:54: ( COMMA DOLLAR p_VarName BIND p_ExprSingle )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // XQueryParser.g:1401:55: COMMA DOLLAR p_VarName BIND p_ExprSingle
            	    {
            	    COMMA582=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_TransformExpr12529); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA582_tree = (XQDTCommonTree)adaptor.create(COMMA582);
            	    adaptor.addChild(root_0, COMMA582_tree);
            	    }
            	    DOLLAR583=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_TransformExpr12531); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR583_tree = (XQDTCommonTree)adaptor.create(DOLLAR583);
            	    adaptor.addChild(root_0, DOLLAR583_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_TransformExpr12533);
            	    p_VarName584=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName584.getTree());
            	    BIND585=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_TransformExpr12535); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    BIND585_tree = (XQDTCommonTree)adaptor.create(BIND585);
            	    adaptor.addChild(root_0, BIND585_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12537);
            	    p_ExprSingle586=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle586.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);

            k=(CommonToken)match(input,MODIFY,FOLLOW_MODIFY_in_p_TransformExpr12543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12545);
            p_ExprSingle587=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle587.getTree());
            k=(CommonToken)match(input,RETURN,FOLLOW_RETURN_in_p_TransformExpr12549); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_TransformExpr12551);
            p_ExprSingle588=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle588.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_TransformExpr"

    public static class pm_ApplyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_ApplyExpr"
    // XQueryParser.g:1411:1: pm_ApplyExpr : p_ConcatExpr SEMICOLON ;
    public final XQueryParser.pm_ApplyExpr_return pm_ApplyExpr() throws RecognitionException {
        XQueryParser.pm_ApplyExpr_return retval = new XQueryParser.pm_ApplyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON590=null;
        XQueryParser.p_ConcatExpr_return p_ConcatExpr589 = null;


        XQDTCommonTree SEMICOLON590_tree=null;

        try {
            // XQueryParser.g:1412:9: ( p_ConcatExpr SEMICOLON )
            // XQueryParser.g:1412:11: p_ConcatExpr SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12586);
            p_ConcatExpr589=p_ConcatExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ConcatExpr589.getTree());
            SEMICOLON590=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_ApplyExpr12588); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON590_tree = (XQDTCommonTree)adaptor.create(SEMICOLON590);
            adaptor.addChild(root_0, SEMICOLON590_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_ApplyExpr"

    public static class p_ConcatExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ConcatExpr"
    // XQueryParser.g:1416:1: p_ConcatExpr : p_ExprSingle ( COMMA p_ExprSingle )* ;
    public final XQueryParser.p_ConcatExpr_return p_ConcatExpr() throws RecognitionException {
        XQueryParser.p_ConcatExpr_return retval = new XQueryParser.p_ConcatExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA592=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle591 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle593 = null;


        XQDTCommonTree COMMA592_tree=null;

        try {
            // XQueryParser.g:1417:9: ( p_ExprSingle ( COMMA p_ExprSingle )* )
            // XQueryParser.g:1417:11: p_ExprSingle ( COMMA p_ExprSingle )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12614);
            p_ExprSingle591=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle591.getTree());
            // XQueryParser.g:1417:24: ( COMMA p_ExprSingle )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==COMMA) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // XQueryParser.g:1417:25: COMMA p_ExprSingle
            	    {
            	    COMMA592=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_ConcatExpr12617); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA592_tree = (XQDTCommonTree)adaptor.create(COMMA592);
            	    adaptor.addChild(root_0, COMMA592_tree);
            	    }
            	    pushFollow(FOLLOW_p_ExprSingle_in_p_ConcatExpr12619);
            	    p_ExprSingle593=p_ExprSingle();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle593.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ConcatExpr"

    public static class p_BlockExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockExpr"
    // XQueryParser.g:1421:1: p_BlockExpr : kb= BLOCK p_Block ;
    public final XQueryParser.p_BlockExpr_return p_BlockExpr() throws RecognitionException {
        XQueryParser.p_BlockExpr_return retval = new XQueryParser.p_BlockExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kb=null;
        XQueryParser.p_Block_return p_Block594 = null;


        XQDTCommonTree kb_tree=null;

        try {
            // XQueryParser.g:1422:9: (kb= BLOCK p_Block )
            // XQueryParser.g:1422:11: kb= BLOCK p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kb=(CommonToken)match(input,BLOCK,FOLLOW_BLOCK_in_p_BlockExpr12649); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kb_tree = (XQDTCommonTree)adaptor.create(kb);
            adaptor.addChild(root_0, kb_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kb);
            }
            pushFollow(FOLLOW_p_Block_in_p_BlockExpr12653);
            p_Block594=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block594.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockExpr"

    public static class p_Block_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_Block"
    // XQueryParser.g:1426:1: p_Block : LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) ;
    public final XQueryParser.p_Block_return p_Block() throws RecognitionException {
        XQueryParser.p_Block_return retval = new XQueryParser.p_Block_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken LBRACKET595=null;
        CommonToken RBRACKET596=null;
        XQueryParser.pm_BlockDecls_return bd = null;

        XQueryParser.p_BlockBody_return bb = null;


        XQDTCommonTree LBRACKET595_tree=null;
        XQDTCommonTree RBRACKET596_tree=null;
        RewriteRuleTokenStream stream_LBRACKET=new RewriteRuleTokenStream(adaptor,"token LBRACKET");
        RewriteRuleTokenStream stream_RBRACKET=new RewriteRuleTokenStream(adaptor,"token RBRACKET");
        RewriteRuleSubtreeStream stream_pm_BlockDecls=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockDecls");
        RewriteRuleSubtreeStream stream_p_BlockBody=new RewriteRuleSubtreeStream(adaptor,"rule p_BlockBody");
        try {
            // XQueryParser.g:1427:9: ( LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET -> ^( Block $bd $bb) )
            // XQueryParser.g:1427:11: LBRACKET bd= pm_BlockDecls bb= p_BlockBody RBRACKET
            {
            LBRACKET595=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_Block12679); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACKET.add(LBRACKET595);

            pushFollow(FOLLOW_pm_BlockDecls_in_p_Block12683);
            bd=pm_BlockDecls();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_pm_BlockDecls.add(bd.getTree());
            pushFollow(FOLLOW_p_BlockBody_in_p_Block12687);
            bb=p_BlockBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_BlockBody.add(bb.getTree());
            RBRACKET596=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_Block12689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACKET.add(RBRACKET596);



            // AST REWRITE
            // elements: bb, bd
            // token labels: 
            // rule labels: bb, retval, bd
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_bb=new RewriteRuleSubtreeStream(adaptor,"rule bb",bb!=null?bb.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bd=new RewriteRuleSubtreeStream(adaptor,"rule bd",bd!=null?bd.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1428:17: -> ^( Block $bd $bb)
            {
                // XQueryParser.g:1428:20: ^( Block $bd $bb)
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(Block, "Block"), root_1);

                adaptor.addChild(root_1, stream_bd.nextTree());
                adaptor.addChild(root_1, stream_bb.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_Block"

    public static class pm_BlockDecls_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockDecls"
    // XQueryParser.g:1432:1: pm_BlockDecls : (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) ;
    public final XQueryParser.pm_BlockDecls_return pm_BlockDecls() throws RecognitionException {
        XQueryParser.pm_BlockDecls_return retval = new XQueryParser.pm_BlockDecls_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        List list_bvd=null;
        XQueryParser.pm_BlockVarDecl_return bvd = null;
         bvd = null;
        RewriteRuleSubtreeStream stream_pm_BlockVarDecl=new RewriteRuleSubtreeStream(adaptor,"rule pm_BlockVarDecl");
        try {
            // XQueryParser.g:1433:9: ( (bvd+= pm_BlockVarDecl )* -> ^( BlockDecls ( $bvd)* ) )
            // XQueryParser.g:1433:11: (bvd+= pm_BlockVarDecl )*
            {
            // XQueryParser.g:1433:14: (bvd+= pm_BlockVarDecl )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==DECLARE) ) {
                    int LA190_2 = input.LA(2);

                    if ( (LA190_2==DOLLAR) ) {
                        alt190=1;
                    }


                }


                switch (alt190) {
            	case 1 :
            	    // XQueryParser.g:1433:14: bvd+= pm_BlockVarDecl
            	    {
            	    pushFollow(FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12745);
            	    bvd=pm_BlockVarDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_pm_BlockVarDecl.add(bvd.getTree());
            	    if (list_bvd==null) list_bvd=new ArrayList();
            	    list_bvd.add(bvd.getTree());


            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);



            // AST REWRITE
            // elements: bvd
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: bvd
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bvd=new RewriteRuleSubtreeStream(adaptor,"token bvd",list_bvd);
            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1434:17: -> ^( BlockDecls ( $bvd)* )
            {
                // XQueryParser.g:1434:20: ^( BlockDecls ( $bvd)* )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockDecls, "BlockDecls"), root_1);

                // XQueryParser.g:1434:33: ( $bvd)*
                while ( stream_bvd.hasNext() ) {
                    adaptor.addChild(root_1, stream_bvd.nextTree());

                }
                stream_bvd.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockDecls"

    public static class pm_BlockVarDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pm_BlockVarDecl"
    // XQueryParser.g:1438:1: pm_BlockVarDecl : kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) ;
    public final XQueryParser.pm_BlockVarDecl_return pm_BlockVarDecl() throws RecognitionException {
        XQueryParser.pm_BlockVarDecl_return retval = new XQueryParser.pm_BlockVarDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kd=null;
        CommonToken DOLLAR597=null;
        CommonToken BIND598=null;
        CommonToken COMMA599=null;
        CommonToken DOLLAR600=null;
        CommonToken BIND603=null;
        CommonToken SEMICOLON605=null;
        XQueryParser.p_VarName_return qn = null;

        XQueryParser.p_TypeDeclaration_return td = null;

        XQueryParser.p_ExprSingle_return es = null;

        XQueryParser.p_VarName_return p_VarName601 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration602 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle604 = null;


        XQDTCommonTree kd_tree=null;
        XQDTCommonTree DOLLAR597_tree=null;
        XQDTCommonTree BIND598_tree=null;
        XQDTCommonTree COMMA599_tree=null;
        XQDTCommonTree DOLLAR600_tree=null;
        XQDTCommonTree BIND603_tree=null;
        XQDTCommonTree SEMICOLON605_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_DOLLAR=new RewriteRuleTokenStream(adaptor,"token DOLLAR");
        RewriteRuleTokenStream stream_SEMICOLON=new RewriteRuleTokenStream(adaptor,"token SEMICOLON");
        RewriteRuleTokenStream stream_BIND=new RewriteRuleTokenStream(adaptor,"token BIND");
        RewriteRuleTokenStream stream_DECLARE=new RewriteRuleTokenStream(adaptor,"token DECLARE");
        RewriteRuleSubtreeStream stream_p_ExprSingle=new RewriteRuleSubtreeStream(adaptor,"rule p_ExprSingle");
        RewriteRuleSubtreeStream stream_p_TypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule p_TypeDeclaration");
        RewriteRuleSubtreeStream stream_p_VarName=new RewriteRuleSubtreeStream(adaptor,"rule p_VarName");
        try {
            // XQueryParser.g:1439:9: (kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON -> ^( BlockVarDecl $qn ( $td)? ( $es)? ) )
            // XQueryParser.g:1439:11: kd= DECLARE DOLLAR qn= p_VarName (td= p_TypeDeclaration )? ( BIND es= p_ExprSingle )? ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )* SEMICOLON
            {
            kd=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_pm_BlockVarDecl12800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DECLARE.add(kd);

            if ( state.backtracking==0 ) {
              ak(kd);
            }
            DOLLAR597=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR597);

            pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12808);
            qn=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_p_VarName.add(qn.getTree());
            // XQueryParser.g:1439:55: (td= p_TypeDeclaration )?
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==AS) ) {
                alt191=1;
            }
            switch (alt191) {
                case 1 :
                    // XQueryParser.g:1439:55: td= p_TypeDeclaration
                    {
                    pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12812);
                    td=p_TypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(td.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1439:75: ( BIND es= p_ExprSingle )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==BIND) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // XQueryParser.g:1439:76: BIND es= p_ExprSingle
                    {
                    BIND598=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BIND.add(BIND598);

                    pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12820);
                    es=p_ExprSingle();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_p_ExprSingle.add(es.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1439:99: ( COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )? )*
            loop195:
            do {
                int alt195=2;
                int LA195_0 = input.LA(1);

                if ( (LA195_0==COMMA) ) {
                    alt195=1;
                }


                switch (alt195) {
            	case 1 :
            	    // XQueryParser.g:1439:100: COMMA DOLLAR p_VarName ( p_TypeDeclaration )? ( BIND p_ExprSingle )?
            	    {
            	    COMMA599=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_pm_BlockVarDecl12825); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA599);

            	    DOLLAR600=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_pm_BlockVarDecl12827); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOLLAR.add(DOLLAR600);

            	    pushFollow(FOLLOW_p_VarName_in_pm_BlockVarDecl12829);
            	    p_VarName601=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_p_VarName.add(p_VarName601.getTree());
            	    // XQueryParser.g:1439:123: ( p_TypeDeclaration )?
            	    int alt193=2;
            	    int LA193_0 = input.LA(1);

            	    if ( (LA193_0==AS) ) {
            	        alt193=1;
            	    }
            	    switch (alt193) {
            	        case 1 :
            	            // XQueryParser.g:1439:123: p_TypeDeclaration
            	            {
            	            pushFollow(FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12831);
            	            p_TypeDeclaration602=p_TypeDeclaration();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_TypeDeclaration.add(p_TypeDeclaration602.getTree());

            	            }
            	            break;

            	    }

            	    // XQueryParser.g:1439:142: ( BIND p_ExprSingle )?
            	    int alt194=2;
            	    int LA194_0 = input.LA(1);

            	    if ( (LA194_0==BIND) ) {
            	        alt194=1;
            	    }
            	    switch (alt194) {
            	        case 1 :
            	            // XQueryParser.g:1439:143: BIND p_ExprSingle
            	            {
            	            BIND603=(CommonToken)match(input,BIND,FOLLOW_BIND_in_pm_BlockVarDecl12835); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_BIND.add(BIND603);

            	            pushFollow(FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12837);
            	            p_ExprSingle604=p_ExprSingle();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_p_ExprSingle.add(p_ExprSingle604.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop195;
                }
            } while (true);

            SEMICOLON605=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_pm_BlockVarDecl12843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SEMICOLON.add(SEMICOLON605);



            // AST REWRITE
            // elements: td, es, qn
            // token labels: 
            // rule labels: td, qn, es, retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_td=new RewriteRuleSubtreeStream(adaptor,"rule td",td!=null?td.tree:null);
            RewriteRuleSubtreeStream stream_qn=new RewriteRuleSubtreeStream(adaptor,"rule qn",qn!=null?qn.tree:null);
            RewriteRuleSubtreeStream stream_es=new RewriteRuleSubtreeStream(adaptor,"rule es",es!=null?es.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (XQDTCommonTree)adaptor.nil();
            // 1440:17: -> ^( BlockVarDecl $qn ( $td)? ( $es)? )
            {
                // XQueryParser.g:1440:21: ^( BlockVarDecl $qn ( $td)? ( $es)? )
                {
                XQDTCommonTree root_1 = (XQDTCommonTree)adaptor.nil();
                root_1 = (XQDTCommonTree)adaptor.becomeRoot((XQDTCommonTree)adaptor.create(BlockVarDecl, "BlockVarDecl"), root_1);

                adaptor.addChild(root_1, stream_qn.nextTree());
                // XQueryParser.g:1440:40: ( $td)?
                if ( stream_td.hasNext() ) {
                    adaptor.addChild(root_1, stream_td.nextTree());

                }
                stream_td.reset();
                // XQueryParser.g:1440:45: ( $es)?
                if ( stream_es.hasNext() ) {
                    adaptor.addChild(root_1, stream_es.nextTree());

                }
                stream_es.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pm_BlockVarDecl"

    public static class p_BlockBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_BlockBody"
    // XQueryParser.g:1444:1: p_BlockBody : pm_Expr ;
    public final XQueryParser.p_BlockBody_return p_BlockBody() throws RecognitionException {
        XQueryParser.p_BlockBody_return retval = new XQueryParser.p_BlockBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.pm_Expr_return pm_Expr606 = null;



        try {
            // XQueryParser.g:1445:9: ( pm_Expr )
            // XQueryParser.g:1445:11: pm_Expr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_pm_Expr_in_p_BlockBody12903);
            pm_Expr606=pm_Expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pm_Expr606.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_BlockBody"

    public static class p_AssignmentExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_AssignmentExpr"
    // XQueryParser.g:1449:1: p_AssignmentExpr : ks= SET DOLLAR p_VarName BIND p_ExprSingle ;
    public final XQueryParser.p_AssignmentExpr_return p_AssignmentExpr() throws RecognitionException {
        XQueryParser.p_AssignmentExpr_return retval = new XQueryParser.p_AssignmentExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ks=null;
        CommonToken DOLLAR607=null;
        CommonToken BIND609=null;
        XQueryParser.p_VarName_return p_VarName608 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle610 = null;


        XQDTCommonTree ks_tree=null;
        XQDTCommonTree DOLLAR607_tree=null;
        XQDTCommonTree BIND609_tree=null;

        try {
            // XQueryParser.g:1450:9: (ks= SET DOLLAR p_VarName BIND p_ExprSingle )
            // XQueryParser.g:1450:11: ks= SET DOLLAR p_VarName BIND p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ks=(CommonToken)match(input,SET,FOLLOW_SET_in_p_AssignmentExpr12931); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ks_tree = (XQDTCommonTree)adaptor.create(ks);
            adaptor.addChild(root_0, ks_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ks);
            }
            DOLLAR607=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_AssignmentExpr12935); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR607_tree = (XQDTCommonTree)adaptor.create(DOLLAR607);
            adaptor.addChild(root_0, DOLLAR607_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_AssignmentExpr12937);
            p_VarName608=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName608.getTree());
            BIND609=(CommonToken)match(input,BIND,FOLLOW_BIND_in_p_AssignmentExpr12939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BIND609_tree = (XQDTCommonTree)adaptor.create(BIND609);
            adaptor.addChild(root_0, BIND609_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_AssignmentExpr12941);
            p_ExprSingle610=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle610.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_AssignmentExpr"

    public static class p_ExitExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ExitExpr"
    // XQueryParser.g:1454:1: p_ExitExpr : ke= EXIT kr= RETURNING p_ExprSingle ;
    public final XQueryParser.p_ExitExpr_return p_ExitExpr() throws RecognitionException {
        XQueryParser.p_ExitExpr_return retval = new XQueryParser.p_ExitExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken kr=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle611 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree kr_tree=null;

        try {
            // XQueryParser.g:1455:9: (ke= EXIT kr= RETURNING p_ExprSingle )
            // XQueryParser.g:1455:11: ke= EXIT kr= RETURNING p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ke=(CommonToken)match(input,EXIT,FOLLOW_EXIT_in_p_ExitExpr12969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            kr=(CommonToken)match(input,RETURNING,FOLLOW_RETURNING_in_p_ExitExpr12975); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kr_tree = (XQDTCommonTree)adaptor.create(kr);
            adaptor.addChild(root_0, kr_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kr);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ExitExpr12979);
            p_ExprSingle611=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle611.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ExitExpr"

    public static class p_WhileExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileExpr"
    // XQueryParser.g:1459:1: p_WhileExpr : kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody ;
    public final XQueryParser.p_WhileExpr_return p_WhileExpr() throws RecognitionException {
        XQueryParser.p_WhileExpr_return retval = new XQueryParser.p_WhileExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kw=null;
        CommonToken LPAREN612=null;
        CommonToken RPAREN614=null;
        XQueryParser.p_ExprSingle_return p_ExprSingle613 = null;

        XQueryParser.p_WhileBody_return p_WhileBody615 = null;


        XQDTCommonTree kw_tree=null;
        XQDTCommonTree LPAREN612_tree=null;
        XQDTCommonTree RPAREN614_tree=null;

        try {
            // XQueryParser.g:1460:9: (kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody )
            // XQueryParser.g:1460:11: kw= WHILE LPAREN p_ExprSingle RPAREN p_WhileBody
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kw=(CommonToken)match(input,WHILE,FOLLOW_WHILE_in_p_WhileExpr13007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kw_tree = (XQDTCommonTree)adaptor.create(kw);
            adaptor.addChild(root_0, kw_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kw);
            }
            LPAREN612=(CommonToken)match(input,LPAREN,FOLLOW_LPAREN_in_p_WhileExpr13011); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN612_tree = (XQDTCommonTree)adaptor.create(LPAREN612);
            adaptor.addChild(root_0, LPAREN612_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_WhileExpr13013);
            p_ExprSingle613=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle613.getTree());
            RPAREN614=(CommonToken)match(input,RPAREN,FOLLOW_RPAREN_in_p_WhileExpr13015); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN614_tree = (XQDTCommonTree)adaptor.create(RPAREN614);
            adaptor.addChild(root_0, RPAREN614_tree);
            }
            pushFollow(FOLLOW_p_WhileBody_in_p_WhileExpr13017);
            p_WhileBody615=p_WhileBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_WhileBody615.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileExpr"

    public static class p_WhileBody_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_WhileBody"
    // XQueryParser.g:1464:1: p_WhileBody : p_Block ;
    public final XQueryParser.p_WhileBody_return p_WhileBody() throws RecognitionException {
        XQueryParser.p_WhileBody_return retval = new XQueryParser.p_WhileBody_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_Block_return p_Block616 = null;



        try {
            // XQueryParser.g:1465:9: ( p_Block )
            // XQueryParser.g:1465:11: p_Block
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_Block_in_p_WhileBody13043);
            p_Block616=p_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_Block616.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_WhileBody"

    public static class p_EvalExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_EvalExpr"
    // XQueryParser.g:1473:1: p_EvalExpr : ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET ;
    public final XQueryParser.p_EvalExpr_return p_EvalExpr() throws RecognitionException {
        XQueryParser.p_EvalExpr_return retval = new XQueryParser.p_EvalExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ke=null;
        CommonToken LBRACKET618=null;
        CommonToken RBRACKET620=null;
        XQueryParser.p_UsingClause_return p_UsingClause617 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle619 = null;


        XQDTCommonTree ke_tree=null;
        XQDTCommonTree LBRACKET618_tree=null;
        XQDTCommonTree RBRACKET620_tree=null;

        try {
            // XQueryParser.g:1474:9: ( ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET )
            // XQueryParser.g:1474:11: ( p_UsingClause )? ke= EVAL LBRACKET p_ExprSingle RBRACKET
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1474:11: ( p_UsingClause )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==USING) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // XQueryParser.g:1474:11: p_UsingClause
                    {
                    pushFollow(FOLLOW_p_UsingClause_in_p_EvalExpr13073);
                    p_UsingClause617=p_UsingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_UsingClause617.getTree());

                    }
                    break;

            }

            ke=(CommonToken)match(input,EVAL,FOLLOW_EVAL_in_p_EvalExpr13078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ke_tree = (XQDTCommonTree)adaptor.create(ke);
            adaptor.addChild(root_0, ke_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ke);
            }
            LBRACKET618=(CommonToken)match(input,LBRACKET,FOLLOW_LBRACKET_in_p_EvalExpr13082); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LBRACKET618_tree = (XQDTCommonTree)adaptor.create(LBRACKET618);
            adaptor.addChild(root_0, LBRACKET618_tree);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_EvalExpr13084);
            p_ExprSingle619=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle619.getTree());
            RBRACKET620=(CommonToken)match(input,RBRACKET,FOLLOW_RBRACKET_in_p_EvalExpr13086); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RBRACKET620_tree = (XQDTCommonTree)adaptor.create(RBRACKET620);
            adaptor.addChild(root_0, RBRACKET620_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_EvalExpr"

    public static class p_UsingClause_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_UsingClause"
    // XQueryParser.g:1477:1: p_UsingClause : ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* ;
    public final XQueryParser.p_UsingClause_return p_UsingClause() throws RecognitionException {
        XQueryParser.p_UsingClause_return retval = new XQueryParser.p_UsingClause_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ku=null;
        CommonToken DOLLAR621=null;
        CommonToken COMMA623=null;
        CommonToken DOLLAR624=null;
        XQueryParser.p_VarName_return p_VarName622 = null;

        XQueryParser.p_VarName_return p_VarName625 = null;


        XQDTCommonTree ku_tree=null;
        XQDTCommonTree DOLLAR621_tree=null;
        XQDTCommonTree COMMA623_tree=null;
        XQDTCommonTree DOLLAR624_tree=null;

        try {
            // XQueryParser.g:1478:9: (ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )* )
            // XQueryParser.g:1478:11: ku= USING DOLLAR p_VarName ( COMMA DOLLAR p_VarName )*
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            ku=(CommonToken)match(input,USING,FOLLOW_USING_in_p_UsingClause13113); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ku_tree = (XQDTCommonTree)adaptor.create(ku);
            adaptor.addChild(root_0, ku_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ku);
            }
            DOLLAR621=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause13117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR621_tree = (XQDTCommonTree)adaptor.create(DOLLAR621);
            adaptor.addChild(root_0, DOLLAR621_tree);
            }
            pushFollow(FOLLOW_p_VarName_in_p_UsingClause13119);
            p_VarName622=p_VarName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName622.getTree());
            // XQueryParser.g:1478:48: ( COMMA DOLLAR p_VarName )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==COMMA) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // XQueryParser.g:1478:49: COMMA DOLLAR p_VarName
            	    {
            	    COMMA623=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_UsingClause13122); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA623_tree = (XQDTCommonTree)adaptor.create(COMMA623);
            	    adaptor.addChild(root_0, COMMA623_tree);
            	    }
            	    DOLLAR624=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_UsingClause13124); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOLLAR624_tree = (XQDTCommonTree)adaptor.create(DOLLAR624);
            	    adaptor.addChild(root_0, DOLLAR624_tree);
            	    }
            	    pushFollow(FOLLOW_p_VarName_in_p_UsingClause13126);
            	    p_VarName625=p_VarName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_VarName625.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_UsingClause"

    public static class p_CollectionDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionDecl"
    // XQueryParser.g:1487:1: p_CollectionDecl : k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON ;
    public final XQueryParser.p_CollectionDecl_return p_CollectionDecl() throws RecognitionException {
        XQueryParser.p_CollectionDecl_return retval = new XQueryParser.p_CollectionDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON630=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_CollProperties_return p_CollProperties626 = null;

        XQueryParser.p_QName_return p_QName627 = null;

        XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl628 = null;

        XQueryParser.p_NodeModifier_return p_NodeModifier629 = null;


        XQDTCommonTree SEMICOLON630_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1488:9: (k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON )
            // XQueryParser.g:1488:11: k+= DECLARE p_CollProperties k+= COLLECTION p_QName ( p_CollectionTypeDecl )? (k+= WITH p_NodeModifier k+= NODES )? SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_CollectionDecl13161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_CollProperties_in_p_CollectionDecl13163);
            p_CollProperties626=p_CollProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollProperties626.getTree());
            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_CollectionDecl13167); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_CollectionDecl13169);
            p_QName627=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName627.getTree());
            // XQueryParser.g:1488:61: ( p_CollectionTypeDecl )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==AS) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // XQueryParser.g:1488:61: p_CollectionTypeDecl
                    {
                    pushFollow(FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl13171);
                    p_CollectionTypeDecl628=p_CollectionTypeDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_CollectionTypeDecl628.getTree());

                    }
                    break;

            }

            // XQueryParser.g:1488:83: (k+= WITH p_NodeModifier k+= NODES )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==WITH) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // XQueryParser.g:1488:84: k+= WITH p_NodeModifier k+= NODES
                    {
                    k=(CommonToken)match(input,WITH,FOLLOW_WITH_in_p_CollectionDecl13177); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);

                    pushFollow(FOLLOW_p_NodeModifier_in_p_CollectionDecl13179);
                    p_NodeModifier629=p_NodeModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_NodeModifier629.getTree());
                    k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_CollectionDecl13183); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            SEMICOLON630=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_CollectionDecl13187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON630_tree = (XQDTCommonTree)adaptor.create(SEMICOLON630);
            adaptor.addChild(root_0, SEMICOLON630_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionDecl"

    public static class p_CollProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollProperties"
    // XQueryParser.g:1491:1: p_CollProperties : ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) ;
    public final XQueryParser.p_CollProperties_return p_CollProperties() throws RecognitionException {
        XQueryParser.p_CollProperties_return retval = new XQueryParser.p_CollProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1492:9: ( ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* ) )
            // XQueryParser.g:1492:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1492:11: ( (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )* )
            // XQueryParser.g:1492:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            {
            // XQueryParser.g:1492:12: (k+= CONST | k+= MUTABLE | k+= APPEND_ONLY | k+= QUEUE | k+= ORDERED | k+= UNORDERED )*
            loop200:
            do {
                int alt200=7;
                switch ( input.LA(1) ) {
                case CONST:
                    {
                    alt200=1;
                    }
                    break;
                case MUTABLE:
                    {
                    alt200=2;
                    }
                    break;
                case APPEND_ONLY:
                    {
                    alt200=3;
                    }
                    break;
                case QUEUE:
                    {
                    alt200=4;
                    }
                    break;
                case ORDERED:
                    {
                    alt200=5;
                    }
                    break;
                case UNORDERED:
                    {
                    alt200=6;
                    }
                    break;

                }

                switch (alt200) {
            	case 1 :
            	    // XQueryParser.g:1492:13: k+= CONST
            	    {
            	    k=(CommonToken)match(input,CONST,FOLLOW_CONST_in_p_CollProperties13218); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1492:24: k+= MUTABLE
            	    {
            	    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_CollProperties13224); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1493:11: k+= APPEND_ONLY
            	    {
            	    k=(CommonToken)match(input,APPEND_ONLY,FOLLOW_APPEND_ONLY_in_p_CollProperties13238); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1493:28: k+= QUEUE
            	    {
            	    k=(CommonToken)match(input,QUEUE,FOLLOW_QUEUE_in_p_CollProperties13244); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1494:11: k+= ORDERED
            	    {
            	    k=(CommonToken)match(input,ORDERED,FOLLOW_ORDERED_in_p_CollProperties13258); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1494:24: k+= UNORDERED
            	    {
            	    k=(CommonToken)match(input,UNORDERED,FOLLOW_UNORDERED_in_p_CollProperties13264); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop200;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollProperties"

    public static class p_CollectionTypeDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_CollectionTypeDecl"
    // XQueryParser.g:1497:1: p_CollectionTypeDecl : (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) ;
    public final XQueryParser.p_CollectionTypeDecl_return p_CollectionTypeDecl() throws RecognitionException {
        XQueryParser.p_CollectionTypeDecl_return retval = new XQueryParser.p_CollectionTypeDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken ka=null;
        XQueryParser.p_KindTest_return p_KindTest631 = null;

        XQueryParser.p_OccurrenceIndicator_return p_OccurrenceIndicator632 = null;


        XQDTCommonTree ka_tree=null;

        try {
            // XQueryParser.g:1498:9: ( (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? ) )
            // XQueryParser.g:1498:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1498:11: (ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )? )
            // XQueryParser.g:1498:12: ka= AS p_KindTest ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            {
            ka=(CommonToken)match(input,AS,FOLLOW_AS_in_p_CollectionTypeDecl13297); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ka_tree = (XQDTCommonTree)adaptor.create(ka);
            adaptor.addChild(root_0, ka_tree);
            }
            if ( state.backtracking==0 ) {
              ak(ka);
            }
            pushFollow(FOLLOW_p_KindTest_in_p_CollectionTypeDecl13301);
            p_KindTest631=p_KindTest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_KindTest631.getTree());
            // XQueryParser.g:1498:40: ( ( p_OccurrenceIndicator )=> p_OccurrenceIndicator )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( ((LA201_0>=QUESTION && LA201_0<=PLUS)) && (synpred3_XQueryParser())) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // XQueryParser.g:1498:41: ( p_OccurrenceIndicator )=> p_OccurrenceIndicator
                    {
                    pushFollow(FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl13310);
                    p_OccurrenceIndicator632=p_OccurrenceIndicator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OccurrenceIndicator632.getTree());

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_CollectionTypeDecl"

    public static class p_NodeModifier_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_NodeModifier"
    // XQueryParser.g:1501:1: p_NodeModifier : (k+= READ_ONLY | k+= MUTABLE ) ;
    public final XQueryParser.p_NodeModifier_return p_NodeModifier() throws RecognitionException {
        XQueryParser.p_NodeModifier_return retval = new XQueryParser.p_NodeModifier_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1502:9: ( (k+= READ_ONLY | k+= MUTABLE ) )
            // XQueryParser.g:1502:11: (k+= READ_ONLY | k+= MUTABLE )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1502:11: (k+= READ_ONLY | k+= MUTABLE )
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==READ_ONLY) ) {
                alt202=1;
            }
            else if ( (LA202_0==MUTABLE) ) {
                alt202=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }
            switch (alt202) {
                case 1 :
                    // XQueryParser.g:1502:12: k+= READ_ONLY
                    {
                    k=(CommonToken)match(input,READ_ONLY,FOLLOW_READ_ONLY_in_p_NodeModifier13341); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;
                case 2 :
                    // XQueryParser.g:1502:27: k+= MUTABLE
                    {
                    k=(CommonToken)match(input,MUTABLE,FOLLOW_MUTABLE_in_p_NodeModifier13347); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    k_tree = (XQDTCommonTree)adaptor.create(k);
                    adaptor.addChild(root_0, k_tree);
                    }
                    if (list_k==null) list_k=new ArrayList();
                    list_k.add(k);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_NodeModifier"

    public static class p_IndexDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDecl"
    // XQueryParser.g:1505:1: p_IndexDecl : k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON ;
    public final XQueryParser.p_IndexDecl_return p_IndexDecl() throws RecognitionException {
        XQueryParser.p_IndexDecl_return retval = new XQueryParser.p_IndexDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken COMMA637=null;
        CommonToken SEMICOLON639=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_IndexProperties_return p_IndexProperties633 = null;

        XQueryParser.p_IndexName_return p_IndexName634 = null;

        XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr635 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec636 = null;

        XQueryParser.p_IndexKeySpec_return p_IndexKeySpec638 = null;


        XQDTCommonTree COMMA637_tree=null;
        XQDTCommonTree SEMICOLON639_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1506:9: (k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON )
            // XQueryParser.g:1506:11: k+= DECLARE p_IndexProperties k+= INDEX p_IndexName k+= ON k+= NODES p_IndexDomainExpr k+= BY p_IndexKeySpec ( COMMA p_IndexKeySpec )* SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_IndexDecl13377); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexProperties_in_p_IndexDecl13379);
            p_IndexProperties633=p_IndexProperties();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexProperties633.getTree());
            k=(CommonToken)match(input,INDEX,FOLLOW_INDEX_in_p_IndexDecl13383); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexName_in_p_IndexDecl13385);
            p_IndexName634=p_IndexName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexName634.getTree());
            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_IndexDecl13389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODES,FOLLOW_NODES_in_p_IndexDecl13393); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexDomainExpr_in_p_IndexDecl13395);
            p_IndexDomainExpr635=p_IndexDomainExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexDomainExpr635.getTree());
            k=(CommonToken)match(input,BY,FOLLOW_BY_in_p_IndexDecl13399); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl13401);
            p_IndexKeySpec636=p_IndexKeySpec();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec636.getTree());
            // XQueryParser.g:1506:115: ( COMMA p_IndexKeySpec )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // XQueryParser.g:1506:116: COMMA p_IndexKeySpec
            	    {
            	    COMMA637=(CommonToken)match(input,COMMA,FOLLOW_COMMA_in_p_IndexDecl13404); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA637_tree = (XQDTCommonTree)adaptor.create(COMMA637);
            	    adaptor.addChild(root_0, COMMA637_tree);
            	    }
            	    pushFollow(FOLLOW_p_IndexKeySpec_in_p_IndexDecl13406);
            	    p_IndexKeySpec638=p_IndexKeySpec();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeySpec638.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);

            SEMICOLON639=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_IndexDecl13410); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON639_tree = (XQDTCommonTree)adaptor.create(SEMICOLON639);
            adaptor.addChild(root_0, SEMICOLON639_tree);
            }
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDecl"

    public static class p_IndexName_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexName"
    // XQueryParser.g:1509:1: p_IndexName : p_QName ;
    public final XQueryParser.p_IndexName_return p_IndexName() throws RecognitionException {
        XQueryParser.p_IndexName_return retval = new XQueryParser.p_IndexName_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_QName_return p_QName640 = null;



        try {
            // XQueryParser.g:1510:9: ( p_QName )
            // XQueryParser.g:1510:11: p_QName
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_QName_in_p_IndexName13437);
            p_QName640=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName640.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexName"

    public static class p_IndexProperties_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexProperties"
    // XQueryParser.g:1513:1: p_IndexProperties : ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) ;
    public final XQueryParser.p_IndexProperties_return p_IndexProperties() throws RecognitionException {
        XQueryParser.p_IndexProperties_return retval = new XQueryParser.p_IndexProperties_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;

        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1514:9: ( ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* ) )
            // XQueryParser.g:1514:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            // XQueryParser.g:1514:11: ( (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )* )
            // XQueryParser.g:1514:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            {
            // XQueryParser.g:1514:12: (k+= UNIQUE | k+= NON k+= UNIQUE | k+= VALUE k+= RANGE | k+= VALUE k+= EQUALITY | k+= AUTOMATICALLY k+= MAINTAINED | k+= MANUALLY k+= MAINTAINED )*
            loop204:
            do {
                int alt204=7;
                switch ( input.LA(1) ) {
                case UNIQUE:
                    {
                    alt204=1;
                    }
                    break;
                case NON:
                    {
                    alt204=2;
                    }
                    break;
                case VALUE:
                    {
                    int LA204_4 = input.LA(2);

                    if ( (LA204_4==RANGE) ) {
                        alt204=3;
                    }
                    else if ( (LA204_4==EQUALITY) ) {
                        alt204=4;
                    }


                    }
                    break;
                case AUTOMATICALLY:
                    {
                    alt204=5;
                    }
                    break;
                case MANUALLY:
                    {
                    alt204=6;
                    }
                    break;

                }

                switch (alt204) {
            	case 1 :
            	    // XQueryParser.g:1514:13: k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties13466); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 2 :
            	    // XQueryParser.g:1514:25: k+= NON k+= UNIQUE
            	    {
            	    k=(CommonToken)match(input,NON,FOLLOW_NON_in_p_IndexProperties13472); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_IndexProperties13476); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 3 :
            	    // XQueryParser.g:1515:11: k+= VALUE k+= RANGE
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties13490); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,RANGE,FOLLOW_RANGE_in_p_IndexProperties13494); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 4 :
            	    // XQueryParser.g:1515:31: k+= VALUE k+= EQUALITY
            	    {
            	    k=(CommonToken)match(input,VALUE,FOLLOW_VALUE_in_p_IndexProperties13500); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,EQUALITY,FOLLOW_EQUALITY_in_p_IndexProperties13504); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 5 :
            	    // XQueryParser.g:1516:11: k+= AUTOMATICALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,AUTOMATICALLY,FOLLOW_AUTOMATICALLY_in_p_IndexProperties13518); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties13522); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;
            	case 6 :
            	    // XQueryParser.g:1516:44: k+= MANUALLY k+= MAINTAINED
            	    {
            	    k=(CommonToken)match(input,MANUALLY,FOLLOW_MANUALLY_in_p_IndexProperties13528); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);

            	    k=(CommonToken)match(input,MAINTAINED,FOLLOW_MAINTAINED_in_p_IndexProperties13532); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    k_tree = (XQDTCommonTree)adaptor.create(k);
            	    adaptor.addChild(root_0, k_tree);
            	    }
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k);


            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexProperties"

    public static class p_IndexDomainExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexDomainExpr"
    // XQueryParser.g:1519:1: p_IndexDomainExpr : p_PathExpr ;
    public final XQueryParser.p_IndexDomainExpr_return p_IndexDomainExpr() throws RecognitionException {
        XQueryParser.p_IndexDomainExpr_return retval = new XQueryParser.p_IndexDomainExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr641 = null;



        try {
            // XQueryParser.g:1520:9: ( p_PathExpr )
            // XQueryParser.g:1520:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexDomainExpr13562);
            p_PathExpr641=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr641.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexDomainExpr"

    public static class p_IndexKeySpec_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeySpec"
    // XQueryParser.g:1523:1: p_IndexKeySpec : p_IndexKeyExpr p_TypeDeclaration p_OrderModifier ;
    public final XQueryParser.p_IndexKeySpec_return p_IndexKeySpec() throws RecognitionException {
        XQueryParser.p_IndexKeySpec_return retval = new XQueryParser.p_IndexKeySpec_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr642 = null;

        XQueryParser.p_TypeDeclaration_return p_TypeDeclaration643 = null;

        XQueryParser.p_OrderModifier_return p_OrderModifier644 = null;



        try {
            // XQueryParser.g:1524:9: ( p_IndexKeyExpr p_TypeDeclaration p_OrderModifier )
            // XQueryParser.g:1524:11: p_IndexKeyExpr p_TypeDeclaration p_OrderModifier
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec13587);
            p_IndexKeyExpr642=p_IndexKeyExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_IndexKeyExpr642.getTree());
            pushFollow(FOLLOW_p_TypeDeclaration_in_p_IndexKeySpec13589);
            p_TypeDeclaration643=p_TypeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_TypeDeclaration643.getTree());
            pushFollow(FOLLOW_p_OrderModifier_in_p_IndexKeySpec13591);
            p_OrderModifier644=p_OrderModifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_OrderModifier644.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeySpec"

    public static class p_IndexKeyExpr_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_IndexKeyExpr"
    // XQueryParser.g:1527:1: p_IndexKeyExpr : p_PathExpr ;
    public final XQueryParser.p_IndexKeyExpr_return p_IndexKeyExpr() throws RecognitionException {
        XQueryParser.p_IndexKeyExpr_return retval = new XQueryParser.p_IndexKeyExpr_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        XQueryParser.p_PathExpr_return p_PathExpr645 = null;



        try {
            // XQueryParser.g:1528:9: ( p_PathExpr )
            // XQueryParser.g:1528:11: p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            pushFollow(FOLLOW_p_PathExpr_in_p_IndexKeyExpr13616);
            p_PathExpr645=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr645.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_IndexKeyExpr"

    public static class p_ICDecl_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICDecl"
    // XQueryParser.g:1531:1: p_ICDecl : k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON ;
    public final XQueryParser.p_ICDecl_return p_ICDecl() throws RecognitionException {
        XQueryParser.p_ICDecl_return retval = new XQueryParser.p_ICDecl_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken SEMICOLON649=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName646 = null;

        XQueryParser.p_ICCollection_return p_ICCollection647 = null;

        XQueryParser.p_ICForeignKey_return p_ICForeignKey648 = null;


        XQDTCommonTree SEMICOLON649_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1532:9: (k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON )
            // XQueryParser.g:1532:11: k+= DECLARE k+= INTEGRITY k+= CONSTRAINT p_QName ( p_ICCollection | p_ICForeignKey ) SEMICOLON
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,DECLARE,FOLLOW_DECLARE_in_p_ICDecl13643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,INTEGRITY,FOLLOW_INTEGRITY_in_p_ICDecl13647); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,CONSTRAINT,FOLLOW_CONSTRAINT_in_p_ICDecl13651); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICDecl13655);
            p_QName646=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName646.getTree());
            // XQueryParser.g:1532:67: ( p_ICCollection | p_ICForeignKey )
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==ON) ) {
                alt205=1;
            }
            else if ( (LA205_0==FOREIGN) ) {
                alt205=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 205, 0, input);

                throw nvae;
            }
            switch (alt205) {
                case 1 :
                    // XQueryParser.g:1532:68: p_ICCollection
                    {
                    pushFollow(FOLLOW_p_ICCollection_in_p_ICDecl13658);
                    p_ICCollection647=p_ICCollection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollection647.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1532:85: p_ICForeignKey
                    {
                    pushFollow(FOLLOW_p_ICForeignKey_in_p_ICDecl13662);
                    p_ICForeignKey648=p_ICForeignKey();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKey648.getTree());

                    }
                    break;

            }

            SEMICOLON649=(CommonToken)match(input,SEMICOLON,FOLLOW_SEMICOLON_in_p_ICDecl13665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMICOLON649_tree = (XQDTCommonTree)adaptor.create(SEMICOLON649);
            adaptor.addChild(root_0, SEMICOLON649_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICDecl"

    public static class p_ICCollection_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollection"
    // XQueryParser.g:1535:1: p_ICCollection : k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) ;
    public final XQueryParser.p_ICCollection_return p_ICCollection() throws RecognitionException {
        XQueryParser.p_ICCollection_return retval = new XQueryParser.p_ICCollection_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName650 = null;

        XQueryParser.p_ICCollSequence_return p_ICCollSequence651 = null;

        XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique652 = null;

        XQueryParser.p_ICCollNode_return p_ICCollNode653 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1536:9: (k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode ) )
            // XQueryParser.g:1536:11: k+= ON k+= COLLECTION p_QName ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,ON,FOLLOW_ON_in_p_ICCollection13692); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICCollection13696); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            if ( state.backtracking==0 ) {
              ak(list_k);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollection13700);
            p_QName650=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName650.getTree());
            // XQueryParser.g:1536:49: ( p_ICCollSequence | p_ICCollSequenceUnique | p_ICCollNode )
            int alt206=3;
            switch ( input.LA(1) ) {
            case DOLLAR:
                {
                alt206=1;
                }
                break;
            case NODE:
                {
                alt206=2;
                }
                break;
            case FOREACH:
                {
                alt206=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 206, 0, input);

                throw nvae;
            }

            switch (alt206) {
                case 1 :
                    // XQueryParser.g:1536:50: p_ICCollSequence
                    {
                    pushFollow(FOLLOW_p_ICCollSequence_in_p_ICCollection13703);
                    p_ICCollSequence651=p_ICCollSequence();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequence651.getTree());

                    }
                    break;
                case 2 :
                    // XQueryParser.g:1536:69: p_ICCollSequenceUnique
                    {
                    pushFollow(FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection13707);
                    p_ICCollSequenceUnique652=p_ICCollSequenceUnique();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollSequenceUnique652.getTree());

                    }
                    break;
                case 3 :
                    // XQueryParser.g:1536:94: p_ICCollNode
                    {
                    pushFollow(FOLLOW_p_ICCollNode_in_p_ICCollection13711);
                    p_ICCollNode653=p_ICCollNode();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICCollNode653.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollection"

    public static class p_ICCollSequence_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequence"
    // XQueryParser.g:1539:1: p_ICCollSequence : DOLLAR p_QName kc= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollSequence_return p_ICCollSequence() throws RecognitionException {
        XQueryParser.p_ICCollSequence_return retval = new XQueryParser.p_ICCollSequence_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kc=null;
        CommonToken DOLLAR654=null;
        XQueryParser.p_QName_return p_QName655 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle656 = null;


        XQDTCommonTree kc_tree=null;
        XQDTCommonTree DOLLAR654_tree=null;

        try {
            // XQueryParser.g:1540:9: ( DOLLAR p_QName kc= CHECK p_ExprSingle )
            // XQueryParser.g:1540:11: DOLLAR p_QName kc= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            DOLLAR654=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequence13737); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR654_tree = (XQDTCommonTree)adaptor.create(DOLLAR654);
            adaptor.addChild(root_0, DOLLAR654_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollSequence13739);
            p_QName655=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName655.getTree());
            kc=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequence13743); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kc_tree = (XQDTCommonTree)adaptor.create(kc);
            adaptor.addChild(root_0, kc_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kc);
            }
            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollSequence13747);
            p_ExprSingle656=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle656.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequence"

    public static class p_ICCollSequenceUnique_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollSequenceUnique"
    // XQueryParser.g:1543:1: p_ICCollSequenceUnique : k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICCollSequenceUnique_return p_ICCollSequenceUnique() throws RecognitionException {
        XQueryParser.p_ICCollSequenceUnique_return retval = new XQueryParser.p_ICCollSequenceUnique_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName657 = null;

        XQueryParser.p_PathExpr_return p_PathExpr658 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1544:9: (k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr )
            // XQueryParser.g:1544:11: k+= NODE k+= DOLLAR p_QName k+= CHECK k+= UNIQUE k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollSequenceUnique13774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollSequenceUnique13778); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICCollSequenceUnique13780);
            p_QName657=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName657.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollSequenceUnique13784); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,UNIQUE,FOLLOW_UNIQUE_in_p_ICCollSequenceUnique13788); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICCollSequenceUnique13792); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique13794);
            p_PathExpr658=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr658.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollSequenceUnique"

    public static class p_ICCollNode_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICCollNode"
    // XQueryParser.g:1547:1: p_ICCollNode : k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle ;
    public final XQueryParser.p_ICCollNode_return p_ICCollNode() throws RecognitionException {
        XQueryParser.p_ICCollNode_return retval = new XQueryParser.p_ICCollNode_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR659=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName660 = null;

        XQueryParser.p_ExprSingle_return p_ExprSingle661 = null;


        XQDTCommonTree DOLLAR659_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1548:9: (k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle )
            // XQueryParser.g:1548:11: k+= FOREACH k+= NODE DOLLAR p_QName k+= CHECK p_ExprSingle
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREACH,FOLLOW_FOREACH_in_p_ICCollNode13823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICCollNode13827); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR659=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICCollNode13829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR659_tree = (XQDTCommonTree)adaptor.create(DOLLAR659);
            adaptor.addChild(root_0, DOLLAR659_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICCollNode13831);
            p_QName660=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName660.getTree());
            k=(CommonToken)match(input,CHECK,FOLLOW_CHECK_in_p_ICCollNode13835); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ExprSingle_in_p_ICCollNode13837);
            p_ExprSingle661=p_ExprSingle();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ExprSingle661.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICCollNode"

    public static class p_ICForeignKey_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKey"
    // XQueryParser.g:1551:1: p_ICForeignKey : k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget ;
    public final XQueryParser.p_ICForeignKey_return p_ICForeignKey() throws RecognitionException {
        XQueryParser.p_ICForeignKey_return retval = new XQueryParser.p_ICForeignKey_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource662 = null;

        XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget663 = null;


        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1552:9: (k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget )
            // XQueryParser.g:1552:11: k+= FOREIGN k+= KEY p_ICForeignKeySource p_ICForeignKeyTarget
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,FOREIGN,FOLLOW_FOREIGN_in_p_ICForeignKey13866); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKey13870); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey13872);
            p_ICForeignKeySource662=p_ICForeignKeySource();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeySource662.getTree());
            pushFollow(FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey13874);
            p_ICForeignKeyTarget663=p_ICForeignKeyTarget();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyTarget663.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKey"

    public static class p_ICForeignKeySource_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeySource"
    // XQueryParser.g:1555:1: p_ICForeignKeySource : kf= FROM p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeySource_return p_ICForeignKeySource() throws RecognitionException {
        XQueryParser.p_ICForeignKeySource_return retval = new XQueryParser.p_ICForeignKeySource_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kf=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues664 = null;


        XQDTCommonTree kf_tree=null;

        try {
            // XQueryParser.g:1556:9: (kf= FROM p_ICForeignKeyValues )
            // XQueryParser.g:1556:11: kf= FROM p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kf=(CommonToken)match(input,FROM,FOLLOW_FROM_in_p_ICForeignKeySource13903); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kf_tree = (XQDTCommonTree)adaptor.create(kf);
            adaptor.addChild(root_0, kf_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kf);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource13907);
            p_ICForeignKeyValues664=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues664.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeySource"

    public static class p_ICForeignKeyTarget_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyTarget"
    // XQueryParser.g:1559:1: p_ICForeignKeyTarget : kt= TO p_ICForeignKeyValues ;
    public final XQueryParser.p_ICForeignKeyTarget_return p_ICForeignKeyTarget() throws RecognitionException {
        XQueryParser.p_ICForeignKeyTarget_return retval = new XQueryParser.p_ICForeignKeyTarget_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken kt=null;
        XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues665 = null;


        XQDTCommonTree kt_tree=null;

        try {
            // XQueryParser.g:1560:9: (kt= TO p_ICForeignKeyValues )
            // XQueryParser.g:1560:11: kt= TO p_ICForeignKeyValues
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            kt=(CommonToken)match(input,TO,FOLLOW_TO_in_p_ICForeignKeyTarget13934); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            kt_tree = (XQDTCommonTree)adaptor.create(kt);
            adaptor.addChild(root_0, kt_tree);
            }
            if ( state.backtracking==0 ) {
              ak(kt);
            }
            pushFollow(FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget13938);
            p_ICForeignKeyValues665=p_ICForeignKeyValues();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_ICForeignKeyValues665.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyTarget"

    public static class p_ICForeignKeyValues_return extends ParserRuleReturnScope {
        XQDTCommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "p_ICForeignKeyValues"
    // XQueryParser.g:1563:1: p_ICForeignKeyValues : k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr ;
    public final XQueryParser.p_ICForeignKeyValues_return p_ICForeignKeyValues() throws RecognitionException {
        XQueryParser.p_ICForeignKeyValues_return retval = new XQueryParser.p_ICForeignKeyValues_return();
        retval.start = input.LT(1);

        XQDTCommonTree root_0 = null;

        CommonToken DOLLAR667=null;
        CommonToken k=null;
        List list_k=null;
        XQueryParser.p_QName_return p_QName666 = null;

        XQueryParser.p_QName_return p_QName668 = null;

        XQueryParser.p_PathExpr_return p_PathExpr669 = null;


        XQDTCommonTree DOLLAR667_tree=null;
        XQDTCommonTree k_tree=null;

        try {
            // XQueryParser.g:1564:9: (k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr )
            // XQueryParser.g:1564:11: k+= COLLECTION p_QName k+= NODE DOLLAR p_QName k+= KEY p_PathExpr
            {
            root_0 = (XQDTCommonTree)adaptor.nil();

            k=(CommonToken)match(input,COLLECTION,FOLLOW_COLLECTION_in_p_ICForeignKeyValues13965); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues13967);
            p_QName666=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName666.getTree());
            k=(CommonToken)match(input,NODE,FOLLOW_NODE_in_p_ICForeignKeyValues13971); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            DOLLAR667=(CommonToken)match(input,DOLLAR,FOLLOW_DOLLAR_in_p_ICForeignKeyValues13973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOLLAR667_tree = (XQDTCommonTree)adaptor.create(DOLLAR667);
            adaptor.addChild(root_0, DOLLAR667_tree);
            }
            pushFollow(FOLLOW_p_QName_in_p_ICForeignKeyValues13975);
            p_QName668=p_QName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_QName668.getTree());
            k=(CommonToken)match(input,KEY,FOLLOW_KEY_in_p_ICForeignKeyValues13979); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            k_tree = (XQDTCommonTree)adaptor.create(k);
            adaptor.addChild(root_0, k_tree);
            }
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k);

            pushFollow(FOLLOW_p_PathExpr_in_p_ICForeignKeyValues13981);
            p_PathExpr669=p_PathExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, p_PathExpr669.getTree());
            if ( state.backtracking==0 ) {
              ak(list_k);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (XQDTCommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (XQDTCommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "p_ICForeignKeyValues"

    // $ANTLR start synpred1_XQueryParser
    public final void synpred1_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:683:11: ( SLASH p_RelativePathExpr )
        // XQueryParser.g:683:12: SLASH p_RelativePathExpr
        {
        match(input,SLASH,FOLLOW_SLASH_in_synpred1_XQueryParser6084); if (state.failed) return ;
        pushFollow(FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser6086);
        p_RelativePathExpr();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_XQueryParser

    // $ANTLR start synpred2_XQueryParser
    public final void synpred2_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1037:26: ( p_OccurrenceIndicator )
        // XQueryParser.g:1037:27: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8753);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_XQueryParser

    // $ANTLR start synpred3_XQueryParser
    public final void synpred3_XQueryParser_fragment() throws RecognitionException {   
        // XQueryParser.g:1498:41: ( p_OccurrenceIndicator )
        // XQueryParser.g:1498:42: p_OccurrenceIndicator
        {
        pushFollow(FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser13305);
        p_OccurrenceIndicator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_XQueryParser

    // Delegated rules

    public final boolean synpred2_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_XQueryParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_XQueryParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA6 dfa6 = new DFA6(this);
    protected DFA7 dfa7 = new DFA7(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA52 dfa52 = new DFA52(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA115 dfa115 = new DFA115(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA159 dfa159 = new DFA159(this);
    static final String DFA6_eotS =
        "\15\uffff";
    static final String DFA6_eofS =
        "\1\2\1\12\1\uffff\1\14\11\uffff";
    static final String DFA6_minS =
        "\1\20\1\22\1\uffff\1\22\11\uffff";
    static final String DFA6_maxS =
        "\1\u0139\1\u00e3\1\uffff\1\u00e3\11\uffff";
    static final String DFA6_acceptS =
        "\2\uffff\1\2\1\uffff\3\2\3\1\3\2";
    static final String DFA6_specialS =
        "\1\uffff\1\0\13\uffff}>";
    static final String[] DFA6_transitionS = {
            "\22\2\1\1\31\2\1\3\70\2\1\uffff\11\2\1\uffff\43\2\1\uffff\24"+
            "\2\1\uffff\14\2\1\uffff\1\2\12\uffff\4\2\5\uffff\4\2\14\uffff"+
            "\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff\6\2\73\uffff\1\2",
            "\1\12\4\uffff\2\7\2\uffff\2\12\3\uffff\1\7\1\11\1\uffff\1"+
            "\7\3\uffff\1\12\7\uffff\1\12\1\uffff\1\12\4\uffff\1\14\1\12"+
            "\1\uffff\2\12\4\uffff\3\12\2\uffff\1\12\2\uffff\2\12\1\uffff"+
            "\1\11\1\12\4\uffff\1\5\1\12\1\uffff\1\6\1\7\21\uffff\2\12\1"+
            "\uffff\1\12\1\6\1\uffff\1\14\4\uffff\1\2\3\uffff\1\14\11\uffff"+
            "\1\14\5\uffff\2\14\24\uffff\1\10\1\uffff\1\14\1\13\2\uffff\1"+
            "\14\2\uffff\1\4\1\uffff\1\14\3\uffff\1\6\1\13\1\uffff\1\6\1"+
            "\uffff\1\6\4\uffff\1\13\1\6\2\uffff\1\13\1\6\1\13\1\uffff\1"+
            "\6\2\uffff\1\13\4\uffff\1\12\4\uffff\1\12\1\uffff\1\12\1\uffff"+
            "\1\12\1\uffff\1\12\1\uffff\13\12\2\uffff\1\12\3\uffff\2\12",
            "",
            "\1\14\10\uffff\2\14\12\uffff\1\14\7\uffff\1\14\1\uffff\1\14"+
            "\5\uffff\1\14\1\uffff\2\14\4\uffff\3\14\2\uffff\1\14\2\uffff"+
            "\2\14\1\11\1\uffff\1\14\5\uffff\1\14\12\uffff\1\11\11\uffff"+
            "\2\14\1\uffff\1\14\132\uffff\1\14\4\uffff\1\14\1\uffff\1\14"+
            "\1\uffff\1\14\1\uffff\1\14\1\uffff\13\14\2\uffff\1\12\3\uffff"+
            "\2\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA6_eot = DFA.unpackEncodedString(DFA6_eotS);
    static final short[] DFA6_eof = DFA.unpackEncodedString(DFA6_eofS);
    static final char[] DFA6_min = DFA.unpackEncodedStringToUnsignedChars(DFA6_minS);
    static final char[] DFA6_max = DFA.unpackEncodedStringToUnsignedChars(DFA6_maxS);
    static final short[] DFA6_accept = DFA.unpackEncodedString(DFA6_acceptS);
    static final short[] DFA6_special = DFA.unpackEncodedString(DFA6_specialS);
    static final short[][] DFA6_transition;

    static {
        int numStates = DFA6_transitionS.length;
        DFA6_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA6_transition[i] = DFA.unpackEncodedString(DFA6_transitionS[i]);
        }
    }

    class DFA6 extends DFA {

        public DFA6(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 6;
            this.eot = DFA6_eot;
            this.eof = DFA6_eof;
            this.min = DFA6_min;
            this.max = DFA6_max;
            this.accept = DFA6_accept;
            this.special = DFA6_special;
            this.transition = DFA6_transition;
        }
        public String getDescription() {
            return "()* loopback of 165:11: ( (dnd+= pm_DefaultNamespaceDecl | s+= p_Setter | nd+= pm_NamespaceDecl | i+= p_Import ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA6_1 = input.LA(1);

                         
                        int index6_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA6_1==CONTEXT) ) {s = 2;}

                        else if ( (LA6_1==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA6_1==OPTION) ) {s = 5;}

                        else if ( (LA6_1==ORDERED||LA6_1==UNORDERED||LA6_1==APPEND_ONLY||LA6_1==COLLECTION||LA6_1==CONST||LA6_1==INTEGRITY||LA6_1==MUTABLE||LA6_1==QUEUE) && ((lc(ZORBA)))) {s = 6;}

                        else if ( ((LA6_1>=BASE_URI && LA6_1<=BOUNDARY_SPACE)||LA6_1==CONSTRUCTION||LA6_1==DEFAULT||LA6_1==ORDERING) ) {s = 7;}

                        else if ( (LA6_1==REVALIDATION) && ((lc(XQU)))) {s = 8;}

                        else if ( (LA6_1==COPY_NAMESPACES||LA6_1==NAMESPACE) ) {s = 9;}

                        else if ( (LA6_1==EOF||LA6_1==AND||(LA6_1>=CAST && LA6_1<=CASTABLE)||LA6_1==DIV||LA6_1==EQ||LA6_1==EXCEPT||LA6_1==GE||(LA6_1>=GT && LA6_1<=IDIV)||(LA6_1>=INSTANCE && LA6_1<=IS)||LA6_1==LE||(LA6_1>=LT && LA6_1<=MOD)||LA6_1==NE||LA6_1==OR||(LA6_1>=TO && LA6_1<=TREAT)||LA6_1==UNION||LA6_1==LPAREN||LA6_1==LSQUARE||LA6_1==EQUAL||LA6_1==NOTEQUAL||LA6_1==COMMA||(LA6_1>=STAR && LA6_1<=SLASH_SLASH)||LA6_1==COLON||(LA6_1>=SEMICOLON && LA6_1<=VBAR)) ) {s = 10;}

                        else if ( (LA6_1==VALUE||LA6_1==AUTOMATICALLY||LA6_1==INDEX||LA6_1==MANUALLY||LA6_1==NON||LA6_1==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                        else if ( (LA6_1==FUNCTION||LA6_1==VARIABLE||LA6_1==DETERMINISTIC||LA6_1==NONDETERMINISTIC||(LA6_1>=PRIVATE && LA6_1<=PUBLIC)||LA6_1==UPDATING||LA6_1==CONSTANT||LA6_1==SIMPLE) ) {s = 12;}

                         
                        input.seek(index6_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 6, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA7_eotS =
        "\14\uffff";
    static final String DFA7_eofS =
        "\1\1\1\uffff\1\1\11\uffff";
    static final String DFA7_minS =
        "\1\20\1\uffff\1\22\5\uffff\1\66\3\uffff";
    static final String DFA7_maxS =
        "\1\u0139\1\uffff\1\u00e3\5\uffff\1\u00a6\3\uffff";
    static final String DFA7_acceptS =
        "\1\uffff\1\10\1\uffff\1\2\1\3\1\4\1\7\1\5\1\uffff\1\3\1\1\1\6";
    static final String DFA7_specialS =
        "\2\uffff\1\0\11\uffff}>";
    static final String[] DFA7_transitionS = {
            "\22\1\1\2\122\1\1\uffff\11\1\1\uffff\43\1\1\uffff\24\1\1\uffff"+
            "\14\1\1\uffff\1\1\12\uffff\4\1\5\uffff\4\1\14\uffff\1\1\2\uffff"+
            "\2\1\2\uffff\1\1\6\uffff\6\1\73\uffff\1\1",
            "",
            "\1\1\10\uffff\2\1\12\uffff\1\1\7\uffff\1\1\1\uffff\1\1\4\uffff"+
            "\1\11\1\1\1\uffff\2\1\4\uffff\3\1\2\uffff\1\1\2\uffff\2\1\2"+
            "\uffff\1\1\4\uffff\1\5\1\1\1\uffff\1\7\22\uffff\2\1\1\uffff"+
            "\1\1\1\7\1\uffff\1\12\4\uffff\1\3\3\uffff\1\11\11\uffff\1\11"+
            "\5\uffff\1\10\1\11\26\uffff\1\11\1\13\2\uffff\1\12\2\uffff\1"+
            "\4\1\uffff\1\11\3\uffff\1\7\1\13\1\uffff\1\7\1\uffff\1\7\4\uffff"+
            "\1\13\1\6\2\uffff\1\13\1\7\1\13\1\uffff\1\7\2\uffff\1\13\4\uffff"+
            "\1\1\4\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
            "\13\1\2\uffff\1\1\3\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "\1\11\65\uffff\1\12\10\uffff\1\11\11\uffff\1\11\5\uffff\2"+
            "\11\26\uffff\1\11\3\uffff\1\12\4\uffff\1\11",
            "",
            "",
            ""
    };

    static final short[] DFA7_eot = DFA.unpackEncodedString(DFA7_eotS);
    static final short[] DFA7_eof = DFA.unpackEncodedString(DFA7_eofS);
    static final char[] DFA7_min = DFA.unpackEncodedStringToUnsignedChars(DFA7_minS);
    static final char[] DFA7_max = DFA.unpackEncodedStringToUnsignedChars(DFA7_maxS);
    static final short[] DFA7_accept = DFA.unpackEncodedString(DFA7_acceptS);
    static final short[] DFA7_special = DFA.unpackEncodedString(DFA7_specialS);
    static final short[][] DFA7_transition;

    static {
        int numStates = DFA7_transitionS.length;
        DFA7_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA7_transition[i] = DFA.unpackEncodedString(DFA7_transitionS[i]);
        }
    }

    class DFA7 extends DFA {

        public DFA7(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 7;
            this.eot = DFA7_eot;
            this.eof = DFA7_eof;
            this.min = DFA7_min;
            this.max = DFA7_max;
            this.accept = DFA7_accept;
            this.special = DFA7_special;
            this.transition = DFA7_transition;
        }
        public String getDescription() {
            return "()* loopback of 180:11: ( pm_VarDecl | pm_ContextItemDecl | pm_FunctionDecl | pm_OptionDecl | {...}? => p_CollectionDecl | {...}? => p_IndexDecl | {...}? => p_ICDecl )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA7_2 = input.LA(1);

                         
                        int index7_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA7_2==CONTEXT) ) {s = 3;}

                        else if ( (LA7_2==SEQUENTIAL) && ((lc(XQS)))) {s = 4;}

                        else if ( (LA7_2==OPTION) ) {s = 5;}

                        else if ( (LA7_2==INTEGRITY) && ((lc(ZORBA)))) {s = 6;}

                        else if ( (LA7_2==ORDERED||LA7_2==UNORDERED||LA7_2==APPEND_ONLY||LA7_2==COLLECTION||LA7_2==CONST||LA7_2==MUTABLE||LA7_2==QUEUE) && ((lc(ZORBA)))) {s = 7;}

                        else if ( (LA7_2==EOF||LA7_2==AND||(LA7_2>=CAST && LA7_2<=CASTABLE)||LA7_2==DIV||LA7_2==EQ||LA7_2==EXCEPT||LA7_2==GE||(LA7_2>=GT && LA7_2<=IDIV)||(LA7_2>=INSTANCE && LA7_2<=IS)||LA7_2==LE||(LA7_2>=LT && LA7_2<=MOD)||LA7_2==NE||LA7_2==OR||(LA7_2>=TO && LA7_2<=TREAT)||LA7_2==UNION||LA7_2==LPAREN||LA7_2==LSQUARE||LA7_2==EQUAL||LA7_2==NOTEQUAL||LA7_2==COMMA||(LA7_2>=STAR && LA7_2<=SLASH_SLASH)||LA7_2==COLON||(LA7_2>=SEMICOLON && LA7_2<=VBAR)) ) {s = 1;}

                        else if ( (LA7_2==PRIVATE) ) {s = 8;}

                        else if ( (LA7_2==FUNCTION||LA7_2==DETERMINISTIC||LA7_2==NONDETERMINISTIC||LA7_2==PUBLIC||LA7_2==UPDATING||LA7_2==SIMPLE) ) {s = 9;}

                        else if ( (LA7_2==VARIABLE||LA7_2==CONSTANT) ) {s = 10;}

                        else if ( (LA7_2==VALUE||LA7_2==AUTOMATICALLY||LA7_2==INDEX||LA7_2==MANUALLY||LA7_2==NON||LA7_2==UNIQUE) && ((lc(ZORBA)))) {s = 11;}

                         
                        input.seek(index7_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 7, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA8_eotS =
        "\13\uffff";
    static final String DFA8_eofS =
        "\13\uffff";
    static final String DFA8_minS =
        "\1\42\1\27\1\uffff\1\36\7\uffff";
    static final String DFA8_maxS =
        "\1\42\1\u009b\1\uffff\1\122\7\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\1\1\uffff\1\3\1\4\1\5\1\7\1\10\1\2\1\6";
    static final String DFA8_specialS =
        "\1\uffff\1\0\11\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1",
            "\1\4\1\2\7\uffff\1\5\1\10\1\uffff\1\3\60\uffff\1\6\106\uffff"+
            "\1\7",
            "",
            "\1\11\63\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "188:1: p_Setter : ( pm_BoundarySpaceDecl | pm_DefaultCollationDecl | pm_BaseURIDecl | pm_ConstructionDecl | pm_OrderingModeDecl | pm_EmptyOrderDecl | {...}? => pm_RevalidationDecl | pm_CopyNamespacesDecl );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA8_1==BOUNDARY_SPACE) ) {s = 2;}

                        else if ( (LA8_1==DEFAULT) ) {s = 3;}

                        else if ( (LA8_1==BASE_URI) ) {s = 4;}

                        else if ( (LA8_1==CONSTRUCTION) ) {s = 5;}

                        else if ( (LA8_1==ORDERING) ) {s = 6;}

                        else if ( (LA8_1==REVALIDATION) && ((lc(XQU)))) {s = 7;}

                        else if ( (LA8_1==COPY_NAMESPACES) ) {s = 8;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA52_eotS =
        "\43\uffff";
    static final String DFA52_eofS =
        "\1\uffff\22\23\20\uffff";
    static final String DFA52_minS =
        "\1\20\22\22\20\uffff";
    static final String DFA52_maxS =
        "\1\u0139\22\u00e3\20\uffff";
    static final String DFA52_acceptS =
        "\23\uffff\1\20\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17";
    static final String DFA52_specialS =
        "\10\uffff\1\5\1\6\1\11\1\0\1\4\1\1\1\12\1\2\1\7\1\10\1\3\20\uffff}>";
    static final String[] DFA52_transitionS = {
            "\40\23\1\4\4\23\1\1\5\23\1\6\12\23\1\2\31\23\1\3\7\23\1\5\14"+
            "\23\1\uffff\11\23\1\uffff\12\23\1\7\6\23\1\16\1\13\1\23\1\12"+
            "\4\23\1\14\1\15\5\23\1\17\1\23\1\21\1\uffff\1\23\1\20\1\23\1"+
            "\22\1\11\1\10\16\23\1\uffff\14\23\1\uffff\1\23\12\uffff\4\23"+
            "\5\uffff\4\23\14\uffff\1\23\2\uffff\2\23\2\uffff\1\23\6\uffff"+
            "\6\23\73\uffff\1\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\7\uffff\1\24\1\23\1\uffff\1\24\3\uffff\2\23\4\uffff\1"+
            "\23\1\uffff\1\23\7\uffff\1\23\44\uffff\2\23\1\24\1\uffff\4\23"+
            "\1\uffff\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff"+
            "\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\24\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\25\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\1\26\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\1\27\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\uffff\1\30\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\31\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\uffff\1\31\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\32\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff"+
            "\2\23\7\uffff\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\32\6\uffff\1\23\44\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\33\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff"+
            "\2\23\7\uffff\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\1\33\6\uffff\1\23\44\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\34\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff"+
            "\2\23\7\uffff\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\7\uffff\1\23\44\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\2\uffff\1\35\2\uffff\2\23\7\uffff\2\23\5\uffff\1"+
            "\23\4\uffff\2\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff"+
            "\2\23\7\uffff\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1"+
            "\uffff\1\23\6\uffff\1\35\1\23\44\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\36\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\uffff\1\37\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\2\23\1\40\1\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\3\uffff\1\41\40\uffff\2\23\2\uffff\4\23\1\uffff"+
            "\1\23\1\uffff\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "\3\23\5\uffff\3\23\1\uffff\1\23\4\uffff\1\23\2\uffff\2\23"+
            "\3\uffff\2\23\2\uffff\1\23\1\uffff\1\23\3\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\2\23\4\uffff\3\23\2\uffff\1\23\1\uffff\3\23\2"+
            "\uffff\1\23\5\uffff\2\23\7\uffff\2\23\5\uffff\1\23\4\uffff\2"+
            "\23\1\uffff\1\23\4\uffff\1\23\3\uffff\1\23\4\uffff\2\23\7\uffff"+
            "\1\23\10\uffff\1\23\5\uffff\2\23\4\uffff\1\23\1\uffff\1\23\7"+
            "\uffff\1\23\44\uffff\1\42\1\23\2\uffff\4\23\1\uffff\1\23\1\uffff"+
            "\1\23\1\uffff\13\23\2\uffff\1\23\3\uffff\2\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA52_eot = DFA.unpackEncodedString(DFA52_eotS);
    static final short[] DFA52_eof = DFA.unpackEncodedString(DFA52_eofS);
    static final char[] DFA52_min = DFA.unpackEncodedStringToUnsignedChars(DFA52_minS);
    static final char[] DFA52_max = DFA.unpackEncodedStringToUnsignedChars(DFA52_maxS);
    static final short[] DFA52_accept = DFA.unpackEncodedString(DFA52_acceptS);
    static final short[] DFA52_special = DFA.unpackEncodedString(DFA52_specialS);
    static final short[][] DFA52_transition;

    static {
        int numStates = DFA52_transitionS.length;
        DFA52_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA52_transition[i] = DFA.unpackEncodedString(DFA52_transitionS[i]);
        }
    }

    class DFA52 extends DFA {

        public DFA52(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 52;
            this.eot = DFA52_eot;
            this.eof = DFA52_eof;
            this.min = DFA52_min;
            this.max = DFA52_max;
            this.accept = DFA52_accept;
            this.special = DFA52_special;
            this.transition = DFA52_transition;
        }
        public String getDescription() {
            return "410:1: p_ExprSingle : ( p_FLWORExpr | p_QuantifiedExpr | p_TypeswitchExpr | p_IfExpr | p_TryCatchExpr | {...}? => p_EvalExpr | {...}? => p_InsertExpr | {...}? => p_DeleteExpr | {...}? => p_RenameExpr | {...}? => p_ReplaceExpr | {...}? => p_TransformExpr | {...}? => p_BlockExpr | {...}? => p_AssignmentExpr | {...}? => p_ExitExpr | {...}? => p_WhileExpr | p_OrExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA52_11 = input.LA(1);

                         
                        int index52_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_11==EOF||(LA52_11>=AND && LA52_11<=ASCENDING)||(LA52_11>=CASE && LA52_11<=CASTABLE)||LA52_11==COLLATION||LA52_11==DEFAULT||(LA52_11>=DESCENDING && LA52_11<=DIV)||(LA52_11>=ELSE && LA52_11<=EMPTY)||LA52_11==EQ||LA52_11==EXCEPT||LA52_11==FOR||LA52_11==GE||(LA52_11>=GT && LA52_11<=IDIV)||(LA52_11>=INSTANCE && LA52_11<=IS)||LA52_11==LE||(LA52_11>=LET && LA52_11<=MOD)||LA52_11==NE||(LA52_11>=OR && LA52_11<=ORDER)||(LA52_11>=RETURN && LA52_11<=SATISFIES)||LA52_11==STABLE||(LA52_11>=TO && LA52_11<=TREAT)||LA52_11==UNION||LA52_11==WHERE||LA52_11==COUNT||(LA52_11>=END && LA52_11<=GROUP)||LA52_11==ONLY||LA52_11==START||(LA52_11>=AFTER && LA52_11<=BEFORE)||LA52_11==INTO||LA52_11==MODIFY||LA52_11==WITH||(LA52_11>=LPAREN && LA52_11<=RPAREN)||(LA52_11>=RBRACKET && LA52_11<=EQUAL)||LA52_11==NOTEQUAL||LA52_11==COMMA||(LA52_11>=STAR && LA52_11<=SLASH_SLASH)||LA52_11==COLON||(LA52_11>=SEMICOLON && LA52_11<=VBAR)) ) {s = 19;}

                        else if ( (LA52_11==NODE||LA52_11==NODES) && ((lc(XQU)))) {s = 27;}

                         
                        input.seek(index52_11);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA52_13 = input.LA(1);

                         
                        int index52_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_13==EOF||(LA52_13>=AND && LA52_13<=ASCENDING)||(LA52_13>=CASE && LA52_13<=CASTABLE)||LA52_13==COLLATION||LA52_13==DEFAULT||(LA52_13>=DESCENDING && LA52_13<=DIV)||(LA52_13>=ELSE && LA52_13<=EMPTY)||LA52_13==EQ||LA52_13==EXCEPT||LA52_13==FOR||LA52_13==GE||(LA52_13>=GT && LA52_13<=IDIV)||(LA52_13>=INSTANCE && LA52_13<=IS)||LA52_13==LE||(LA52_13>=LET && LA52_13<=MOD)||LA52_13==NE||(LA52_13>=OR && LA52_13<=ORDER)||(LA52_13>=RETURN && LA52_13<=SATISFIES)||LA52_13==STABLE||(LA52_13>=TO && LA52_13<=TREAT)||LA52_13==UNION||LA52_13==WHERE||LA52_13==COUNT||(LA52_13>=END && LA52_13<=GROUP)||LA52_13==ONLY||LA52_13==START||(LA52_13>=AFTER && LA52_13<=BEFORE)||LA52_13==INTO||LA52_13==MODIFY||LA52_13==WITH||(LA52_13>=LPAREN && LA52_13<=RPAREN)||(LA52_13>=RBRACKET && LA52_13<=EQUAL)||LA52_13==NOTEQUAL||LA52_13==COMMA||(LA52_13>=STAR && LA52_13<=SLASH_SLASH)||LA52_13==COLON||(LA52_13>=SEMICOLON && LA52_13<=VBAR)) ) {s = 19;}

                        else if ( (LA52_13==NODE||LA52_13==VALUE) && ((lc(XQU)))) {s = 29;}

                         
                        input.seek(index52_13);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA52_15 = input.LA(1);

                         
                        int index52_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_15==EOF||(LA52_15>=AND && LA52_15<=ASCENDING)||(LA52_15>=CASE && LA52_15<=CASTABLE)||LA52_15==COLLATION||LA52_15==DEFAULT||(LA52_15>=DESCENDING && LA52_15<=DIV)||(LA52_15>=ELSE && LA52_15<=EMPTY)||LA52_15==EQ||LA52_15==EXCEPT||LA52_15==FOR||LA52_15==GE||(LA52_15>=GT && LA52_15<=IDIV)||(LA52_15>=INSTANCE && LA52_15<=IS)||LA52_15==LE||(LA52_15>=LET && LA52_15<=MOD)||LA52_15==NE||(LA52_15>=OR && LA52_15<=ORDER)||(LA52_15>=RETURN && LA52_15<=SATISFIES)||LA52_15==STABLE||(LA52_15>=TO && LA52_15<=TREAT)||LA52_15==UNION||LA52_15==WHERE||LA52_15==COUNT||(LA52_15>=END && LA52_15<=GROUP)||LA52_15==ONLY||LA52_15==START||(LA52_15>=AFTER && LA52_15<=BEFORE)||LA52_15==INTO||LA52_15==MODIFY||LA52_15==WITH||(LA52_15>=LPAREN && LA52_15<=RPAREN)||(LA52_15>=RBRACKET && LA52_15<=EQUAL)||LA52_15==NOTEQUAL||LA52_15==COMMA||(LA52_15>=STAR && LA52_15<=SLASH_SLASH)||LA52_15==COLON||(LA52_15>=SEMICOLON && LA52_15<=VBAR)) ) {s = 19;}

                        else if ( (LA52_15==LBRACKET) && ((lc(XQS)))) {s = 31;}

                         
                        input.seek(index52_15);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA52_18 = input.LA(1);

                         
                        int index52_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_18==EOF||(LA52_18>=AND && LA52_18<=ASCENDING)||(LA52_18>=CASE && LA52_18<=CASTABLE)||LA52_18==COLLATION||LA52_18==DEFAULT||(LA52_18>=DESCENDING && LA52_18<=DIV)||(LA52_18>=ELSE && LA52_18<=EMPTY)||LA52_18==EQ||LA52_18==EXCEPT||LA52_18==FOR||LA52_18==GE||(LA52_18>=GT && LA52_18<=IDIV)||(LA52_18>=INSTANCE && LA52_18<=IS)||LA52_18==LE||(LA52_18>=LET && LA52_18<=MOD)||LA52_18==NE||(LA52_18>=OR && LA52_18<=ORDER)||(LA52_18>=RETURN && LA52_18<=SATISFIES)||LA52_18==STABLE||(LA52_18>=TO && LA52_18<=TREAT)||LA52_18==UNION||LA52_18==WHERE||LA52_18==COUNT||(LA52_18>=END && LA52_18<=GROUP)||LA52_18==ONLY||LA52_18==START||(LA52_18>=AFTER && LA52_18<=BEFORE)||LA52_18==INTO||LA52_18==MODIFY||LA52_18==WITH||LA52_18==RPAREN||(LA52_18>=RBRACKET && LA52_18<=EQUAL)||LA52_18==NOTEQUAL||LA52_18==COMMA||(LA52_18>=STAR && LA52_18<=SLASH_SLASH)||LA52_18==COLON||(LA52_18>=SEMICOLON && LA52_18<=VBAR)) ) {s = 19;}

                        else if ( (LA52_18==LPAREN) && ((lc(XQS)))) {s = 34;}

                         
                        input.seek(index52_18);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA52_12 = input.LA(1);

                         
                        int index52_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_12==NODE) && ((lc(XQU)))) {s = 28;}

                        else if ( (LA52_12==EOF||(LA52_12>=AND && LA52_12<=ASCENDING)||(LA52_12>=CASE && LA52_12<=CASTABLE)||LA52_12==COLLATION||LA52_12==DEFAULT||(LA52_12>=DESCENDING && LA52_12<=DIV)||(LA52_12>=ELSE && LA52_12<=EMPTY)||LA52_12==EQ||LA52_12==EXCEPT||LA52_12==FOR||LA52_12==GE||(LA52_12>=GT && LA52_12<=IDIV)||(LA52_12>=INSTANCE && LA52_12<=IS)||LA52_12==LE||(LA52_12>=LET && LA52_12<=MOD)||LA52_12==NE||(LA52_12>=OR && LA52_12<=ORDER)||(LA52_12>=RETURN && LA52_12<=SATISFIES)||LA52_12==STABLE||(LA52_12>=TO && LA52_12<=TREAT)||LA52_12==UNION||LA52_12==WHERE||LA52_12==COUNT||(LA52_12>=END && LA52_12<=GROUP)||LA52_12==ONLY||LA52_12==START||(LA52_12>=AFTER && LA52_12<=BEFORE)||LA52_12==INTO||LA52_12==MODIFY||LA52_12==WITH||(LA52_12>=LPAREN && LA52_12<=RPAREN)||(LA52_12>=RBRACKET && LA52_12<=EQUAL)||LA52_12==NOTEQUAL||LA52_12==COMMA||(LA52_12>=STAR && LA52_12<=SLASH_SLASH)||LA52_12==COLON||(LA52_12>=SEMICOLON && LA52_12<=VBAR)) ) {s = 19;}

                         
                        input.seek(index52_12);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA52_8 = input.LA(1);

                         
                        int index52_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_8==EOF||(LA52_8>=AND && LA52_8<=ASCENDING)||(LA52_8>=CASE && LA52_8<=CASTABLE)||LA52_8==COLLATION||LA52_8==DEFAULT||(LA52_8>=DESCENDING && LA52_8<=DIV)||(LA52_8>=ELSE && LA52_8<=EMPTY)||LA52_8==EQ||LA52_8==EXCEPT||LA52_8==FOR||LA52_8==GE||(LA52_8>=GT && LA52_8<=IDIV)||(LA52_8>=INSTANCE && LA52_8<=IS)||LA52_8==LE||(LA52_8>=LET && LA52_8<=MOD)||LA52_8==NE||(LA52_8>=OR && LA52_8<=ORDER)||(LA52_8>=RETURN && LA52_8<=SATISFIES)||LA52_8==STABLE||(LA52_8>=TO && LA52_8<=TREAT)||LA52_8==UNION||LA52_8==WHERE||LA52_8==COUNT||(LA52_8>=END && LA52_8<=GROUP)||LA52_8==ONLY||LA52_8==START||(LA52_8>=AFTER && LA52_8<=BEFORE)||LA52_8==INTO||LA52_8==MODIFY||LA52_8==WITH||(LA52_8>=LPAREN && LA52_8<=RPAREN)||(LA52_8>=RBRACKET && LA52_8<=EQUAL)||LA52_8==NOTEQUAL||LA52_8==COMMA||(LA52_8>=STAR && LA52_8<=SLASH_SLASH)||LA52_8==COLON||(LA52_8>=SEMICOLON && LA52_8<=VBAR)) ) {s = 19;}

                        else if ( (LA52_8==DOLLAR) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index52_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA52_9 = input.LA(1);

                         
                        int index52_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_9==EOF||(LA52_9>=AND && LA52_9<=ASCENDING)||(LA52_9>=CASE && LA52_9<=CASTABLE)||LA52_9==COLLATION||LA52_9==DEFAULT||(LA52_9>=DESCENDING && LA52_9<=DIV)||(LA52_9>=ELSE && LA52_9<=EMPTY)||LA52_9==EQ||LA52_9==EXCEPT||LA52_9==FOR||LA52_9==GE||(LA52_9>=GT && LA52_9<=IDIV)||(LA52_9>=INSTANCE && LA52_9<=IS)||LA52_9==LE||(LA52_9>=LET && LA52_9<=MOD)||LA52_9==NE||(LA52_9>=OR && LA52_9<=ORDER)||(LA52_9>=RETURN && LA52_9<=SATISFIES)||LA52_9==STABLE||(LA52_9>=TO && LA52_9<=TREAT)||LA52_9==UNION||LA52_9==WHERE||LA52_9==COUNT||(LA52_9>=END && LA52_9<=GROUP)||LA52_9==ONLY||LA52_9==START||(LA52_9>=AFTER && LA52_9<=BEFORE)||LA52_9==INTO||LA52_9==MODIFY||LA52_9==WITH||(LA52_9>=LPAREN && LA52_9<=RPAREN)||(LA52_9>=RBRACKET && LA52_9<=EQUAL)||LA52_9==NOTEQUAL||LA52_9==COMMA||(LA52_9>=STAR && LA52_9<=SLASH_SLASH)||LA52_9==COLON||(LA52_9>=SEMICOLON && LA52_9<=VBAR)) ) {s = 19;}

                        else if ( (LA52_9==LBRACKET) && ((lc(ZORBA)))) {s = 25;}

                         
                        input.seek(index52_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA52_16 = input.LA(1);

                         
                        int index52_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_16==EOF||(LA52_16>=AND && LA52_16<=ASCENDING)||(LA52_16>=CASE && LA52_16<=CASTABLE)||LA52_16==COLLATION||LA52_16==DEFAULT||(LA52_16>=DESCENDING && LA52_16<=DIV)||(LA52_16>=ELSE && LA52_16<=EMPTY)||LA52_16==EQ||LA52_16==EXCEPT||LA52_16==FOR||LA52_16==GE||(LA52_16>=GT && LA52_16<=IDIV)||(LA52_16>=INSTANCE && LA52_16<=IS)||LA52_16==LE||(LA52_16>=LET && LA52_16<=MOD)||LA52_16==NE||(LA52_16>=OR && LA52_16<=ORDER)||(LA52_16>=RETURN && LA52_16<=SATISFIES)||LA52_16==STABLE||(LA52_16>=TO && LA52_16<=TREAT)||LA52_16==UNION||LA52_16==WHERE||LA52_16==COUNT||(LA52_16>=END && LA52_16<=GROUP)||LA52_16==ONLY||LA52_16==START||(LA52_16>=AFTER && LA52_16<=BEFORE)||LA52_16==INTO||LA52_16==MODIFY||LA52_16==WITH||(LA52_16>=LPAREN && LA52_16<=RPAREN)||(LA52_16>=RBRACKET && LA52_16<=EQUAL)||LA52_16==NOTEQUAL||LA52_16==COMMA||(LA52_16>=STAR && LA52_16<=SLASH_SLASH)||LA52_16==COLON||(LA52_16>=SEMICOLON && LA52_16<=VBAR)) ) {s = 19;}

                        else if ( (LA52_16==DOLLAR) && ((lc(XQS)))) {s = 32;}

                         
                        input.seek(index52_16);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA52_17 = input.LA(1);

                         
                        int index52_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_17==EOF||(LA52_17>=AND && LA52_17<=ASCENDING)||(LA52_17>=CASE && LA52_17<=CASTABLE)||LA52_17==COLLATION||LA52_17==DEFAULT||(LA52_17>=DESCENDING && LA52_17<=DIV)||(LA52_17>=ELSE && LA52_17<=EMPTY)||LA52_17==EQ||LA52_17==EXCEPT||LA52_17==FOR||LA52_17==GE||(LA52_17>=GT && LA52_17<=IDIV)||(LA52_17>=INSTANCE && LA52_17<=IS)||LA52_17==LE||(LA52_17>=LET && LA52_17<=MOD)||LA52_17==NE||(LA52_17>=OR && LA52_17<=ORDER)||(LA52_17>=RETURN && LA52_17<=SATISFIES)||LA52_17==STABLE||(LA52_17>=TO && LA52_17<=TREAT)||LA52_17==UNION||LA52_17==WHERE||LA52_17==COUNT||(LA52_17>=END && LA52_17<=GROUP)||LA52_17==ONLY||LA52_17==START||(LA52_17>=AFTER && LA52_17<=BEFORE)||LA52_17==INTO||LA52_17==MODIFY||LA52_17==WITH||(LA52_17>=LPAREN && LA52_17<=RPAREN)||(LA52_17>=RBRACKET && LA52_17<=EQUAL)||LA52_17==NOTEQUAL||LA52_17==COMMA||(LA52_17>=STAR && LA52_17<=SLASH_SLASH)||LA52_17==COLON||(LA52_17>=SEMICOLON && LA52_17<=VBAR)) ) {s = 19;}

                        else if ( (LA52_17==RETURNING) && ((lc(XQS)))) {s = 33;}

                         
                        input.seek(index52_17);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA52_10 = input.LA(1);

                         
                        int index52_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_10==EOF||(LA52_10>=AND && LA52_10<=ASCENDING)||(LA52_10>=CASE && LA52_10<=CASTABLE)||LA52_10==COLLATION||LA52_10==DEFAULT||(LA52_10>=DESCENDING && LA52_10<=DIV)||(LA52_10>=ELSE && LA52_10<=EMPTY)||LA52_10==EQ||LA52_10==EXCEPT||LA52_10==FOR||LA52_10==GE||(LA52_10>=GT && LA52_10<=IDIV)||(LA52_10>=INSTANCE && LA52_10<=IS)||LA52_10==LE||(LA52_10>=LET && LA52_10<=MOD)||LA52_10==NE||(LA52_10>=OR && LA52_10<=ORDER)||(LA52_10>=RETURN && LA52_10<=SATISFIES)||LA52_10==STABLE||(LA52_10>=TO && LA52_10<=TREAT)||LA52_10==UNION||LA52_10==WHERE||LA52_10==COUNT||(LA52_10>=END && LA52_10<=GROUP)||LA52_10==ONLY||LA52_10==START||(LA52_10>=AFTER && LA52_10<=BEFORE)||LA52_10==INTO||LA52_10==MODIFY||LA52_10==WITH||(LA52_10>=LPAREN && LA52_10<=RPAREN)||(LA52_10>=RBRACKET && LA52_10<=EQUAL)||LA52_10==NOTEQUAL||LA52_10==COMMA||(LA52_10>=STAR && LA52_10<=SLASH_SLASH)||LA52_10==COLON||(LA52_10>=SEMICOLON && LA52_10<=VBAR)) ) {s = 19;}

                        else if ( (LA52_10==NODE||LA52_10==NODES) && ((lc(XQU)))) {s = 26;}

                         
                        input.seek(index52_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA52_14 = input.LA(1);

                         
                        int index52_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA52_14==DOLLAR) && ((lc(XQU)))) {s = 30;}

                        else if ( (LA52_14==EOF||(LA52_14>=AND && LA52_14<=ASCENDING)||(LA52_14>=CASE && LA52_14<=CASTABLE)||LA52_14==COLLATION||LA52_14==DEFAULT||(LA52_14>=DESCENDING && LA52_14<=DIV)||(LA52_14>=ELSE && LA52_14<=EMPTY)||LA52_14==EQ||LA52_14==EXCEPT||LA52_14==FOR||LA52_14==GE||(LA52_14>=GT && LA52_14<=IDIV)||(LA52_14>=INSTANCE && LA52_14<=IS)||LA52_14==LE||(LA52_14>=LET && LA52_14<=MOD)||LA52_14==NE||(LA52_14>=OR && LA52_14<=ORDER)||(LA52_14>=RETURN && LA52_14<=SATISFIES)||LA52_14==STABLE||(LA52_14>=TO && LA52_14<=TREAT)||LA52_14==UNION||LA52_14==WHERE||LA52_14==COUNT||(LA52_14>=END && LA52_14<=GROUP)||LA52_14==ONLY||LA52_14==START||(LA52_14>=AFTER && LA52_14<=BEFORE)||LA52_14==INTO||LA52_14==MODIFY||LA52_14==WITH||(LA52_14>=LPAREN && LA52_14<=RPAREN)||(LA52_14>=RBRACKET && LA52_14<=EQUAL)||LA52_14==NOTEQUAL||LA52_14==COMMA||(LA52_14>=STAR && LA52_14<=SLASH_SLASH)||LA52_14==COLON||(LA52_14>=SEMICOLON && LA52_14<=VBAR)) ) {s = 19;}

                         
                        input.seek(index52_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 52, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA106_eotS =
        "\55\uffff";
    static final String DFA106_eofS =
        "\55\uffff";
    static final String DFA106_minS =
        "\1\20\54\uffff";
    static final String DFA106_maxS =
        "\1\u0139\54\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\1\2\51\uffff\1\3";
    static final String DFA106_specialS =
        "\55\uffff}>";
    static final String[] DFA106_transitionS = {
            "\133\2\1\1\11\2\1\uffff\11\2\1\uffff\43\2\1\uffff\24\2\1\uffff"+
            "\14\2\1\uffff\1\2\12\uffff\1\2\2\uffff\1\2\5\uffff\4\2\14\uffff"+
            "\1\2\2\uffff\2\2\2\uffff\1\2\6\uffff\1\54\5\2\73\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "638:1: p_ValueExpr : ( p_ValidateExpr | p_PathExpr | p_ExtensionExpr );";
        }
    }
    static final String DFA113_eotS =
        "\55\uffff";
    static final String DFA113_eofS =
        "\55\uffff";
    static final String DFA113_minS =
        "\1\20\1\0\53\uffff";
    static final String DFA113_maxS =
        "\1\u0139\1\0\53\uffff";
    static final String DFA113_acceptS =
        "\2\uffff\1\3\1\4\47\uffff\1\1\1\2";
    static final String DFA113_specialS =
        "\1\uffff\1\0\53\uffff}>";
    static final String[] DFA113_transitionS = {
            "\145\3\1\uffff\11\3\1\uffff\43\3\1\uffff\24\3\1\uffff\14\3"+
            "\1\uffff\1\3\12\uffff\1\3\2\uffff\1\3\5\uffff\1\1\1\2\2\3\14"+
            "\uffff\1\3\2\uffff\2\3\2\uffff\1\3\7\uffff\5\3\73\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "682:1: p_PathExpr : ( ( SLASH p_RelativePathExpr )=> ( SLASH p_RelativePathExpr ) | SLASH | SLASH_SLASH p_RelativePathExpr | p_RelativePathExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA113_1 = input.LA(1);

                         
                        int index113_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_XQueryParser()) ) {s = 43;}

                        else if ( (true) ) {s = 44;}

                         
                        input.seek(index113_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 113, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA115_eotS =
        "\u00d5\uffff";
    static final String DFA115_eofS =
        "\1\uffff\5\6\1\uffff\14\6\1\uffff\5\6\u00bb\uffff\1\6";
    static final String DFA115_minS =
        "\1\20\5\22\1\uffff\2\22\1\20\4\22\2\20\3\22\1\uffff\2\22\1\20\2"+
        "\22\1\20\3\23\1\117\20\20\1\u0088\1\u00c6\1\20\2\31\1\122\1\u00c6"+
        "\1\20\1\25\1\167\1\25\2\36\1\70\1\u00c7\1\20\1\132\11\20\3\23\1"+
        "\117\20\20\1\u0088\1\u00c6\1\20\2\31\1\122\1\u00c6\1\20\1\25\1\167"+
        "\1\25\2\36\1\70\1\u00c7\1\20\1\132\11\20\3\23\1\117\20\20\1\u0088"+
        "\1\u00c6\1\20\2\31\1\122\1\u00c6\1\20\1\25\1\167\1\25\2\36\1\70"+
        "\1\u00c7\1\20\1\132\11\20\3\23\1\117\20\20\1\u0088\1\u00c6\1\20"+
        "\2\31\1\122\1\u00c6\1\20\1\25\1\167\1\25\2\36\1\70\1\u00c7\1\20"+
        "\1\132\11\20\2\uffff\1\22";
    static final String DFA115_maxS =
        "\1\u0139\5\u00e3\1\uffff\2\u00e3\1\u0139\4\u00e3\2\u0139\3\u00e3"+
        "\1\uffff\2\u00e3\1\u0139\2\u00e3\1\u0139\4\u00de\20\u0139\2\u00de"+
        "\1\u0139\4\u00de\1\u0139\6\u00de\1\u00ee\1\u0139\1\u00de\11\u0139"+
        "\4\u00de\20\u0139\2\u00de\1\u0139\4\u00de\1\u0139\6\u00de\1\u00ee"+
        "\1\u0139\1\u00de\11\u0139\4\u00c7\20\u0139\2\u00c7\1\u0139\4\u00c7"+
        "\1\u0139\3\u00c7\2\u00cf\1\u00c7\1\u00ee\1\u0139\1\u00c7\11\u0139"+
        "\4\u00c7\20\u0139\2\u00c7\1\u0139\4\u00c7\1\u0139\3\u00c7\2\u00cf"+
        "\1\u00c7\1\u00ee\1\u0139\1\u00c7\11\u0139\2\uffff\1\u00e3";
    static final String DFA115_acceptS =
        "\6\uffff\1\1\14\uffff\1\2\u00be\uffff\2\2\1\uffff";
    static final String DFA115_specialS =
        "\27\uffff\1\0\u00bd\uffff}>";
    static final String[] DFA115_transitionS = {
            "\1\2\1\5\4\30\1\11\6\30\1\7\1\30\1\20\4\30\1\10\1\13\2\30\1"+
            "\25\1\6\1\16\2\30\1\6\5\30\1\15\1\14\6\30\1\6\6\30\1\6\7\30"+
            "\1\26\3\30\1\6\4\30\1\22\1\30\1\1\1\4\1\3\1\30\1\17\3\30\2\6"+
            "\1\12\4\30\1\21\3\30\1\6\1\30\1\24\12\30\1\uffff\6\30\1\6\2"+
            "\30\1\uffff\43\30\1\uffff\3\30\1\6\20\30\1\uffff\7\30\1\27\3"+
            "\30\1\23\1\uffff\1\23\12\uffff\1\6\2\uffff\1\23\7\uffff\1\23"+
            "\1\6\14\uffff\1\6\2\uffff\2\23\2\uffff\1\30\7\uffff\5\23\73"+
            "\uffff\1\30",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\54\1\102\1\71\4\23\1\107\1\77\1\32\1\33\1\23\1\74"+
            "\4\23\1\76\2\23\1\72\1\41\3\23\1\100\1\73\2\23\1\45\1\23\1\37"+
            "\3\23\1\56\1\23\1\52\1\23\1\51\1\42\4\23\1\35\1\36\1\53\2\23"+
            "\1\50\1\23\1\57\1\47\1\43\2\23\1\46\5\23\1\55\1\62\7\23\1\65"+
            "\1\75\5\23\1\63\4\23\1\44\1\34\1\23\1\40\4\23\1\60\3\23\1\64"+
            "\2\23\1\uffff\1\23\1\70\1\61\6\23\1\uffff\1\67\10\23\1\66\5"+
            "\23\1\104\1\105\4\23\1\103\1\23\1\106\7\23\1\101\3\23\1\uffff"+
            "\24\23\1\uffff\13\23\2\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff"+
            "\1\6\1\uffff\13\6\2\uffff\2\6\2\uffff\2\6\15\uffff\1\23\107"+
            "\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\2"+
            "\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31"+
            "\1\6\2\uffff\2\6",
            "\2\23\1\132\1\160\1\147\4\23\1\165\1\155\1\110\1\111\1\23"+
            "\1\152\4\23\1\154\2\23\1\150\1\117\3\23\1\156\1\151\2\23\1\123"+
            "\1\23\1\115\3\23\1\134\1\23\1\130\1\23\1\127\1\120\4\23\1\113"+
            "\1\114\1\131\2\23\1\126\1\23\1\135\1\125\1\121\2\23\1\124\5"+
            "\23\1\133\1\140\7\23\1\143\1\153\5\23\1\141\4\23\1\122\1\112"+
            "\1\23\1\116\4\23\1\136\3\23\1\142\2\23\1\uffff\1\23\1\146\1"+
            "\137\6\23\1\uffff\1\145\10\23\1\144\5\23\1\162\1\163\4\23\1"+
            "\161\1\23\1\164\7\23\1\157\3\23\1\uffff\24\23\1\uffff\13\23"+
            "\2\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2"+
            "\uffff\1\6\3\uffff\2\6\15\uffff\1\23\107\uffff\1\23",
            "\2\23\1\u0088\1\u009e\1\u0095\4\23\1\u00a3\1\u009b\1\166\1"+
            "\167\1\23\1\u0098\4\23\1\u009a\2\23\1\u0096\1\175\3\23\1\u009c"+
            "\1\u0097\2\23\1\u0081\1\23\1\173\3\23\1\u008a\1\23\1\u0086\1"+
            "\23\1\u0085\1\176\4\23\1\171\1\172\1\u0087\2\23\1\u0084\1\23"+
            "\1\u008b\1\u0083\1\177\2\23\1\u0082\5\23\1\u0089\1\u008e\7\23"+
            "\1\u0091\1\u0099\5\23\1\u008f\4\23\1\u0080\1\170\1\23\1\174"+
            "\4\23\1\u008c\3\23\1\u0090\2\23\1\uffff\1\23\1\u0094\1\u008d"+
            "\6\23\1\uffff\1\u0093\10\23\1\u0092\5\23\1\u00a0\1\u00a1\4\23"+
            "\1\u009f\1\23\1\u00a2\7\23\1\u009d\3\23\1\uffff\24\23\1\uffff"+
            "\13\23\2\6\1\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\13\6\2\uffff\1\6\3\uffff\2\6\15\uffff\1\23\107\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\2\6\1\uffff"+
            "\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\6\3"+
            "\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\1"+
            "\uffff\1\23\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\2\23\1\u00b6\1\u00cc\1\u00c3\4\23\1\u00d1\1\u00c9\1\u00a4"+
            "\1\u00a5\1\23\1\u00c6\4\23\1\u00c8\2\23\1\u00c4\1\u00ab\3\23"+
            "\1\u00ca\1\u00c5\2\23\1\u00af\1\23\1\u00a9\3\23\1\u00b8\1\23"+
            "\1\u00b4\1\23\1\u00b3\1\u00ac\4\23\1\u00a7\1\u00a8\1\u00b5\2"+
            "\23\1\u00b2\1\23\1\u00b9\1\u00b1\1\u00ad\2\23\1\u00b0\5\23\1"+
            "\u00b7\1\u00bc\7\23\1\u00bf\1\u00c7\5\23\1\u00bd\4\23\1\u00ae"+
            "\1\u00a6\1\23\1\u00aa\4\23\1\u00ba\3\23\1\u00be\2\23\1\uffff"+
            "\1\23\1\u00c2\1\u00bb\6\23\1\uffff\1\u00c1\10\23\1\u00c0\5\23"+
            "\1\u00ce\1\u00cf\4\23\1\u00cd\1\23\1\u00d0\7\23\1\u00cb\3\23"+
            "\1\uffff\24\23\1\uffff\14\23\1\6\1\uffff\1\23\4\6\1\uffff\1"+
            "\6\1\uffff\1\6\1\uffff\13\6\2\uffff\1\31\3\uffff\2\6\15\uffff"+
            "\1\23\107\uffff\1\23",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\23\1\6\1"+
            "\uffff\1\u00d2\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\u00d3\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\2\uffff"+
            "\1\31\3\uffff\2\6",
            "\145\u00d4\1\uffff\11\u00d4\1\uffff\43\u00d4\1\uffff\24\u00d4"+
            "\1\uffff\13\u00d4\15\uffff\1\6\37\uffff\1\u00d4\107\uffff\1"+
            "\u00d4",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\167\uffff\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\72\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00ad\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00ad\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\117\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\14\uffff\1\6\u0081\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\u00d3\26\uffff\1\u00d3\16\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\153\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\13\6"+
            "\2\uffff\1\6\1\u00d3\26\uffff\1\u00d3\22\uffff\1\6\107\uffff"+
            "\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6\1"+
            "\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff"+
            "\1\6",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\167\uffff\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\72\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00ad\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\u00ad\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\117\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3\26\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6\16\uffff\1\u00d3",
            "\1\6\14\uffff\1\6\u0081\uffff\1\u00d3\26\uffff\1\u00d3",
            "\1\u00d3\26\uffff\1\u00d3\16\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\153\uffff\1\6\1\u00d3\26\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\13\6"+
            "\2\uffff\1\6\1\u00d3\26\uffff\1\u00d3\22\uffff\1\6\107\uffff"+
            "\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\1\u00d3\13\uffff"+
            "\1\6\2\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6\1"+
            "\u00d3\13\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff"+
            "\1\6",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\167\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\72\uffff\1\6\1\u00d3",
            "\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00ad\uffff\1\u00d3",
            "\1\6\u00ad\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3",
            "\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3",
            "\1\6\117\uffff\1\u00d3",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\14\uffff\1\6\u0081\uffff\1\u00d3",
            "\1\u00d3\45\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\153\uffff\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\13\6"+
            "\2\uffff\1\6\1\u00d3\51\uffff\1\6\107\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6\14"+
            "\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\u00b3\uffff\1\u00d3",
            "\1\6\167\uffff\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\2\uffff\1\6\72\uffff\1\6\1\u00d3",
            "\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\u00ad\uffff\1\u00d3",
            "\1\6\u00ad\uffff\1\u00d3",
            "\1\6\164\uffff\1\u00d3",
            "\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3",
            "\1\6\117\uffff\1\u00d3",
            "\1\6\150\uffff\1\6\10\uffff\1\6\4\uffff\1\6\71\uffff\1\6\1"+
            "\u00d3",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\15\uffff\1\6\10\uffff\1\6\20\uffff\1\6\13\uffff\1\6\7"+
            "\uffff\1\6\6\uffff\1\6\14\uffff\1\6\3\uffff\1\6\5\uffff\1\6"+
            "\116\uffff\1\u00d3\7\uffff\1\6",
            "\1\6\14\uffff\1\6\u0081\uffff\1\u00d3",
            "\1\u00d3\45\uffff\2\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\1\6\153\uffff\1\6\1\u00d3",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\13\6"+
            "\2\uffff\1\6\1\u00d3\51\uffff\1\6\107\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\4\6\5\uffff\4\6\14\uffff\1\6\2"+
            "\uffff\2\6\2\uffff\1\6\6\uffff\6\6\73\uffff\1\6",
            "\145\6\1\uffff\11\6\1\uffff\43\6\1\uffff\24\6\1\uffff\14\6"+
            "\1\uffff\1\6\1\u00d3\11\uffff\1\6\2\uffff\1\6\5\uffff\4\6\14"+
            "\uffff\1\6\2\uffff\2\6\2\uffff\1\6\7\uffff\5\6\73\uffff\1\6",
            "",
            "",
            "\3\6\4\uffff\4\6\1\uffff\1\6\4\uffff\1\6\2\uffff\2\6\3\uffff"+
            "\2\6\2\uffff\1\6\1\uffff\1\6\3\uffff\1\6\1\uffff\1\6\1\uffff"+
            "\2\6\4\uffff\3\6\2\uffff\1\6\1\uffff\3\6\2\uffff\1\6\5\uffff"+
            "\2\6\7\uffff\2\6\5\uffff\1\6\4\uffff\2\6\1\uffff\1\6\4\uffff"+
            "\1\6\3\uffff\1\6\4\uffff\2\6\7\uffff\1\6\10\uffff\1\6\5\uffff"+
            "\2\6\4\uffff\1\6\1\uffff\1\6\7\uffff\1\6\44\uffff\1\u00d3\1"+
            "\6\2\uffff\4\6\1\uffff\1\6\1\uffff\1\6\1\uffff\13\6\6\uffff"+
            "\2\6"
    };

    static final short[] DFA115_eot = DFA.unpackEncodedString(DFA115_eotS);
    static final short[] DFA115_eof = DFA.unpackEncodedString(DFA115_eofS);
    static final char[] DFA115_min = DFA.unpackEncodedStringToUnsignedChars(DFA115_minS);
    static final char[] DFA115_max = DFA.unpackEncodedStringToUnsignedChars(DFA115_maxS);
    static final short[] DFA115_accept = DFA.unpackEncodedString(DFA115_acceptS);
    static final short[] DFA115_special = DFA.unpackEncodedString(DFA115_specialS);
    static final short[][] DFA115_transition;

    static {
        int numStates = DFA115_transitionS.length;
        DFA115_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA115_transition[i] = DFA.unpackEncodedString(DFA115_transitionS[i]);
        }
    }

    class DFA115 extends DFA {

        public DFA115(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 115;
            this.eot = DFA115_eot;
            this.eof = DFA115_eof;
            this.min = DFA115_min;
            this.max = DFA115_max;
            this.accept = DFA115_accept;
            this.special = DFA115_special;
            this.transition = DFA115_transition;
        }
        public String getDescription() {
            return "695:1: p_StepExpr : ( p_AxisStep | p_FilterExpr );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA115_23 = input.LA(1);

                         
                        int index115_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA115_23==COLON) ) {s = 25;}

                        else if ( (LA115_23==LPAREN) ) {s = 19;}

                        else if ( (LA115_23==EOF||(LA115_23>=AND && LA115_23<=ASCENDING)||(LA115_23>=BY && LA115_23<=CASTABLE)||LA115_23==COLLATION||LA115_23==DEFAULT||(LA115_23>=DESCENDING && LA115_23<=DIV)||(LA115_23>=ELSE && LA115_23<=EMPTY)||LA115_23==EQ||LA115_23==EXCEPT||LA115_23==FOR||LA115_23==GE||(LA115_23>=GT && LA115_23<=IDIV)||(LA115_23>=INSTANCE && LA115_23<=IS)||LA115_23==LE||(LA115_23>=LET && LA115_23<=MOD)||LA115_23==NE||(LA115_23>=OR && LA115_23<=ORDER)||(LA115_23>=RETURN && LA115_23<=SATISFIES)||LA115_23==STABLE||(LA115_23>=TO && LA115_23<=TREAT)||LA115_23==UNION||LA115_23==WHERE||LA115_23==COUNT||(LA115_23>=END && LA115_23<=GROUP)||LA115_23==ONLY||LA115_23==START||(LA115_23>=AFTER && LA115_23<=BEFORE)||LA115_23==INTO||LA115_23==MODIFY||LA115_23==WITH||LA115_23==RPAREN||(LA115_23>=RBRACKET && LA115_23<=EQUAL)||LA115_23==NOTEQUAL||LA115_23==COMMA||(LA115_23>=STAR && LA115_23<=SLASH_SLASH)||(LA115_23>=SEMICOLON && LA115_23<=VBAR)) ) {s = 6;}

                        else if ( (LA115_23==LBRACKET) && ((lc(MLS)))) {s = 210;}

                         
                        input.seek(index115_23);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 115, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA117_eotS =
        "\12\uffff";
    static final String DFA117_eofS =
        "\1\uffff\7\10\2\uffff";
    static final String DFA117_minS =
        "\1\20\7\22\2\uffff";
    static final String DFA117_maxS =
        "\1\u0139\7\u00e3\2\uffff";
    static final String DFA117_acceptS =
        "\10\uffff\1\2\1\1";
    static final String DFA117_specialS =
        "\12\uffff}>";
    static final String[] DFA117_transitionS = {
            "\6\10\1\3\6\10\1\1\6\10\1\2\1\5\15\10\1\7\1\6\52\10\1\4\25"+
            "\10\1\uffff\11\10\1\uffff\43\10\1\uffff\24\10\1\uffff\13\10"+
            "\15\uffff\1\10\30\uffff\1\10\6\uffff\1\10\107\uffff\1\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\44\uffff\2\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "\3\10\4\uffff\4\10\1\uffff\1\10\4\uffff\1\10\2\uffff\2\10"+
            "\3\uffff\2\10\2\uffff\1\10\1\uffff\1\10\3\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\2\10\4\uffff\3\10\2\uffff\1\10\1\uffff\3\10\2"+
            "\uffff\1\10\5\uffff\2\10\7\uffff\2\10\5\uffff\1\10\4\uffff\2"+
            "\10\1\uffff\1\10\4\uffff\1\10\3\uffff\1\10\4\uffff\2\10\7\uffff"+
            "\1\10\10\uffff\1\10\5\uffff\2\10\4\uffff\1\10\1\uffff\1\10\7"+
            "\uffff\1\10\45\uffff\1\10\2\uffff\4\10\1\uffff\1\10\1\uffff"+
            "\1\10\1\uffff\13\10\2\uffff\1\10\1\11\2\uffff\2\10",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "706:1: p_ForwardStep : ( ( p_ForwardAxis p_NodeTest ) | p_AbbrevForwardStep );";
        }
    }
    static final String DFA122_eotS =
        "\15\uffff";
    static final String DFA122_eofS =
        "\1\uffff\12\13\2\uffff";
    static final String DFA122_minS =
        "\1\20\12\22\2\uffff";
    static final String DFA122_maxS =
        "\1\u0139\12\u00e3\2\uffff";
    static final String DFA122_acceptS =
        "\13\uffff\1\2\1\1";
    static final String DFA122_specialS =
        "\15\uffff}>";
    static final String[] DFA122_transitionS = {
            "\6\13\1\3\10\13\1\10\11\13\1\1\1\2\43\13\1\12\12\13\1\7\3\13"+
            "\1\5\1\4\5\13\1\11\20\13\1\uffff\6\13\1\6\2\13\1\uffff\43\13"+
            "\1\uffff\24\13\1\uffff\13\13\15\uffff\1\13\37\uffff\1\13\107"+
            "\uffff\1\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "\3\13\4\uffff\4\13\1\uffff\1\13\4\uffff\1\13\2\uffff\2\13"+
            "\3\uffff\2\13\2\uffff\1\13\1\uffff\1\13\3\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\2\13\4\uffff\3\13\2\uffff\1\13\1\uffff\3\13\2"+
            "\uffff\1\13\5\uffff\2\13\7\uffff\2\13\5\uffff\1\13\4\uffff\2"+
            "\13\1\uffff\1\13\4\uffff\1\13\3\uffff\1\13\4\uffff\2\13\7\uffff"+
            "\1\13\10\uffff\1\13\5\uffff\2\13\4\uffff\1\13\1\uffff\1\13\7"+
            "\uffff\1\13\44\uffff\1\14\1\13\2\uffff\4\13\1\uffff\1\13\1\uffff"+
            "\1\13\1\uffff\13\13\2\uffff\1\13\3\uffff\2\13",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "746:1: p_NodeTest : ( p_KindTest | p_NameTest );";
        }
    }
    static final String DFA127_eotS =
        "\17\uffff";
    static final String DFA127_eofS =
        "\17\uffff";
    static final String DFA127_minS =
        "\1\20\4\uffff\3\u00c4\1\uffff\1\20\1\u00c4\4\uffff";
    static final String DFA127_maxS =
        "\1\u0139\4\uffff\3\u00de\1\uffff\1\u0139\1\u00de\4\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\3\uffff\1\10\2\uffff\1\5\1\6\1\7\1\10";
    static final String DFA127_specialS =
        "\12\uffff\1\0\4\uffff}>";
    static final String[] DFA127_transitionS = {
            "\6\13\1\10\10\13\1\10\10\13\1\7\1\uffff\1\10\2\13\1\uffff\15"+
            "\13\1\uffff\6\13\1\uffff\7\13\1\11\3\13\1\uffff\4\13\1\5\5\13"+
            "\1\10\3\13\2\uffff\5\13\1\10\3\13\1\uffff\1\13\1\6\12\13\1\uffff"+
            "\6\13\1\uffff\2\13\1\uffff\43\13\1\uffff\3\13\1\uffff\20\13"+
            "\1\uffff\7\13\1\12\3\13\1\3\1\uffff\1\2\15\uffff\1\10\7\uffff"+
            "\1\4\20\uffff\2\1\2\uffff\1\13\7\uffff\2\10\3\1\73\uffff\1\13",
            "",
            "",
            "",
            "",
            "\1\13\2\uffff\1\14\26\uffff\1\13",
            "\1\13\2\uffff\1\15\26\uffff\1\13",
            "\1\13\2\uffff\1\10\26\uffff\1\13",
            "",
            "\145\10\1\uffff\11\10\1\uffff\43\10\1\uffff\24\10\1\uffff"+
            "\13\10\1\13\2\uffff\1\10\26\uffff\1\13\22\uffff\1\10\107\uffff"+
            "\1\10",
            "\1\13\2\uffff\1\16\26\uffff\1\13",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "777:1: p_PrimaryExpr : ( p_Literal | p_VarRef | p_ParenthesizedExpr | p_ContextItemExpr | p_FunctionCall | p_OrderedExpr | p_UnorderedExpr | p_Constructor );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_10 = input.LA(1);

                         
                        int index127_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA127_10==LPAREN||LA127_10==COLON) ) {s = 11;}

                        else if ( (LA127_10==LBRACKET) && ((lc(MLS)))) {s = 14;}

                         
                        input.seek(index127_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA157_eotS =
        "\76\uffff";
    static final String DFA157_eofS =
        "\1\2\75\uffff";
    static final String DFA157_minS =
        "\1\22\1\0\5\uffff\1\0\66\uffff";
    static final String DFA157_maxS =
        "\1\u00e3\1\0\5\uffff\1\0\66\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\10\uffff\1\1\62\uffff";
    static final String DFA157_specialS =
        "\1\0\1\1\5\uffff\1\2\66\uffff}>";
    static final String[] DFA157_transitionS = {
            "\4\2\4\uffff\1\2\3\uffff\1\2\4\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\1\2\1\uffff"+
            "\2\2\2\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\3\2\2\uffff"+
            "\1\2\5\uffff\2\2\7\uffff\2\2\5\uffff\1\2\4\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\2\3\uffff\1\2\4\uffff\2\2\7\uffff\1\2\10\uffff"+
            "\1\2\5\uffff\2\2\4\uffff\1\2\1\uffff\1\2\7\uffff\1\2\45\uffff"+
            "\1\2\1\uffff\2\2\1\uffff\4\2\1\uffff\1\2\1\13\1\1\1\7\7\2\10"+
            "\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "1037:25: ( ( p_OccurrenceIndicator )=>oi= p_OccurrenceIndicator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);

                         
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA157_0==STAR) ) {s = 1;}

                        else if ( (LA157_0==EOF||(LA157_0>=AND && LA157_0<=AT)||LA157_0==CASE||LA157_0==COLLATION||LA157_0==DEFAULT||(LA157_0>=DESCENDING && LA157_0<=DIV)||(LA157_0>=ELSE && LA157_0<=EMPTY)||LA157_0==EQ||(LA157_0>=EXCEPT && LA157_0<=EXTERNAL)||LA157_0==FOR||LA157_0==GE||(LA157_0>=GT && LA157_0<=IDIV)||LA157_0==IN||(LA157_0>=INSTANCE && LA157_0<=IS)||LA157_0==LE||(LA157_0>=LET && LA157_0<=MOD)||LA157_0==NE||(LA157_0>=OR && LA157_0<=ORDER)||(LA157_0>=RETURN && LA157_0<=SATISFIES)||LA157_0==STABLE||LA157_0==TO||LA157_0==UNION||LA157_0==WHERE||LA157_0==COUNT||(LA157_0>=END && LA157_0<=GROUP)||LA157_0==ONLY||LA157_0==START||(LA157_0>=AFTER && LA157_0<=BEFORE)||LA157_0==INTO||LA157_0==MODIFY||LA157_0==WITH||LA157_0==RPAREN||(LA157_0>=LBRACKET && LA157_0<=RBRACKET)||(LA157_0>=RSQUARE && LA157_0<=NOTEQUAL)||LA157_0==COMMA||(LA157_0>=MINUS && LA157_0<=GREATER_GREATER)||(LA157_0>=SEMICOLON && LA157_0<=VBAR)) ) {s = 2;}

                        else if ( (LA157_0==PLUS) ) {s = 7;}

                        else if ( (LA157_0==QUESTION) && (synpred2_XQueryParser())) {s = 11;}

                         
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_1 = input.LA(1);

                         
                        int index157_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_7 = input.LA(1);

                         
                        int index157_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_XQueryParser()) ) {s = 11;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\21\uffff";
    static final String DFA159_eofS =
        "\1\uffff\14\15\4\uffff";
    static final String DFA159_minS =
        "\1\20\14\22\4\uffff";
    static final String DFA159_maxS =
        "\1\u0139\14\u00e3\4\uffff";
    static final String DFA159_acceptS =
        "\15\uffff\1\4\1\1\1\2\1\3";
    static final String DFA159_specialS =
        "\13\uffff\1\0\5\uffff}>";
    static final String[] DFA159_transitionS = {
            "\6\15\1\3\10\15\1\10\11\15\1\1\1\2\27\15\1\14\13\15\1\12\12"+
            "\15\1\7\3\15\1\5\1\4\5\15\1\11\20\15\1\uffff\6\15\1\6\2\15\1"+
            "\uffff\43\15\1\uffff\24\15\1\uffff\7\15\1\13\3\15\55\uffff\1"+
            "\15\107\uffff\1\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\16\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\17\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "\4\15\4\uffff\1\15\3\uffff\1\15\4\uffff\1\15\2\uffff\2\15"+
            "\3\uffff\2\15\2\uffff\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff"+
            "\1\15\1\uffff\2\15\2\uffff\1\15\1\uffff\3\15\2\uffff\1\15\1"+
            "\uffff\3\15\2\uffff\1\15\5\uffff\2\15\7\uffff\2\15\5\uffff\1"+
            "\15\4\uffff\1\15\2\uffff\1\15\4\uffff\1\15\3\uffff\1\15\4\uffff"+
            "\2\15\7\uffff\1\15\10\uffff\1\15\5\uffff\2\15\4\uffff\1\15\1"+
            "\uffff\1\15\7\uffff\1\15\44\uffff\1\20\1\15\1\uffff\2\15\1\uffff"+
            "\4\15\1\uffff\13\15\4\uffff\1\15\3\uffff\2\15",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "1047:1: p_ItemType : ( p_KindTest -> ^( KindTest p_KindTest ) | {...}? => ( BINARY LPAREN RPAREN ) -> ^( BinaryTest BINARY LPAREN RPAREN ) | ( ITEM LPAREN RPAREN ) -> ^( ItemTest ITEM LPAREN RPAREN ) | p_AtomicType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_11 = input.LA(1);

                         
                        int index159_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA159_11==LPAREN) && ((lc(MLS)))) {s = 15;}

                        else if ( (LA159_11==EOF||(LA159_11>=AND && LA159_11<=AT)||LA159_11==CASE||LA159_11==COLLATION||LA159_11==DEFAULT||(LA159_11>=DESCENDING && LA159_11<=DIV)||(LA159_11>=ELSE && LA159_11<=EMPTY)||LA159_11==EQ||(LA159_11>=EXCEPT && LA159_11<=EXTERNAL)||LA159_11==FOR||LA159_11==GE||(LA159_11>=GT && LA159_11<=IDIV)||LA159_11==IN||(LA159_11>=INSTANCE && LA159_11<=IS)||LA159_11==LE||(LA159_11>=LET && LA159_11<=MOD)||LA159_11==NE||(LA159_11>=OR && LA159_11<=ORDER)||(LA159_11>=RETURN && LA159_11<=SATISFIES)||LA159_11==STABLE||LA159_11==TO||LA159_11==UNION||LA159_11==WHERE||LA159_11==COUNT||(LA159_11>=END && LA159_11<=GROUP)||LA159_11==ONLY||LA159_11==START||(LA159_11>=AFTER && LA159_11<=BEFORE)||LA159_11==INTO||LA159_11==MODIFY||LA159_11==WITH||LA159_11==RPAREN||(LA159_11>=LBRACKET && LA159_11<=RBRACKET)||(LA159_11>=RSQUARE && LA159_11<=NOTEQUAL)||(LA159_11>=COMMA && LA159_11<=GREATER_GREATER)||LA159_11==COLON||(LA159_11>=SEMICOLON && LA159_11<=VBAR)) ) {s = 13;}

                         
                        input.seek(index159_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_p_VersionDecl_in_p_Module538 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_LibraryModule_in_p_Module573 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_p_MainModule_in_p_Module599 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_p_Module628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_XQUERY_in_p_VersionDecl656 = new BitSet(new long[]{0x0000400000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_VERSION_in_p_VersionDecl687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl691 = new BitSet(new long[]{0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ENCODING_in_p_VersionDecl698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_VersionDecl702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_VersionDecl708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_MainModule776 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QueryBody_in_p_MainModule778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ModuleDecl_in_p_LibraryModule834 = new BitSet(new long[]{0x1000000400000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_pm_Prolog_in_p_LibraryModule836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODULE_in_p_ModuleDecl892 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_ModuleDecl896 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_ModuleDecl898 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUAL_in_p_ModuleDecl900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_ModuleDecl902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ModuleDecl904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultNamespaceDecl_in_pm_Prolog965 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Setter_in_pm_Prolog971 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pm_NamespaceDecl_in_pm_Prolog977 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_p_Import_in_pm_Prolog983 = new BitSet(new long[]{0x1000000400000000L});
    public static final BitSet FOLLOW_pg_OrderedDecl_in_pm_Prolog990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_VarDecl_in_pg_OrderedDecl1268 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_ContextItemDecl_in_pg_OrderedDecl1272 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_FunctionDecl_in_pg_OrderedDecl1276 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_OptionDecl_in_pg_OrderedDecl1280 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_CollectionDecl_in_pg_OrderedDecl1295 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_IndexDecl_in_pg_OrderedDecl1310 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_p_ICDecl_in_pg_OrderedDecl1325 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_pm_BoundarySpaceDecl_in_p_Setter1354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_DefaultCollationDecl_in_p_Setter1366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BaseURIDecl_in_p_Setter1378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ConstructionDecl_in_p_Setter1390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_OrderingModeDecl_in_p_Setter1402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_EmptyOrderDecl_in_p_Setter1414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_RevalidationDecl_in_p_Setter1429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CopyNamespacesDecl_in_p_Setter1441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_SchemaImport_in_p_Import1467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_ModuleImport_in_p_Import1471 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_NamespaceDecl1502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_NamespaceDecl1506 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_NamespaceDecl1510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUAL_in_pm_NamespaceDecl1512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_NamespaceDecl1516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_NamespaceDecl1518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BoundarySpaceDecl1583 = new BitSet(new long[]{0x0000000001000000L});
    public static final BitSet FOLLOW_BOUNDARY_SPACE_in_pm_BoundarySpaceDecl1587 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_BoundarySpaceDecl1592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_BoundarySpaceDecl1598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BoundarySpaceDecl1601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultNamespaceDecl1631 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultNamespaceDecl1635 = new BitSet(new long[]{0x0040040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_pm_DefaultNamespaceDecl1640 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_DefaultNamespaceDecl1646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_DefaultNamespaceDecl1651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultNamespaceDecl1653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultNamespaceDecl1655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OptionDecl1687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_OPTION_in_pm_OptionDecl1691 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_OptionDecl1693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_OptionDecl1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OptionDecl1697 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_OrderingModeDecl1729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_ORDERING_in_pm_OrderingModeDecl1733 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L});
    public static final BitSet FOLLOW_ORDERED_in_pm_OrderingModeDecl1738 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_UNORDERED_in_pm_OrderingModeDecl1744 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_OrderingModeDecl1747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_EmptyOrderDecl1779 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_EmptyOrderDecl1783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_pm_EmptyOrderDecl1787 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_EMPTY_in_pm_EmptyOrderDecl1791 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_pm_EmptyOrderDecl1796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LEAST_in_pm_EmptyOrderDecl1802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_EmptyOrderDecl1805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_CopyNamespacesDecl1837 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_COPY_NAMESPACES_in_pm_CopyNamespacesDecl1841 = new BitSet(new long[]{0x0000000000000000L,0x0000000001002000L});
    public static final BitSet FOLLOW_p_PreserveMode_in_pm_CopyNamespacesDecl1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_pm_CopyNamespacesDecl1845 = new BitSet(new long[]{0x4000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_InheritMode_in_pm_CopyNamespacesDecl1847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_CopyNamespacesDecl1849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_DecimalFormatDecl1881 = new BitSet(new long[]{0x0000000800000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1885 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DecimalFormatDecl1887 = new BitSet(new long[]{0x0000000000000000L,0x2E50000000000000L,0x000000000000401CL});
    public static final BitSet FOLLOW_DEFAULT_in_p_DecimalFormatDecl1893 = new BitSet(new long[]{0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_DECIMAL_FORMAT_in_p_DecimalFormatDecl1895 = new BitSet(new long[]{0x0000000000000000L,0x2E50000000000000L,0x000000000000401CL});
    public static final BitSet FOLLOW_p_DFPropertyName_in_p_DecimalFormatDecl1900 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_EQ_in_p_DecimalFormatDecl1903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_DecimalFormatDecl1905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_DecimalFormatDecl1907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECIMAL_SEPARATOR_in_p_DFPropertyName1937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUPING_SEPARATOR_in_p_DFPropertyName1943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INFINITY_in_p_DFPropertyName1949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_SIGN_in_p_DFPropertyName1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAN_in_p_DFPropertyName1961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_p_DFPropertyName1967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PER_MILLE_in_p_DFPropertyName1973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ZERO_DIGIT_in_p_DFPropertyName1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGIT_in_p_DFPropertyName1985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_SEPARATOR_in_p_DFPropertyName1991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRESERVE_in_p_PreserveMode2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_PRESERVE_in_p_PreserveMode2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INHERIT_in_p_InheritMode2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NO_INHERIT_in_p_InheritMode2070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_DefaultCollationDecl2111 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_DEFAULT_in_pm_DefaultCollationDecl2115 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_COLLATION_in_pm_DefaultCollationDecl2119 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_DefaultCollationDecl2121 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_DefaultCollationDecl2123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BaseURIDecl2163 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_BASE_URI_in_pm_BaseURIDecl2167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_BaseURIDecl2171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BaseURIDecl2173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_SchemaImport2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SCHEMA_in_pm_SchemaImport2232 = new BitSet(new long[]{0x0000000800000000L,0x0000000000000400L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_SchemaPrefix_in_pm_SchemaImport2236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2241 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AT_in_pm_SchemaImport2246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_COMMA_in_pm_SchemaImport2253 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_SchemaImport2257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_SchemaImport2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2335 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_SchemaPrefix2339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUAL_in_p_SchemaPrefix2341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFAULT_in_p_SchemaPrefix2382 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_ELEMENT_in_p_SchemaPrefix2386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_SchemaPrefix2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_pm_ModuleImport2440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MODULE_in_pm_ModuleImport2444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_NAMESPACE_in_pm_ModuleImport2449 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_pm_ModuleImport2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUAL_in_pm_ModuleImport2455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2461 = new BitSet(new long[]{0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AT_in_pm_ModuleImport2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_COMMA_in_pm_ModuleImport2473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_pm_ModuleImport2477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ModuleImport2483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_VarDecl2554 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_pg_PrivateVarOption_in_pm_VarDecl2556 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L,0x0000000200000020L});
    public static final BitSet FOLLOW_pg_VarDeclType_in_pm_VarDecl2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_VarDecl2562 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_VarDecl2566 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_VarDecl2570 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2575 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2579 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_VarDecl2587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400001000L});
    public static final BitSet FOLLOW_BIND_in_pm_VarDecl2590 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_VarDecl2594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_VarDecl2600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONSTANT_in_pg_VarDeclType2688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_pg_VarDeclType2724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIVATE_in_pg_PrivateVarOption2780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ContextItemDecl2831 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_CONTEXT_in_pm_ContextItemDecl2835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_ITEM_in_pm_ContextItemDecl2839 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_AS_in_pm_ContextItemDecl2844 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ItemType_in_pm_ContextItemDecl2846 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2852 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_ContextItemDecl2862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400001000L});
    public static final BitSet FOLLOW_BIND_in_pm_ContextItemDecl2865 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_ContextItemDecl2867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ContextItemDecl2873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_ConstructionDecl2908 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_CONSTRUCTION_in_pm_ConstructionDecl2912 = new BitSet(new long[]{0x0000000000000000L,0x0000000801000000L});
    public static final BitSet FOLLOW_STRIP_in_pm_ConstructionDecl2917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_PRESERVE_in_pm_ConstructionDecl2923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ConstructionDecl2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl2963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_SEQUENTIAL_in_pm_FunctionDecl2967 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl2971 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl2975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl2977 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl2981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl2984 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl2988 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_Block_in_pm_FunctionDecl2994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_FunctionDecl3066 = new BitSet(new long[]{0x0040000000000000L,0x8020000000000000L,0x0000004020000060L});
    public static final BitSet FOLLOW_p_FunctionOption_in_pm_FunctionDecl3068 = new BitSet(new long[]{0x0040000000000000L,0x0000000000000000L,0x0000004020000000L});
    public static final BitSet FOLLOW_p_FunctionType_in_pm_FunctionDecl3070 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_FUNCTION_in_pm_FunctionDecl3074 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_pm_FunctionDecl3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_pm_FunctionDecl3080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_p_ParamList_in_pm_FunctionDecl3084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_pm_FunctionDecl3087 = new BitSet(new long[]{0x0004000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_FunctionDecl3091 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_EnclosedExpr_in_pm_FunctionDecl3097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_EXTERNAL_in_pm_FunctionDecl3103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_FunctionDecl3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATING_in_p_FunctionType3187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SIMPLE_in_p_FunctionType3206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrivateOption_in_p_FunctionOption3247 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_p_DeterministicOption_in_p_FunctionOption3251 = new BitSet(new long[]{0x0000000000000002L,0x8020000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_PRIVATE_in_p_PrivateOption3281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PUBLIC_in_p_PrivateOption3287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DETERMINISTIC_in_p_DeterministicOption3318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NONDETERMINISTIC_in_p_DeterministicOption3324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3358 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_ParamList3361 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_Param_in_p_ParamList3365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_Param3423 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_Param3427 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_Param3431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EnclosedExpr3487 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_EnclosedExpr3489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EnclosedExpr3491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_QueryBody3541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3609 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264043C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_ApplyExpr_in_pm_Expr3611 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264043C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_Expr3636 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_Expr3638 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_p_FLWORExpr_in_p_ExprSingle3672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QuantifiedExpr_in_p_ExprSingle3684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TypeswitchExpr_in_p_ExprSingle3696 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IfExpr_in_p_ExprSingle3708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryCatchExpr_in_p_ExprSingle3720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_EvalExpr_in_p_ExprSingle3735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InsertExpr_in_p_ExprSingle3750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DeleteExpr_in_p_ExprSingle3765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RenameExpr_in_p_ExprSingle3780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReplaceExpr_in_p_ExprSingle3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TransformExpr_in_p_ExprSingle3810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_BlockExpr_in_p_ExprSingle3825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AssignmentExpr_in_p_ExprSingle3840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExitExpr_in_p_ExprSingle3855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhileExpr_in_p_ExprSingle3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrExpr_in_p_ExprSingle3882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_FLWORExpr3908 = new BitSet(new long[]{0x0020000000000000L,0x0104400204040040L});
    public static final BitSet FOLLOW_p_IntermediateClause_in_p_FLWORExpr3910 = new BitSet(new long[]{0x0020000000000000L,0x0104400204040040L});
    public static final BitSet FOLLOW_p_ReturnClause_in_p_FLWORExpr3913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForClause_in_p_InitialClause3939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_LetClause_in_p_InitialClause3943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WindowClause_in_p_InitialClause3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_InitialClause_in_p_IntermediateClause3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_WhereClause_in_p_IntermediateClause3977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupByClause_in_p_IntermediateClause3981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderByClause_in_p_IntermediateClause3985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CountClause_in_p_IntermediateClause3989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_p_ForClause4017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause4019 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause4021 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause4023 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause4026 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause4031 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause4033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_ForClause4036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ForClause4038 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_ForClause4040 = new BitSet(new long[]{0x2000000000280000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_ForClause4042 = new BitSet(new long[]{0x2000000000200000L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_ForClause4045 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_ForClause4050 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ForClause4052 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_AT_in_p_PositionalVar4084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_PositionalVar4088 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_PositionalVar4090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LET_in_p_LetClause4118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4122 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4124 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4129 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_LetClause4134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_LetClause4136 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_LetClause4138 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_LetClause4140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_p_LetClause4143 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_LetClause4145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_FOR_in_p_WindowClause4175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000900L});
    public static final BitSet FOLLOW_p_TumblingWindowClause_in_p_WindowClause4180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SlidingWindowClause_in_p_WindowClause4184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TUMBLING_in_p_TumblingWindowClause4221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WINDOW_in_p_TumblingWindowClause4225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TumblingWindowClause4227 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TumblingWindowClause4229 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_TumblingWindowClause4231 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_TumblingWindowClause4234 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TumblingWindowClause4236 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_TumblingWindowClause4238 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_TumblingWindowClause4240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLIDING_in_p_SlidingWindowClause4271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WINDOW_in_p_SlidingWindowClause4275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_SlidingWindowClause4277 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_SlidingWindowClause4279 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_SlidingWindowClause4281 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_SlidingWindowClause4284 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SlidingWindowClause4286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_WindowStartCondition_in_p_SlidingWindowClause4288 = new BitSet(new long[]{0x0000000000000002L,0x0080000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_WindowEndCondition_in_p_SlidingWindowClause4290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_START_in_p_WindowStartCondition4321 = new BitSet(new long[]{0x0000000000200000L,0x4000000000000000L,0x0000000000001080L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowStartCondition4323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowStartCondition4327 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowStartCondition4329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ONLY_in_p_WindowEndCondition4359 = new BitSet(new long[]{0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_END_in_p_WindowEndCondition4364 = new BitSet(new long[]{0x0000000000200000L,0x4000000000000000L,0x0000000000001080L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_WindowVars_in_p_WindowEndCondition4366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_WHEN_in_p_WindowEndCondition4370 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WindowEndCondition4372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4401 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4403 = new BitSet(new long[]{0x0000000000200002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_PositionalVar_in_p_WindowVars4407 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_PREVIOUS_in_p_WindowVars4413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4415 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4417 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_NEXT_in_p_WindowVars4424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_WindowVars4426 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_WindowVars4428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_p_CountClause4469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CountClause4473 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CountClause4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_p_WhereClause4511 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhereClause4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GROUP_in_p_GroupByClause4545 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_GroupByClause4549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_GroupingSpecList_in_p_GroupByClause4551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_GroupingSpecList4584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_GroupingSpec_in_p_GroupingSpecList4586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_GroupingSpec4616 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_GroupingSpec4618 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_GroupingSpec4623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_GroupingSpec4625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4661 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4665 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_STABLE_in_p_OrderByClause4673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_ORDER_in_p_OrderByClause4677 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_OrderByClause4681 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_OrderSpecList_in_p_OrderByClause4685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4715 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_OrderSpecList4718 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_OrderSpec_in_p_OrderSpecList4720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_OrderSpec4750 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_OrderSpec4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASCENDING_in_p_OrderModifier4781 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_DESCENDING_in_p_OrderModifier4787 = new BitSet(new long[]{0x0000100040000002L});
    public static final BitSet FOLLOW_EMPTY_in_p_OrderModifier4794 = new BitSet(new long[]{0x0100000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_GREATEST_in_p_OrderModifier4799 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_LEAST_in_p_OrderModifier4805 = new BitSet(new long[]{0x0000000040000002L});
    public static final BitSet FOLLOW_COLLATION_in_p_OrderModifier4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_OrderModifier4815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_p_ReturnClause4847 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReturnClause4851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOME_in_p_QuantifiedExpr4882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_EVERY_in_p_QuantifiedExpr4888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4891 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_QuantifiedExpr4893 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4895 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4900 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4902 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_QuantifiedExpr4905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_QuantifiedExpr4907 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_QuantifiedExpr4909 = new BitSet(new long[]{0x2000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_QuantifiedExpr4911 = new BitSet(new long[]{0x2000000000000000L});
    public static final BitSet FOLLOW_IN_in_p_QuantifiedExpr4916 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4918 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SATISFIES_in_p_QuantifiedExpr4924 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_QuantifiedExpr4926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPESWITCH_in_p_TypeswitchExpr4956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_TypeswitchExpr4958 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TypeswitchExpr4960 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_TypeswitchExpr4962 = new BitSet(new long[]{0x0000000004000000L});
    public static final BitSet FOLLOW_p_CaseClause_in_p_TypeswitchExpr4964 = new BitSet(new long[]{0x0000000804000000L});
    public static final BitSet FOLLOW_DEFAULT_in_p_TypeswitchExpr4969 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TypeswitchExpr4972 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TypeswitchExpr4974 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TypeswitchExpr4980 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TypeswitchExpr4982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_p_CaseClause5012 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000004FL,0x0200000000000000L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CaseClause5015 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CaseClause5017 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CaseClause5021 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000004FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_CaseClause5025 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_CaseClause5029 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_CaseClause5031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_p_IfExpr5061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_IfExpr5063 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_IfExpr5065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_IfExpr5067 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_THEN_in_p_IfExpr5071 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr5073 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_ELSE_in_p_IfExpr5077 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_IfExpr5079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5107 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_OR_in_p_OrExpr5113 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_AndExpr_in_p_OrExpr5117 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5148 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_AND_in_p_AndExpr5154 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ComparisonExpr_in_p_AndExpr5158 = new BitSet(new long[]{0x0000000000040002L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5189 = new BitSet(new long[]{0x0280800000000002L,0x0000000000000892L,0x0000000000000000L,0x0000000003F02800L});
    public static final BitSet FOLLOW_p_ValueComp_in_p_ComparisonExpr5194 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_GeneralComp_in_p_ComparisonExpr5198 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NodeComp_in_p_ComparisonExpr5202 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_RangeExpr_in_p_ComparisonExpr5205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5236 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_TO_in_p_RangeExpr5242 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_AdditiveExpr_in_p_RangeExpr5246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_set_in_p_AdditiveExpr5281 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_MultiplicativeExpr_in_p_AdditiveExpr5289 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5320 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_p_MultiplicativeExpr5325 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_DIV_in_p_MultiplicativeExpr5331 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_IDIV_in_p_MultiplicativeExpr5339 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_MOD_in_p_MultiplicativeExpr5347 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_UnionExpr_in_p_MultiplicativeExpr5352 = new BitSet(new long[]{0x0400008000000002L,0x0000000000000100L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5383 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_UNION_in_p_UnionExpr5390 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_VBAR_in_p_UnionExpr5396 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_IntersectExceptExpr_in_p_UnionExpr5399 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5430 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_INTERSECT_in_p_IntersectExceptExpr5437 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_EXCEPT_in_p_IntersectExceptExpr5443 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_InstanceofExpr_in_p_IntersectExceptExpr5448 = new BitSet(new long[]{0x0002000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_p_TreatExpr_in_p_InstanceofExpr5479 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_INSTANCE_in_p_InstanceofExpr5485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_InstanceofExpr5491 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000004FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_InstanceofExpr5495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastableExpr_in_p_TreatExpr5525 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_TREAT_in_p_TreatExpr5531 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_TreatExpr5537 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000004FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TreatExpr5541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CastExpr_in_p_CastableExpr5580 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_CASTABLE_in_p_CastableExpr5586 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastableExpr5592 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastableExpr5596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnaryExpr_in_p_CastExpr5635 = new BitSet(new long[]{0x0000000008000002L});
    public static final BitSet FOLLOW_CAST_in_p_CastExpr5641 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_CastExpr5647 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SingleType_in_p_CastExpr5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_p_UnaryExpr5683 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_MINUS_in_p_UnaryExpr5687 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ValueExpr_in_p_UnaryExpr5691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ValidateExpr_in_p_ValueExpr5747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ValueExpr5759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExtensionExpr_in_p_ValueExpr5771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_GeneralComp0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQ_in_p_ValueComp5850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NE_in_p_ValueComp5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LT_in_p_ValueComp5862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_p_ValueComp5868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_p_ValueComp5874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_p_ValueComp5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_p_NodeComp5913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_SMALLER_in_p_NodeComp5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_GREATER_in_p_NodeComp5923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALIDATE_in_p_ValidateExpr5953 = new BitSet(new long[]{0x0000000000080000L,0x0000000400000008L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_ValidationMode_in_p_ValidateExpr5957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ValidateExpr5960 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ValidateExpr5962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ValidateExpr5964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_p_ValidationMode5995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRICT_in_p_ValidationMode6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_ValidationMode6008 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ValidationMode6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_Pragma_in_p_ExtensionExpr6042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ExtensionExpr6045 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E015FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ExtensionExpr6047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ExtensionExpr6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6092 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_p_PathExpr6107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_SLASH_in_p_PathExpr6119 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_p_PathExpr6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_set_in_p_RelativePathExpr6164 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_StepExpr_in_p_RelativePathExpr6172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_p_AxisStep_in_p_StepExpr6200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FilterExpr_in_p_StepExpr6212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseStep_in_p_AxisStep6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_ForwardStep_in_p_AxisStep6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_AxisStep6246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ForwardAxis_in_p_ForwardStep6273 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000204002002000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ForwardStep6275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevForwardStep_in_p_ForwardStep6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CHILD_in_p_ForwardAxis6306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_in_p_ForwardAxis6320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_ForwardAxis6334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELF_in_p_ForwardAxis6348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESCENDANT_OR_SELF_in_p_ForwardAxis6362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_SIBLING_in_p_ForwardAxis6376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOLLOWING_in_p_ForwardAxis6390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ForwardAxis6392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTR_SIGN_in_p_AbbrevForwardStep6418 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000204002002000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_AbbrevForwardStep6421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ReverseAxis_in_p_ReverseStep6448 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000204002002000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NodeTest_in_p_ReverseStep6450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AbbrevReverseStep_in_p_ReverseStep6455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARENT_in_p_ReverseAxis6481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_in_p_ReverseAxis6495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_SIBLING_in_p_ReverseAxis6509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRECEDING_in_p_ReverseAxis6523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ANCESTOR_OR_SELF_in_p_ReverseAxis6537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_COLON_COLON_in_p_ReverseAxis6539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_DOT_in_p_AbbrevReverseStep6565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_NodeTest6591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_NodeTest6595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_NameTest6621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Wildcard_in_p_NameTest6625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6655 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6658 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NCName_in_p_Wildcard6667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_COLON_in_p_Wildcard6669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_p_Wildcard6671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PrimaryExpr_in_p_FilterExpr6712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_p_PredicateList_in_p_FilterExpr6714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Predicate_in_p_PredicateList6742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LSQUARE_in_p_Predicate6771 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_Predicate6773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_RSQUARE_in_p_Predicate6775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Literal_in_p_PrimaryExpr6803 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_VarRef_in_p_PrimaryExpr6815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ParenthesizedExpr_in_p_PrimaryExpr6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ContextItemExpr_in_p_PrimaryExpr6839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FunctionCall_in_p_PrimaryExpr6851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OrderedExpr_in_p_PrimaryExpr6863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UnorderedExpr_in_p_PrimaryExpr6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Constructor_in_p_PrimaryExpr6887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NumericLiteral_in_p_Literal6915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_Literal6919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NumericLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_VarRef6991 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_VarRef6993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_VarName7021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_p_ParenthesizedExpr7049 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E007FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ParenthesizedExpr7051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_ParenthesizedExpr7054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_p_ContextItemExpr7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDERED_in_p_OrderedExpr7112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_OrderedExpr7116 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_OrderedExpr7118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_OrderedExpr7120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNORDERED_in_p_UnorderedExpr7150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_UnorderedExpr7154 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_UnorderedExpr7156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_UnorderedExpr7158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FQName_in_p_FunctionCall7187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_FunctionCall7189 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E007FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_COMMA_in_p_FunctionCall7195 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_FunctionCall7197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_RPAREN_in_p_FunctionCall7203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_p_Constructor7235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ComputedConstructor_in_p_Constructor7239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirElemConstructor_in_p_DirectConstructor7267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirCommentConstructor_in_p_DirectConstructor7279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_DirPIConstructor_in_p_DirectConstructor7291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SMALLER_in_p_DirElemConstructor7320 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000100200000L});
    public static final BitSet FOLLOW_p_DirAttributeList_in_p_DirElemConstructor7338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100200000L});
    public static final BitSet FOLLOW_EMPTY_CLOSE_TAG_in_p_DirElemConstructor7354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7359 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x0600000200100080L});
    public static final BitSet FOLLOW_pm_DirElemContent_in_p_DirElemConstructor7361 = new BitSet(new long[]{0x0000000000000FC0L,0x0000000000000000L,0x0000000000000000L,0x0600000200100080L});
    public static final BitSet FOLLOW_CLOSE_TAG_in_p_DirElemConstructor7364 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirElemConstructor7366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000200000L});
    public static final BitSet FOLLOW_S_in_p_DirElemConstructor7368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_GREATER_in_p_DirElemConstructor7371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7448 = new BitSet(new long[]{0xFFFFFFFFFFFF0002L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x004200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_DirAttributeList7451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000800L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUAL_in_p_DirAttributeList7456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040600000000000L});
    public static final BitSet FOLLOW_S_in_p_DirAttributeList7458 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040600000000000L});
    public static final BitSet FOLLOW_p_DirAttributeValue_in_p_DirAttributeList7461 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7492 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_ESCAPE_QUOT_in_p_DirAttributeValue7495 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_pm_QuotAttrValueContent_in_p_DirAttributeValue7499 = new BitSet(new long[]{0x0000000000002F10L,0x0000000000000000L,0x0000000000000000L,0x0000400000000080L});
    public static final BitSet FOLLOW_QUOT_in_p_DirAttributeValue7503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7542 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000200000000080L});
    public static final BitSet FOLLOW_ESCAPE_APOS_in_p_DirAttributeValue7545 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000200000000080L});
    public static final BitSet FOLLOW_pm_AposAttrValueContent_in_p_DirAttributeValue7549 = new BitSet(new long[]{0x0000000000001F20L,0x0000000000000000L,0x0000000000000000L,0x0000200000000080L});
    public static final BitSet FOLLOW_APOS_in_p_DirAttributeValue7553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_QuotAttrContentChar_in_pm_QuotAttrValueContent7605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_QuotAttrValueContent7609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_QuotAttrValueContent7613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_QuotAttrContentChar_in_pg_QuotAttrContentChar7642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_AposAttrContentChar_in_pm_AposAttrValueContent7695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_AposAttrValueContent7699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_AposAttrValueContent7703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_AposAttrContentChar_in_pg_AposAttrContentChar7732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DirectConstructor_in_pm_DirElemContent7783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_CDataSection_in_pm_DirElemContent7795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElemEnclosedExpr_in_pm_DirElemContent7807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_CommonContent_in_pm_DirElemContent7819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pg_ElementContentChar_in_pm_DirElemContent7831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_L_ElementContentChar_in_pg_ElementContentChar7860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_CommonContent_in_pg_CommonContent7916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_pm_CommonContent0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_ElemEnclosedExpr8012 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_ElemEnclosedExpr8028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_ElemEnclosedExpr8042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompDocConstructor_in_p_ComputedConstructor8094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompElemConstructor_in_p_ComputedConstructor8106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompAttrConstructor_in_p_ComputedConstructor8118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompNamespaceConstructor_in_p_ComputedConstructor8130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompTextConstructor_in_p_ComputedConstructor8142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompCommentConstructor_in_p_ComputedConstructor8154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompPIConstructor_in_p_ComputedConstructor8166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CompBinaryConstructor_in_p_ComputedConstructor8181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_in_p_CompDocConstructor8215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompDocConstructor8219 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompDocConstructor8221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompDocConstructor8223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_CompElemConstructor8264 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000008FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompElemConstructor8269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8274 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompElemConstructor8282 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E015FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompElemConstructor8284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompElemConstructor8287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_CompAttrConstructor8320 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000008FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CompAttrConstructor8325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8330 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompAttrConstructor8338 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E015FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompAttrConstructor8340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompAttrConstructor8343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_in_p_CompNamespaceConstructor8371 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000008FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompNamespaceConstructor8376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8381 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompNamespaceConstructor8389 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E015FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompNamespaceConstructor8391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompNamespaceConstructor8394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_CompTextConstructor8430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompTextConstructor8434 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompTextConstructor8436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompTextConstructor8438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_CompBinaryConstructor8468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompBinaryConstructor8472 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompBinaryConstructor8474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompBinaryConstructor8476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CompCommentConstructor8506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompCommentConstructor8510 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompCommentConstructor8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompCommentConstructor8514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_CompPIConstructor8545 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000008FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_CompPIConstructor8550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8555 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8557 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CompPIConstructor8563 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E015FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CompPIConstructor8565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CompPIConstructor8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_SingleType8596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUESTION_in_p_SingleType8598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_TypeDeclaration8629 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000004FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SequenceType_in_p_TypeDeclaration8635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMPTY_SEQUENCE_in_p_SequenceType8690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_SequenceType8696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_SequenceType8700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ItemType_in_p_SequenceType8749 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000070000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_SequenceType8760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_OccurrenceIndicator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_KindTest_in_p_ItemType8862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BINARY_in_p_ItemType8902 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ITEM_in_p_ItemType8948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_ItemType8950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_ItemType8952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AtomicType_in_p_ItemType8993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AtomicType9019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_DocumentTest_in_p_KindTest9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_KindTest9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeTest_in_p_KindTest9093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_KindTest9105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_SchemaAttributeTest_in_p_KindTest9117 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NamespaceNodeTest_in_p_KindTest9129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PITest_in_p_KindTest9141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_CommentTest_in_p_KindTest9153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TextTest_in_p_KindTest9165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AnyKindTest_in_p_KindTest9177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_AnyKindTest9205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_AnyKindTest9207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_AnyKindTest9209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOCUMENT_NODE_in_p_DocumentTest9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_DocumentTest9239 = new BitSet(new long[]{0x0000040000000000L,0x0000000040000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_ElementTest_in_p_DocumentTest9242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_SchemaElementTest_in_p_DocumentTest9246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_DocumentTest9250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TEXT_in_p_TextTest9270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_TextTest9272 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_TextTest9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMENT_in_p_CommentTest9302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_CommentTest9304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_CommentTest9306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAMESPACE_NODE_in_p_NamespaceNodeTest9332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_NamespaceNodeTest9334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_NamespaceNodeTest9336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCESSING_INSTRUCTION_in_p_PITest9364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_PITest9366 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000260000000002FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_PITest9369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_p_StringLiteral_in_p_PITest9373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_PITest9377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ATTRIBUTE_in_p_AttributeTest9405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_AttributeTest9407 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000002002FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_AttribNameOrWildcard_in_p_AttributeTest9410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_COMMA_in_p_AttributeTest9413 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_AttributeTest9415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_AttributeTest9421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttribNameOrWildcard9451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_AttribNameOrWildcard9455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ATTRIBUTE_in_p_SchemaAttributeTest9483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaAttributeTest9485 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_AttributeDeclaration_in_p_SchemaAttributeTest9487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaAttributeTest9489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_AttributeName_in_p_AttributeDeclaration9515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELEMENT_in_p_ElementTest9543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_ElementTest9545 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000002002FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ElementNameOrWildcard_in_p_ElementTest9548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_COMMA_in_p_ElementTest9551 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_TypeName_in_p_ElementTest9553 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010020L});
    public static final BitSet FOLLOW_QUESTION_in_p_ElementTest9555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_ElementTest9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementNameOrWildcard9590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_p_ElementNameOrWildcard9594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SCHEMA_ELEMENT_in_p_SchemaElementTest9614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_SchemaElementTest9616 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ElementDeclaration_in_p_SchemaElementTest9618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_SchemaElementTest9620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ElementName_in_p_ElementDeclaration9646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_AttributeName9674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_ElementName9702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_TypeName9730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_TryClause_in_p_TryCatchExpr9762 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_p_CatchClause_in_p_TryCatchExpr9764 = new BitSet(new long[]{0x0000000000000002L,0x0001000000000000L});
    public static final BitSet FOLLOW_TRY_in_p_TryClause9793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_TryClause9797 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_TryClause9799 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_TryClause9801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CATCH_in_p_CatchClause9832 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000204002002009FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_CatchErrorList_in_p_CatchClause9836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000090L});
    public static final BitSet FOLLOW_p_CatchVars_in_p_CatchClause9838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_CatchClause9841 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_Expr_in_p_CatchClause9843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_CatchClause9845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_VBAR_in_p_CatchErrorList9874 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000204002002000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NameTest_in_p_CatchErrorList9876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LPAREN_in_p_CatchVars9922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9924 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9931 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008020L});
    public static final BitSet FOLLOW_COMMA_in_p_CatchVars9936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_CatchVars9938 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_CatchVars9940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_CatchVars9946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral9995 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFBFFFL,0x03FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_QuotStringLiteralContent_in_p_StringLiteral9999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_QUOT_in_p_StringLiteral10001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral10042 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFBFFFL,0x03FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_AposStringLiteralContent_in_p_StringLiteral10046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_APOS_in_p_StringLiteral10048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_QuotStringLiteralContent10104 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFBFFFFFFFBFFFL,0x03FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_set_in_p_AposStringLiteralContent10156 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF2L,0xFFFFFFFFFFFFFFFFL,0xFFFFFFFFFFFFFFFFL,0xFFFFDFFFFFFFBFFFL,0x03FFFFFFFFFFFFFFL});
    public static final BitSet FOLLOW_p_NCName_in_p_QName10246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_p_LocalNCName_in_p_QName10248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalNCName10303 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalNCName10305 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_FNCName_in_p_FQName10352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_p_LocalFNCName_in_p_FQName10354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_p_LocalFNCName10382 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NCName_in_p_LocalFNCName10384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_NCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_p_FNCName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_RevalidationDecl12120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_REVALIDATION_in_pm_RevalidationDecl12124 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000008L,0x0000000010000000L});
    public static final BitSet FOLLOW_STRICT_in_pm_RevalidationDecl12129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAX_in_pm_RevalidationDecl12135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SKIP_in_pm_RevalidationDecl12141 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AS_in_p_InsertExprTargetChoice12174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000480000L});
    public static final BitSet FOLLOW_FIRST_in_p_InsertExprTargetChoice12179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LAST_in_p_InsertExprTargetChoice12185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_INTO_in_p_InsertExprTargetChoice12192 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_p_InsertExprTargetChoice12209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BEFORE_in_p_InsertExprTargetChoice12225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_p_InsertExpr12255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NODE_in_p_InsertExpr12260 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_NODES_in_p_InsertExpr12266 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_SourceExpr_in_p_InsertExpr12269 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000218000L});
    public static final BitSet FOLLOW_p_InsertExprTargetChoice_in_p_InsertExpr12271 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_InsertExpr12273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_p_DeleteExpr12303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NODE_in_p_DeleteExpr12308 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_NODES_in_p_DeleteExpr12314 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_DeleteExpr12317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REPLACE_in_p_ReplaceExpr12347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0000000040000000L});
    public static final BitSet FOLLOW_VALUE_in_p_ReplaceExpr12352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_OF_in_p_ReplaceExpr12356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ReplaceExpr12362 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_WITH_in_p_ReplaceExpr12368 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ReplaceExpr12370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RENAME_in_p_RenameExpr12400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_RenameExpr12404 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_TargetExpr_in_p_RenameExpr12406 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_AS_in_p_RenameExpr12408 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_NewNameExpr_in_p_RenameExpr12410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_SourceExpr12438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TargetExpr12464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_NewNameExpr12490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COPY_in_p_TransformExpr12518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12520 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12524 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_TransformExpr12529 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_TransformExpr12531 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_TransformExpr12533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_p_TransformExpr12535 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000800000L,0x0000000000008000L});
    public static final BitSet FOLLOW_MODIFY_in_p_TransformExpr12543 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12545 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETURN_in_p_TransformExpr12549 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_TransformExpr12551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ConcatExpr_in_pm_ApplyExpr12586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_ApplyExpr12588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_ConcatExpr12617 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ConcatExpr12619 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_BLOCK_in_p_BlockExpr12649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_Block_in_p_BlockExpr12653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACKET_in_p_Block12679 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_pm_BlockDecls_in_p_Block12683 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_BlockBody_in_p_Block12687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_Block12689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_BlockVarDecl_in_pm_BlockDecls12745 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_DECLARE_in_pm_BlockVarDecl12800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12804 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12808 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000400009000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400009000L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12816 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_COMMA_in_pm_BlockVarDecl12825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_pm_BlockVarDecl12827 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_pm_BlockVarDecl12829 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000400009000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_pm_BlockVarDecl12831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400009000L});
    public static final BitSet FOLLOW_BIND_in_pm_BlockVarDecl12835 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_pm_BlockVarDecl12837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_SEMICOLON_in_pm_BlockVarDecl12843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pm_Expr_in_p_BlockBody12903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_p_AssignmentExpr12931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_AssignmentExpr12935 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_AssignmentExpr12937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_BIND_in_p_AssignmentExpr12939 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_AssignmentExpr12941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXIT_in_p_ExitExpr12969 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RETURNING_in_p_ExitExpr12975 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ExitExpr12979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_p_WhileExpr13007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_p_WhileExpr13011 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_WhileExpr13013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_p_WhileExpr13015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_p_WhileBody_in_p_WhileExpr13017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_Block_in_p_WhileBody13043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_UsingClause_in_p_EvalExpr13073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_EVAL_in_p_EvalExpr13078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_LBRACKET_in_p_EvalExpr13082 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_EvalExpr13084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_RBRACKET_in_p_EvalExpr13086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_USING_in_p_UsingClause13113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause13117 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause13119 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_COMMA_in_p_UsingClause13122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_UsingClause13124 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_VarName_in_p_UsingClause13126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_DECLARE_in_p_CollectionDecl13161 = new BitSet(new long[]{0x0000000000000000L,0x0000040000080000L,0x1200A40000000000L});
    public static final BitSet FOLLOW_p_CollProperties_in_p_CollectionDecl13163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_CollectionDecl13167 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_CollectionDecl13169 = new BitSet(new long[]{0x0000000000080000L,0x0000000000000000L,0x0000000080000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_p_CollectionTypeDecl_in_p_CollectionDecl13171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000080000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_WITH_in_p_CollectionDecl13177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x4200000000000000L});
    public static final BitSet FOLLOW_p_NodeModifier_in_p_CollectionDecl13179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NODES_in_p_CollectionDecl13183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_CollectionDecl13187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONST_in_p_CollProperties13218 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_MUTABLE_in_p_CollProperties13224 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_APPEND_ONLY_in_p_CollProperties13238 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_QUEUE_in_p_CollProperties13244 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_ORDERED_in_p_CollProperties13258 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_UNORDERED_in_p_CollProperties13264 = new BitSet(new long[]{0x0000000000000002L,0x0000040000080000L,0x1200840000000000L});
    public static final BitSet FOLLOW_AS_in_p_CollectionTypeDecl13297 = new BitSet(new long[]{0x0000060080400000L,0x1000001062004000L});
    public static final BitSet FOLLOW_p_KindTest_in_p_CollectionTypeDecl13301 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000070000L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_p_CollectionTypeDecl13310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_READ_ONLY_in_p_NodeModifier13341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MUTABLE_in_p_NodeModifier13347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_IndexDecl13377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8510080040000000L});
    public static final BitSet FOLLOW_p_IndexProperties_in_p_IndexDecl13379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_INDEX_in_p_IndexDecl13383 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_IndexName_in_p_IndexDecl13385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_ON_in_p_IndexDecl13389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_NODES_in_p_IndexDecl13393 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_IndexDomainExpr_in_p_IndexDecl13395 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_BY_in_p_IndexDecl13399 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl13401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_COMMA_in_p_IndexDecl13404 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_IndexKeySpec_in_p_IndexDecl13406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400008000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_IndexDecl13410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_QName_in_p_IndexName13437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties13466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_NON_in_p_IndexProperties13472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_IndexProperties13476 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties13490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_RANGE_in_p_IndexProperties13494 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_VALUE_in_p_IndexProperties13500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_EQUALITY_in_p_IndexProperties13504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_AUTOMATICALLY_in_p_IndexProperties13518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties13522 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_MANUALLY_in_p_IndexProperties13528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_MAINTAINED_in_p_IndexProperties13532 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x8500080040000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexDomainExpr13562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_IndexKeyExpr_in_p_IndexKeySpec13587 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_p_TypeDeclaration_in_p_IndexKeySpec13589 = new BitSet(new long[]{0x0000104040100000L});
    public static final BitSet FOLLOW_p_OrderModifier_in_p_IndexKeySpec13591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_IndexKeyExpr13616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DECLARE_in_p_ICDecl13643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_INTEGRITY_in_p_ICDecl13647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_CONSTRAINT_in_p_ICDecl13651 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICDecl13655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0804000000000000L});
    public static final BitSet FOLLOW_p_ICCollection_in_p_ICDecl13658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_p_ICForeignKey_in_p_ICDecl13662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SEMICOLON_in_p_ICDecl13665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_p_ICCollection13692 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICCollection13696 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollection13700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L,0x0002000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_p_ICCollSequence_in_p_ICCollection13703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollSequenceUnique_in_p_ICCollection13707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_ICCollNode_in_p_ICCollection13711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequence13737 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequence13739 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequence13743 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollSequence13747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollSequenceUnique13774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollSequenceUnique13778 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollSequenceUnique13780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollSequenceUnique13784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_UNIQUE_in_p_ICCollSequenceUnique13788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICCollSequenceUnique13792 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICCollSequenceUnique13794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREACH_in_p_ICCollNode13823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICCollNode13827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICCollNode13829 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICCollNode13831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_CHECK_in_p_ICCollNode13835 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3F0264003C1E005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_ExprSingle_in_p_ICCollNode13837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOREIGN_in_p_ICForeignKey13866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKey13870 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeySource_in_p_ICForeignKey13872 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyTarget_in_p_ICForeignKey13874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_p_ICForeignKeySource13903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeySource13907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TO_in_p_ICForeignKeyTarget13934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_p_ICForeignKeyValues_in_p_ICForeignKeyTarget13938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLLECTION_in_p_ICForeignKeyValues13965 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues13967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_NODE_in_p_ICForeignKeyValues13971 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_DOLLAR_in_p_ICForeignKeyValues13973 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x000200000000000FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_QName_in_p_ICForeignKeyValues13975 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KEY_in_p_ICForeignKeyValues13979 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_PathExpr_in_p_ICForeignKeyValues13981 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_synpred1_XQueryParser6084 = new BitSet(new long[]{0xFFFFFFFFFFFF0000L,0x7FDFFFFFFFFFFFFFL,0xFEFFFFF7FFFFFFFFL,0x3E0264003C12005FL,0x0200000000000000L});
    public static final BitSet FOLLOW_p_RelativePathExpr_in_synpred1_XQueryParser6086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred2_XQueryParser8753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_p_OccurrenceIndicator_in_synpred3_XQueryParser13305 = new BitSet(new long[]{0x0000000000000002L});

}